
Balance_Car_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080031c8  080031c8  000131c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031f4  080031f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080031f4  080031f4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031f4  080031f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080031f4  080031f4  000131f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080031fc  080031fc  000131fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000070  08003274  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08003274  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d27  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002916  00000000  00000000  00030dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  000336d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee8  00000000  00000000  000346d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae08  00000000  00000000  000355b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139bb  00000000  00000000  000503c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ed4f  00000000  00000000  00063d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2aca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045e0  00000000  00000000  000f2b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080031b0 	.word	0x080031b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080031b0 	.word	0x080031b0

0800014c <_Z41__static_initialization_and_destruction_0ii>:
			RightMotor.isForward = false;
		}
		RightMotor.duration--;
	}

}
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2b01      	cmp	r3, #1
 800015a:	d110      	bne.n	800017e <_Z41__static_initialization_and_destruction_0ii+0x32>
 800015c:	683b      	ldr	r3, [r7, #0]
 800015e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000162:	4293      	cmp	r3, r2
 8000164:	d10b      	bne.n	800017e <_Z41__static_initialization_and_destruction_0ii+0x32>
#define RightMotorTimer	&htim2
#define SpeedCalculation &htim3


#include "MotorEncoder.hpp"
static MotorEncoder LeftMotor(LeftMotorTimer, TIM_CHANNEL_1 ,TIM_CHANNEL_2);
 8000166:	2304      	movs	r3, #4
 8000168:	2200      	movs	r2, #0
 800016a:	490e      	ldr	r1, [pc, #56]	; (80001a4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800016c:	480e      	ldr	r0, [pc, #56]	; (80001a8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800016e:	f000 f831 	bl	80001d4 <_ZN12MotorEncoderC1EP17TIM_HandleTypeDeftt>
static MotorEncoder RightMotor(RightMotorTimer, TIM_CHANNEL_1 ,TIM_CHANNEL_2);
 8000172:	2304      	movs	r3, #4
 8000174:	2200      	movs	r2, #0
 8000176:	490d      	ldr	r1, [pc, #52]	; (80001ac <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000178:	480d      	ldr	r0, [pc, #52]	; (80001b0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800017a:	f000 f82b 	bl	80001d4 <_ZN12MotorEncoderC1EP17TIM_HandleTypeDeftt>
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2b00      	cmp	r3, #0
 8000182:	d10a      	bne.n	800019a <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800018a:	4293      	cmp	r3, r2
 800018c:	d105      	bne.n	800019a <_Z41__static_initialization_and_destruction_0ii+0x4e>
 800018e:	4808      	ldr	r0, [pc, #32]	; (80001b0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000190:	f000 f860 	bl	8000254 <_ZN12MotorEncoderD1Ev>
static MotorEncoder LeftMotor(LeftMotorTimer, TIM_CHANNEL_1 ,TIM_CHANNEL_2);
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8000196:	f000 f85d 	bl	8000254 <_ZN12MotorEncoderD1Ev>
 800019a:	bf00      	nop
 800019c:	3708      	adds	r7, #8
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	20000170 	.word	0x20000170
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	200001b8 	.word	0x200001b8
 80001b0:	200000a8 	.word	0x200000a8

080001b4 <_GLOBAL__sub_I_HAL_GPIO_EXTI_Callback>:
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
 80001b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80001bc:	2001      	movs	r0, #1
 80001be:	f7ff ffc5 	bl	800014c <_Z41__static_initialization_and_destruction_0ii>
 80001c2:	bd80      	pop	{r7, pc}

080001c4 <_GLOBAL__sub_D_HAL_GPIO_EXTI_Callback>:
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0
 80001c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80001cc:	2000      	movs	r0, #0
 80001ce:	f7ff ffbd 	bl	800014c <_Z41__static_initialization_and_destruction_0ii>
 80001d2:	bd80      	pop	{r7, pc}

080001d4 <_ZN12MotorEncoderC1EP17TIM_HandleTypeDeftt>:

#include "../Inc/MotorEncoder.hpp"

#define SpeedCalTimer &htim3

MotorEncoder::MotorEncoder(TIM_HandleTypeDef* timer, uint16_t timer_channelA, uint16_t timer_channelB)
 80001d4:	b590      	push	{r4, r7, lr}
 80001d6:	b087      	sub	sp, #28
 80001d8:	af02      	add	r7, sp, #8
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	4611      	mov	r1, r2
 80001e0:	461a      	mov	r2, r3
 80001e2:	460b      	mov	r3, r1
 80001e4:	80fb      	strh	r3, [r7, #6]
 80001e6:	4613      	mov	r3, r2
 80001e8:	80bb      	strh	r3, [r7, #4]
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	4a18      	ldr	r2, [pc, #96]	; (8000250 <_ZN12MotorEncoderC1EP17TIM_HandleTypeDeftt+0x7c>)
 80001ee:	611a      	str	r2, [r3, #16]
{
	motorSpeed = 0;
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	f04f 0200 	mov.w	r2, #0
 80001f6:	601a      	str	r2, [r3, #0]
	prev_speed_timer_val = 0;
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	2200      	movs	r2, #0
 80001fc:	60da      	str	r2, [r3, #12]
	duration = 0;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	2200      	movs	r2, #0
 8000202:	615a      	str	r2, [r3, #20]
	isForward = true;
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	2201      	movs	r2, #1
 8000208:	761a      	strb	r2, [r3, #24]
	forwardPWM = new PWMChannel(0, nullptr,timer, timer_channelA);
 800020a:	2014      	movs	r0, #20
 800020c:	f002 fe2c 	bl	8002e68 <_Znwj>
 8000210:	4603      	mov	r3, r0
 8000212:	461c      	mov	r4, r3
 8000214:	88fb      	ldrh	r3, [r7, #6]
 8000216:	9300      	str	r3, [sp, #0]
 8000218:	68bb      	ldr	r3, [r7, #8]
 800021a:	2200      	movs	r2, #0
 800021c:	2100      	movs	r1, #0
 800021e:	4620      	mov	r0, r4
 8000220:	f000 f831 	bl	8000286 <_ZN10PWMChannelC1EtP12GPIO_TypeDefP17TIM_HandleTypeDeft>
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	605c      	str	r4, [r3, #4]
	reversePWM = new PWMChannel(0, nullptr,timer, timer_channelB);
 8000228:	2014      	movs	r0, #20
 800022a:	f002 fe1d 	bl	8002e68 <_Znwj>
 800022e:	4603      	mov	r3, r0
 8000230:	461c      	mov	r4, r3
 8000232:	88bb      	ldrh	r3, [r7, #4]
 8000234:	9300      	str	r3, [sp, #0]
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	2200      	movs	r2, #0
 800023a:	2100      	movs	r1, #0
 800023c:	4620      	mov	r0, r4
 800023e:	f000 f822 	bl	8000286 <_ZN10PWMChannelC1EtP12GPIO_TypeDefP17TIM_HandleTypeDeft>
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	609c      	str	r4, [r3, #8]
}
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	4618      	mov	r0, r3
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bd90      	pop	{r4, r7, pc}
 8000250:	3a03126f 	.word	0x3a03126f

08000254 <_ZN12MotorEncoderD1Ev>:

MotorEncoder::~MotorEncoder()
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
{
	delete forwardPWM;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d003      	beq.n	800026c <_ZN12MotorEncoderD1Ev+0x18>
 8000264:	2114      	movs	r1, #20
 8000266:	4618      	mov	r0, r3
 8000268:	f002 fdfc 	bl	8002e64 <_ZdlPvj>
	delete reversePWM;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	689b      	ldr	r3, [r3, #8]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d003      	beq.n	800027c <_ZN12MotorEncoderD1Ev+0x28>
 8000274:	2114      	movs	r1, #20
 8000276:	4618      	mov	r0, r3
 8000278:	f002 fdf4 	bl	8002e64 <_ZdlPvj>
}
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	4618      	mov	r0, r3
 8000280:	3708      	adds	r7, #8
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}

08000286 <_ZN10PWMChannelC1EtP12GPIO_TypeDefP17TIM_HandleTypeDeft>:

/* Example
 * PWMChannel pwmChannel = PWMChannel(0, nullptr,&htim2, TIM_CHANNEL_1);
 * */

PWMChannel::PWMChannel(uint16_t pin_num, GPIO_TypeDef* port, TIM_HandleTypeDef* timer,
 8000286:	b480      	push	{r7}
 8000288:	b085      	sub	sp, #20
 800028a:	af00      	add	r7, sp, #0
 800028c:	60f8      	str	r0, [r7, #12]
 800028e:	607a      	str	r2, [r7, #4]
 8000290:	603b      	str	r3, [r7, #0]
 8000292:	460b      	mov	r3, r1
 8000294:	817b      	strh	r3, [r7, #10]
                       uint16_t timer_channel)
    : pin_num_(pin_num), port_(port), timer_(timer), timer_channel_(timer_channel) {}
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	897a      	ldrh	r2, [r7, #10]
 800029a:	801a      	strh	r2, [r3, #0]
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	687a      	ldr	r2, [r7, #4]
 80002a0:	605a      	str	r2, [r3, #4]
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	683a      	ldr	r2, [r7, #0]
 80002a6:	609a      	str	r2, [r3, #8]
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	8b3a      	ldrh	r2, [r7, #24]
 80002ac:	819a      	strh	r2, [r3, #12]
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	4618      	mov	r0, r3
 80002b2:	3714      	adds	r7, #20
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bc80      	pop	{r7}
 80002b8:	4770      	bx	lr
	...

080002bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b088      	sub	sp, #32
 80002c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c2:	f107 0310 	add.w	r3, r7, #16
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d0:	4b1e      	ldr	r3, [pc, #120]	; (800034c <MX_GPIO_Init+0x90>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	4a1d      	ldr	r2, [pc, #116]	; (800034c <MX_GPIO_Init+0x90>)
 80002d6:	f043 0310 	orr.w	r3, r3, #16
 80002da:	6193      	str	r3, [r2, #24]
 80002dc:	4b1b      	ldr	r3, [pc, #108]	; (800034c <MX_GPIO_Init+0x90>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	f003 0310 	and.w	r3, r3, #16
 80002e4:	60fb      	str	r3, [r7, #12]
 80002e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e8:	4b18      	ldr	r3, [pc, #96]	; (800034c <MX_GPIO_Init+0x90>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	4a17      	ldr	r2, [pc, #92]	; (800034c <MX_GPIO_Init+0x90>)
 80002ee:	f043 0304 	orr.w	r3, r3, #4
 80002f2:	6193      	str	r3, [r2, #24]
 80002f4:	4b15      	ldr	r3, [pc, #84]	; (800034c <MX_GPIO_Init+0x90>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	f003 0304 	and.w	r3, r3, #4
 80002fc:	60bb      	str	r3, [r7, #8]
 80002fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000300:	4b12      	ldr	r3, [pc, #72]	; (800034c <MX_GPIO_Init+0x90>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a11      	ldr	r2, [pc, #68]	; (800034c <MX_GPIO_Init+0x90>)
 8000306:	f043 0308 	orr.w	r3, r3, #8
 800030a:	6193      	str	r3, [r2, #24]
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <MX_GPIO_Init+0x90>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	f003 0308 	and.w	r3, r3, #8
 8000314:	607b      	str	r3, [r7, #4]
 8000316:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800031e:	480c      	ldr	r0, [pc, #48]	; (8000350 <MX_GPIO_Init+0x94>)
 8000320:	f001 f86c 	bl	80013fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000324:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000328:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032a:	2301      	movs	r3, #1
 800032c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032e:	2300      	movs	r3, #0
 8000330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000332:	2302      	movs	r3, #2
 8000334:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000336:	f107 0310 	add.w	r3, r7, #16
 800033a:	4619      	mov	r1, r3
 800033c:	4804      	ldr	r0, [pc, #16]	; (8000350 <MX_GPIO_Init+0x94>)
 800033e:	f000 fed9 	bl	80010f4 <HAL_GPIO_Init>

}
 8000342:	bf00      	nop
 8000344:	3720      	adds	r7, #32
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40021000 	.word	0x40021000
 8000350:	40011000 	.word	0x40011000

08000354 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000358:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <MX_I2C1_Init+0x50>)
 800035a:	4a13      	ldr	r2, [pc, #76]	; (80003a8 <MX_I2C1_Init+0x54>)
 800035c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800035e:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <MX_I2C1_Init+0x50>)
 8000360:	4a12      	ldr	r2, [pc, #72]	; (80003ac <MX_I2C1_Init+0x58>)
 8000362:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000364:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <MX_I2C1_Init+0x50>)
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800036a:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <MX_I2C1_Init+0x50>)
 800036c:	2200      	movs	r2, #0
 800036e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000370:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <MX_I2C1_Init+0x50>)
 8000372:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000376:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000378:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <MX_I2C1_Init+0x50>)
 800037a:	2200      	movs	r2, #0
 800037c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800037e:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <MX_I2C1_Init+0x50>)
 8000380:	2200      	movs	r2, #0
 8000382:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000384:	4b07      	ldr	r3, [pc, #28]	; (80003a4 <MX_I2C1_Init+0x50>)
 8000386:	2200      	movs	r2, #0
 8000388:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800038a:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <MX_I2C1_Init+0x50>)
 800038c:	2200      	movs	r2, #0
 800038e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000390:	4804      	ldr	r0, [pc, #16]	; (80003a4 <MX_I2C1_Init+0x50>)
 8000392:	f001 f84b 	bl	800142c <HAL_I2C_Init>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800039c:	f000 f904 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	200000c4 	.word	0x200000c4
 80003a8:	40005400 	.word	0x40005400
 80003ac:	000186a0 	.word	0x000186a0

080003b0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80003b4:	4b12      	ldr	r3, [pc, #72]	; (8000400 <MX_I2C2_Init+0x50>)
 80003b6:	4a13      	ldr	r2, [pc, #76]	; (8000404 <MX_I2C2_Init+0x54>)
 80003b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <MX_I2C2_Init+0x50>)
 80003bc:	4a12      	ldr	r2, [pc, #72]	; (8000408 <MX_I2C2_Init+0x58>)
 80003be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <MX_I2C2_Init+0x50>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <MX_I2C2_Init+0x50>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <MX_I2C2_Init+0x50>)
 80003ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003d2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003d4:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <MX_I2C2_Init+0x50>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80003da:	4b09      	ldr	r3, [pc, #36]	; (8000400 <MX_I2C2_Init+0x50>)
 80003dc:	2200      	movs	r2, #0
 80003de:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <MX_I2C2_Init+0x50>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003e6:	4b06      	ldr	r3, [pc, #24]	; (8000400 <MX_I2C2_Init+0x50>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003ec:	4804      	ldr	r0, [pc, #16]	; (8000400 <MX_I2C2_Init+0x50>)
 80003ee:	f001 f81d 	bl	800142c <HAL_I2C_Init>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80003f8:	f000 f8d6 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003fc:	bf00      	nop
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	20000118 	.word	0x20000118
 8000404:	40005800 	.word	0x40005800
 8000408:	000186a0 	.word	0x000186a0

0800040c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b08c      	sub	sp, #48	; 0x30
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000414:	f107 031c 	add.w	r3, r7, #28
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a32      	ldr	r2, [pc, #200]	; (80004f0 <HAL_I2C_MspInit+0xe4>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d133      	bne.n	8000494 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800042c:	4b31      	ldr	r3, [pc, #196]	; (80004f4 <HAL_I2C_MspInit+0xe8>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a30      	ldr	r2, [pc, #192]	; (80004f4 <HAL_I2C_MspInit+0xe8>)
 8000432:	f043 0308 	orr.w	r3, r3, #8
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b2e      	ldr	r3, [pc, #184]	; (80004f4 <HAL_I2C_MspInit+0xe8>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0308 	and.w	r3, r3, #8
 8000440:	61bb      	str	r3, [r7, #24]
 8000442:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000444:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800044a:	2312      	movs	r3, #18
 800044c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800044e:	2303      	movs	r3, #3
 8000450:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000452:	f107 031c 	add.w	r3, r7, #28
 8000456:	4619      	mov	r1, r3
 8000458:	4827      	ldr	r0, [pc, #156]	; (80004f8 <HAL_I2C_MspInit+0xec>)
 800045a:	f000 fe4b 	bl	80010f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800045e:	4b27      	ldr	r3, [pc, #156]	; (80004fc <HAL_I2C_MspInit+0xf0>)
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000466:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800046a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800046c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800046e:	f043 0302 	orr.w	r3, r3, #2
 8000472:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000474:	4a21      	ldr	r2, [pc, #132]	; (80004fc <HAL_I2C_MspInit+0xf0>)
 8000476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000478:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800047a:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <HAL_I2C_MspInit+0xe8>)
 800047c:	69db      	ldr	r3, [r3, #28]
 800047e:	4a1d      	ldr	r2, [pc, #116]	; (80004f4 <HAL_I2C_MspInit+0xe8>)
 8000480:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000484:	61d3      	str	r3, [r2, #28]
 8000486:	4b1b      	ldr	r3, [pc, #108]	; (80004f4 <HAL_I2C_MspInit+0xe8>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800048e:	617b      	str	r3, [r7, #20]
 8000490:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000492:	e029      	b.n	80004e8 <HAL_I2C_MspInit+0xdc>
  else if(i2cHandle->Instance==I2C2)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a19      	ldr	r2, [pc, #100]	; (8000500 <HAL_I2C_MspInit+0xf4>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d124      	bne.n	80004e8 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800049e:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <HAL_I2C_MspInit+0xe8>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	4a14      	ldr	r2, [pc, #80]	; (80004f4 <HAL_I2C_MspInit+0xe8>)
 80004a4:	f043 0308 	orr.w	r3, r3, #8
 80004a8:	6193      	str	r3, [r2, #24]
 80004aa:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <HAL_I2C_MspInit+0xe8>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	f003 0308 	and.w	r3, r3, #8
 80004b2:	613b      	str	r3, [r7, #16]
 80004b4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80004b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80004ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004bc:	2312      	movs	r3, #18
 80004be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004c0:	2303      	movs	r3, #3
 80004c2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c4:	f107 031c 	add.w	r3, r7, #28
 80004c8:	4619      	mov	r1, r3
 80004ca:	480b      	ldr	r0, [pc, #44]	; (80004f8 <HAL_I2C_MspInit+0xec>)
 80004cc:	f000 fe12 	bl	80010f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80004d0:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <HAL_I2C_MspInit+0xe8>)
 80004d2:	69db      	ldr	r3, [r3, #28]
 80004d4:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <HAL_I2C_MspInit+0xe8>)
 80004d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004da:	61d3      	str	r3, [r2, #28]
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <HAL_I2C_MspInit+0xe8>)
 80004de:	69db      	ldr	r3, [r3, #28]
 80004e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	68fb      	ldr	r3, [r7, #12]
}
 80004e8:	bf00      	nop
 80004ea:	3730      	adds	r7, #48	; 0x30
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40005400 	.word	0x40005400
 80004f4:	40021000 	.word	0x40021000
 80004f8:	40010c00 	.word	0x40010c00
 80004fc:	40010000 	.word	0x40010000
 8000500:	40005800 	.word	0x40005800

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 fcae 	bl	8000e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f811 	bl	8000532 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f7ff fed4 	bl	80002bc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000514:	f7ff ff1e 	bl	8000354 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000518:	f7ff ff4a 	bl	80003b0 <MX_I2C2_Init>
  MX_TIM1_Init();
 800051c:	f000 f900 	bl	8000720 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000520:	f000 f9ac 	bl	800087c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000524:	f000 fa2c 	bl	8000980 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000528:	f000 fac0 	bl	8000aac <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800052c:	f000 fbf2 	bl	8000d14 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000530:	e7fe      	b.n	8000530 <main+0x2c>

08000532 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000532:	b580      	push	{r7, lr}
 8000534:	b090      	sub	sp, #64	; 0x40
 8000536:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000538:	f107 0318 	add.w	r3, r7, #24
 800053c:	2228      	movs	r2, #40	; 0x28
 800053e:	2100      	movs	r1, #0
 8000540:	4618      	mov	r0, r3
 8000542:	f002 fcef 	bl	8002f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000554:	2302      	movs	r3, #2
 8000556:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000558:	2301      	movs	r3, #1
 800055a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055c:	2310      	movs	r3, #16
 800055e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000560:	2300      	movs	r3, #0
 8000562:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000564:	f107 0318 	add.w	r3, r7, #24
 8000568:	4618      	mov	r0, r3
 800056a:	f001 f8a3 	bl	80016b4 <HAL_RCC_OscConfig>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000574:	f000 f818 	bl	80005a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000578:	230f      	movs	r3, #15
 800057a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2100      	movs	r1, #0
 8000590:	4618      	mov	r0, r3
 8000592:	f001 fb11 	bl	8001bb8 <HAL_RCC_ClockConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800059c:	f000 f804 	bl	80005a8 <Error_Handler>
  }
}
 80005a0:	bf00      	nop
 80005a2:	3740      	adds	r7, #64	; 0x40
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ac:	b672      	cpsid	i
}
 80005ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <Error_Handler+0x8>
	...

080005b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ba:	4b15      	ldr	r3, [pc, #84]	; (8000610 <HAL_MspInit+0x5c>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	4a14      	ldr	r2, [pc, #80]	; (8000610 <HAL_MspInit+0x5c>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6193      	str	r3, [r2, #24]
 80005c6:	4b12      	ldr	r3, [pc, #72]	; (8000610 <HAL_MspInit+0x5c>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <HAL_MspInit+0x5c>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <HAL_MspInit+0x5c>)
 80005d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005dc:	61d3      	str	r3, [r2, #28]
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <HAL_MspInit+0x5c>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ea:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <HAL_MspInit+0x60>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <HAL_MspInit+0x60>)
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	40021000 	.word	0x40021000
 8000614:	40010000 	.word	0x40010000

08000618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800061c:	e7fe      	b.n	800061c <NMI_Handler+0x4>

0800061e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000622:	e7fe      	b.n	8000622 <HardFault_Handler+0x4>

08000624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000628:	e7fe      	b.n	8000628 <MemManage_Handler+0x4>

0800062a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800062e:	e7fe      	b.n	800062e <BusFault_Handler+0x4>

08000630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <UsageFault_Handler+0x4>

08000636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr

08000642 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr

0800064e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr

0800065a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800065e:	f000 fc49 	bl	8000ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}

08000666 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  return 1;
 800066a:	2301      	movs	r3, #1
}
 800066c:	4618      	mov	r0, r3
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr

08000674 <_kill>:

int _kill(int pid, int sig)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800067e:	f002 fc17 	bl	8002eb0 <__errno>
 8000682:	4603      	mov	r3, r0
 8000684:	2216      	movs	r2, #22
 8000686:	601a      	str	r2, [r3, #0]
  return -1;
 8000688:	f04f 33ff 	mov.w	r3, #4294967295
}
 800068c:	4618      	mov	r0, r3
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <_exit>:

void _exit (int status)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800069c:	f04f 31ff 	mov.w	r1, #4294967295
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f7ff ffe7 	bl	8000674 <_kill>
  while (1) {}    /* Make sure we hang here */
 80006a6:	e7fe      	b.n	80006a6 <_exit+0x12>

080006a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006b0:	4a14      	ldr	r2, [pc, #80]	; (8000704 <_sbrk+0x5c>)
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <_sbrk+0x60>)
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006bc:	4b13      	ldr	r3, [pc, #76]	; (800070c <_sbrk+0x64>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d102      	bne.n	80006ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <_sbrk+0x64>)
 80006c6:	4a12      	ldr	r2, [pc, #72]	; (8000710 <_sbrk+0x68>)
 80006c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <_sbrk+0x64>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4413      	add	r3, r2
 80006d2:	693a      	ldr	r2, [r7, #16]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d207      	bcs.n	80006e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006d8:	f002 fbea 	bl	8002eb0 <__errno>
 80006dc:	4603      	mov	r3, r0
 80006de:	220c      	movs	r2, #12
 80006e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295
 80006e6:	e009      	b.n	80006fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <_sbrk+0x64>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ee:	4b07      	ldr	r3, [pc, #28]	; (800070c <_sbrk+0x64>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4413      	add	r3, r2
 80006f6:	4a05      	ldr	r2, [pc, #20]	; (800070c <_sbrk+0x64>)
 80006f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006fa:	68fb      	ldr	r3, [r7, #12]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3718      	adds	r7, #24
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20005000 	.word	0x20005000
 8000708:	00000400 	.word	0x00000400
 800070c:	2000016c 	.word	0x2000016c
 8000710:	200002f0 	.word	0x200002f0

08000714 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr

08000720 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b096      	sub	sp, #88	; 0x58
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000726:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000736:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000740:	f107 0320 	add.w	r3, r7, #32
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
 8000750:	615a      	str	r2, [r3, #20]
 8000752:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000754:	463b      	mov	r3, r7
 8000756:	2220      	movs	r2, #32
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f002 fbe2 	bl	8002f24 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000760:	4b44      	ldr	r3, [pc, #272]	; (8000874 <MX_TIM1_Init+0x154>)
 8000762:	4a45      	ldr	r2, [pc, #276]	; (8000878 <MX_TIM1_Init+0x158>)
 8000764:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000766:	4b43      	ldr	r3, [pc, #268]	; (8000874 <MX_TIM1_Init+0x154>)
 8000768:	2200      	movs	r2, #0
 800076a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076c:	4b41      	ldr	r3, [pc, #260]	; (8000874 <MX_TIM1_Init+0x154>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000772:	4b40      	ldr	r3, [pc, #256]	; (8000874 <MX_TIM1_Init+0x154>)
 8000774:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000778:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077a:	4b3e      	ldr	r3, [pc, #248]	; (8000874 <MX_TIM1_Init+0x154>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000780:	4b3c      	ldr	r3, [pc, #240]	; (8000874 <MX_TIM1_Init+0x154>)
 8000782:	2200      	movs	r2, #0
 8000784:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000786:	4b3b      	ldr	r3, [pc, #236]	; (8000874 <MX_TIM1_Init+0x154>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800078c:	4839      	ldr	r0, [pc, #228]	; (8000874 <MX_TIM1_Init+0x154>)
 800078e:	f001 fba1 	bl	8001ed4 <HAL_TIM_Base_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000798:	f7ff ff06 	bl	80005a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800079c:	4835      	ldr	r0, [pc, #212]	; (8000874 <MX_TIM1_Init+0x154>)
 800079e:	f001 fc40 	bl	8002022 <HAL_TIM_PWM_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80007a8:	f7ff fefe 	bl	80005a8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80007ac:	2307      	movs	r3, #7
 80007ae:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80007b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007b8:	4619      	mov	r1, r3
 80007ba:	482e      	ldr	r0, [pc, #184]	; (8000874 <MX_TIM1_Init+0x154>)
 80007bc:	f001 fe6f 	bl	800249e <HAL_TIM_SlaveConfigSynchro>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80007c6:	f7ff feef 	bl	80005a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ca:	2300      	movs	r3, #0
 80007cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007d6:	4619      	mov	r1, r3
 80007d8:	4826      	ldr	r0, [pc, #152]	; (8000874 <MX_TIM1_Init+0x154>)
 80007da:	f002 f9b5 	bl	8002b48 <HAL_TIMEx_MasterConfigSynchronization>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80007e4:	f7ff fee0 	bl	80005a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e8:	2360      	movs	r3, #96	; 0x60
 80007ea:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007f0:	2300      	movs	r3, #0
 80007f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007fc:	2300      	movs	r3, #0
 80007fe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000800:	2300      	movs	r3, #0
 8000802:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000804:	f107 0320 	add.w	r3, r7, #32
 8000808:	2200      	movs	r2, #0
 800080a:	4619      	mov	r1, r3
 800080c:	4819      	ldr	r0, [pc, #100]	; (8000874 <MX_TIM1_Init+0x154>)
 800080e:	f001 fcbd 	bl	800218c <HAL_TIM_PWM_ConfigChannel>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000818:	f7ff fec6 	bl	80005a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800081c:	f107 0320 	add.w	r3, r7, #32
 8000820:	2204      	movs	r2, #4
 8000822:	4619      	mov	r1, r3
 8000824:	4813      	ldr	r0, [pc, #76]	; (8000874 <MX_TIM1_Init+0x154>)
 8000826:	f001 fcb1 	bl	800218c <HAL_TIM_PWM_ConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000830:	f7ff feba 	bl	80005a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000834:	2300      	movs	r3, #0
 8000836:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000838:	2300      	movs	r3, #0
 800083a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800083c:	2300      	movs	r3, #0
 800083e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000848:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000852:	463b      	mov	r3, r7
 8000854:	4619      	mov	r1, r3
 8000856:	4807      	ldr	r0, [pc, #28]	; (8000874 <MX_TIM1_Init+0x154>)
 8000858:	f002 f9d4 	bl	8002c04 <HAL_TIMEx_ConfigBreakDeadTime>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000862:	f7ff fea1 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000866:	4803      	ldr	r0, [pc, #12]	; (8000874 <MX_TIM1_Init+0x154>)
 8000868:	f000 fa02 	bl	8000c70 <HAL_TIM_MspPostInit>

}
 800086c:	bf00      	nop
 800086e:	3758      	adds	r7, #88	; 0x58
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000170 	.word	0x20000170
 8000878:	40012c00 	.word	0x40012c00

0800087c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08e      	sub	sp, #56	; 0x38
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800089c:	463b      	mov	r3, r7
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]
 80008aa:	615a      	str	r2, [r3, #20]
 80008ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008ae:	4b33      	ldr	r3, [pc, #204]	; (800097c <MX_TIM2_Init+0x100>)
 80008b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008b6:	4b31      	ldr	r3, [pc, #196]	; (800097c <MX_TIM2_Init+0x100>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008bc:	4b2f      	ldr	r3, [pc, #188]	; (800097c <MX_TIM2_Init+0x100>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80008c2:	4b2e      	ldr	r3, [pc, #184]	; (800097c <MX_TIM2_Init+0x100>)
 80008c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ca:	4b2c      	ldr	r3, [pc, #176]	; (800097c <MX_TIM2_Init+0x100>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d0:	4b2a      	ldr	r3, [pc, #168]	; (800097c <MX_TIM2_Init+0x100>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008d6:	4829      	ldr	r0, [pc, #164]	; (800097c <MX_TIM2_Init+0x100>)
 80008d8:	f001 fafc 	bl	8001ed4 <HAL_TIM_Base_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80008e2:	f7ff fe61 	bl	80005a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008e6:	4825      	ldr	r0, [pc, #148]	; (800097c <MX_TIM2_Init+0x100>)
 80008e8:	f001 fb9b 	bl	8002022 <HAL_TIM_PWM_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80008f2:	f7ff fe59 	bl	80005a8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80008f6:	2307      	movs	r3, #7
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80008fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000902:	4619      	mov	r1, r3
 8000904:	481d      	ldr	r0, [pc, #116]	; (800097c <MX_TIM2_Init+0x100>)
 8000906:	f001 fdca 	bl	800249e <HAL_TIM_SlaveConfigSynchro>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000910:	f7ff fe4a 	bl	80005a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	4816      	ldr	r0, [pc, #88]	; (800097c <MX_TIM2_Init+0x100>)
 8000924:	f002 f910 	bl	8002b48 <HAL_TIMEx_MasterConfigSynchronization>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800092e:	f7ff fe3b 	bl	80005a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000932:	2360      	movs	r3, #96	; 0x60
 8000934:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000942:	463b      	mov	r3, r7
 8000944:	2200      	movs	r2, #0
 8000946:	4619      	mov	r1, r3
 8000948:	480c      	ldr	r0, [pc, #48]	; (800097c <MX_TIM2_Init+0x100>)
 800094a:	f001 fc1f 	bl	800218c <HAL_TIM_PWM_ConfigChannel>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000954:	f7ff fe28 	bl	80005a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000958:	463b      	mov	r3, r7
 800095a:	2204      	movs	r2, #4
 800095c:	4619      	mov	r1, r3
 800095e:	4807      	ldr	r0, [pc, #28]	; (800097c <MX_TIM2_Init+0x100>)
 8000960:	f001 fc14 	bl	800218c <HAL_TIM_PWM_ConfigChannel>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800096a:	f7ff fe1d 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800096e:	4803      	ldr	r0, [pc, #12]	; (800097c <MX_TIM2_Init+0x100>)
 8000970:	f000 f97e 	bl	8000c70 <HAL_TIM_MspPostInit>

}
 8000974:	bf00      	nop
 8000976:	3738      	adds	r7, #56	; 0x38
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	200001b8 	.word	0x200001b8

08000980 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b092      	sub	sp, #72	; 0x48
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000986:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ae:	463b      	mov	r3, r7
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
 80009bc:	615a      	str	r2, [r3, #20]
 80009be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009c0:	4b38      	ldr	r3, [pc, #224]	; (8000aa4 <MX_TIM3_Init+0x124>)
 80009c2:	4a39      	ldr	r2, [pc, #228]	; (8000aa8 <MX_TIM3_Init+0x128>)
 80009c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009c6:	4b37      	ldr	r3, [pc, #220]	; (8000aa4 <MX_TIM3_Init+0x124>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009cc:	4b35      	ldr	r3, [pc, #212]	; (8000aa4 <MX_TIM3_Init+0x124>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009d2:	4b34      	ldr	r3, [pc, #208]	; (8000aa4 <MX_TIM3_Init+0x124>)
 80009d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009da:	4b32      	ldr	r3, [pc, #200]	; (8000aa4 <MX_TIM3_Init+0x124>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e0:	4b30      	ldr	r3, [pc, #192]	; (8000aa4 <MX_TIM3_Init+0x124>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009e6:	482f      	ldr	r0, [pc, #188]	; (8000aa4 <MX_TIM3_Init+0x124>)
 80009e8:	f001 fa74 	bl	8001ed4 <HAL_TIM_Base_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80009f2:	f7ff fdd9 	bl	80005a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009fa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a00:	4619      	mov	r1, r3
 8000a02:	4828      	ldr	r0, [pc, #160]	; (8000aa4 <MX_TIM3_Init+0x124>)
 8000a04:	f001 fc84 	bl	8002310 <HAL_TIM_ConfigClockSource>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000a0e:	f7ff fdcb 	bl	80005a8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000a12:	4824      	ldr	r0, [pc, #144]	; (8000aa4 <MX_TIM3_Init+0x124>)
 8000a14:	f001 faad 	bl	8001f72 <HAL_TIM_OC_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8000a1e:	f7ff fdc3 	bl	80005a8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000a26:	2310      	movs	r3, #16
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2e:	4619      	mov	r1, r3
 8000a30:	481c      	ldr	r0, [pc, #112]	; (8000aa4 <MX_TIM3_Init+0x124>)
 8000a32:	f001 fd34 	bl	800249e <HAL_TIM_SlaveConfigSynchro>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8000a3c:	f7ff fdb4 	bl	80005a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4815      	ldr	r0, [pc, #84]	; (8000aa4 <MX_TIM3_Init+0x124>)
 8000a50:	f002 f87a 	bl	8002b48 <HAL_TIMEx_MasterConfigSynchronization>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000a5a:	f7ff fda5 	bl	80005a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a6e:	463b      	mov	r3, r7
 8000a70:	2200      	movs	r2, #0
 8000a72:	4619      	mov	r1, r3
 8000a74:	480b      	ldr	r0, [pc, #44]	; (8000aa4 <MX_TIM3_Init+0x124>)
 8000a76:	f001 fb2d 	bl	80020d4 <HAL_TIM_OC_ConfigChannel>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000a80:	f7ff fd92 	bl	80005a8 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a84:	463b      	mov	r3, r7
 8000a86:	2204      	movs	r2, #4
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <MX_TIM3_Init+0x124>)
 8000a8c:	f001 fb22 	bl	80020d4 <HAL_TIM_OC_ConfigChannel>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8000a96:	f7ff fd87 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	3748      	adds	r7, #72	; 0x48
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000200 	.word	0x20000200
 8000aa8:	40000400 	.word	0x40000400

08000aac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b092      	sub	sp, #72	; 0x48
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ada:	463b      	mov	r3, r7
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
 8000ae8:	615a      	str	r2, [r3, #20]
 8000aea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000aec:	4b32      	ldr	r3, [pc, #200]	; (8000bb8 <MX_TIM4_Init+0x10c>)
 8000aee:	4a33      	ldr	r2, [pc, #204]	; (8000bbc <MX_TIM4_Init+0x110>)
 8000af0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000af2:	4b31      	ldr	r3, [pc, #196]	; (8000bb8 <MX_TIM4_Init+0x10c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af8:	4b2f      	ldr	r3, [pc, #188]	; (8000bb8 <MX_TIM4_Init+0x10c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000afe:	4b2e      	ldr	r3, [pc, #184]	; (8000bb8 <MX_TIM4_Init+0x10c>)
 8000b00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b06:	4b2c      	ldr	r3, [pc, #176]	; (8000bb8 <MX_TIM4_Init+0x10c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b0c:	4b2a      	ldr	r3, [pc, #168]	; (8000bb8 <MX_TIM4_Init+0x10c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b12:	4829      	ldr	r0, [pc, #164]	; (8000bb8 <MX_TIM4_Init+0x10c>)
 8000b14:	f001 f9de 	bl	8001ed4 <HAL_TIM_Base_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000b1e:	f7ff fd43 	bl	80005a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b26:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4822      	ldr	r0, [pc, #136]	; (8000bb8 <MX_TIM4_Init+0x10c>)
 8000b30:	f001 fbee 	bl	8002310 <HAL_TIM_ConfigClockSource>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000b3a:	f7ff fd35 	bl	80005a8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000b3e:	481e      	ldr	r0, [pc, #120]	; (8000bb8 <MX_TIM4_Init+0x10c>)
 8000b40:	f001 fa17 	bl	8001f72 <HAL_TIM_OC_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8000b4a:	f7ff fd2d 	bl	80005a8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8000b52:	2320      	movs	r3, #32
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4816      	ldr	r0, [pc, #88]	; (8000bb8 <MX_TIM4_Init+0x10c>)
 8000b5e:	f001 fc9e 	bl	800249e <HAL_TIM_SlaveConfigSynchro>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8000b68:	f7ff fd1e 	bl	80005a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	4619      	mov	r1, r3
 8000b7a:	480f      	ldr	r0, [pc, #60]	; (8000bb8 <MX_TIM4_Init+0x10c>)
 8000b7c:	f001 ffe4 	bl	8002b48 <HAL_TIMEx_MasterConfigSynchronization>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8000b86:	f7ff fd0f 	bl	80005a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <MX_TIM4_Init+0x10c>)
 8000ba2:	f001 fa97 	bl	80020d4 <HAL_TIM_OC_ConfigChannel>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8000bac:	f7ff fcfc 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	3748      	adds	r7, #72	; 0x48
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000248 	.word	0x20000248
 8000bbc:	40000800 	.word	0x40000800

08000bc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b087      	sub	sp, #28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a24      	ldr	r2, [pc, #144]	; (8000c60 <HAL_TIM_Base_MspInit+0xa0>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d10c      	bne.n	8000bec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bd2:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <HAL_TIM_Base_MspInit+0xa4>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	4a23      	ldr	r2, [pc, #140]	; (8000c64 <HAL_TIM_Base_MspInit+0xa4>)
 8000bd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bdc:	6193      	str	r3, [r2, #24]
 8000bde:	4b21      	ldr	r3, [pc, #132]	; (8000c64 <HAL_TIM_Base_MspInit+0xa4>)
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000bea:	e034      	b.n	8000c56 <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM2)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bf4:	d10c      	bne.n	8000c10 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bf6:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <HAL_TIM_Base_MspInit+0xa4>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	4a1a      	ldr	r2, [pc, #104]	; (8000c64 <HAL_TIM_Base_MspInit+0xa4>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	61d3      	str	r3, [r2, #28]
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <HAL_TIM_Base_MspInit+0xa4>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
}
 8000c0e:	e022      	b.n	8000c56 <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM3)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <HAL_TIM_Base_MspInit+0xa8>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d10c      	bne.n	8000c34 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c1a:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_TIM_Base_MspInit+0xa4>)
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	4a11      	ldr	r2, [pc, #68]	; (8000c64 <HAL_TIM_Base_MspInit+0xa4>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	61d3      	str	r3, [r2, #28]
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <HAL_TIM_Base_MspInit+0xa4>)
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
}
 8000c32:	e010      	b.n	8000c56 <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM4)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0c      	ldr	r2, [pc, #48]	; (8000c6c <HAL_TIM_Base_MspInit+0xac>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d10b      	bne.n	8000c56 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <HAL_TIM_Base_MspInit+0xa4>)
 8000c40:	69db      	ldr	r3, [r3, #28]
 8000c42:	4a08      	ldr	r2, [pc, #32]	; (8000c64 <HAL_TIM_Base_MspInit+0xa4>)
 8000c44:	f043 0304 	orr.w	r3, r3, #4
 8000c48:	61d3      	str	r3, [r2, #28]
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_TIM_Base_MspInit+0xa4>)
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	f003 0304 	and.w	r3, r3, #4
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
}
 8000c56:	bf00      	nop
 8000c58:	371c      	adds	r7, #28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr
 8000c60:	40012c00 	.word	0x40012c00
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40000400 	.word	0x40000400
 8000c6c:	40000800 	.word	0x40000800

08000c70 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a1f      	ldr	r2, [pc, #124]	; (8000d08 <HAL_TIM_MspPostInit+0x98>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d119      	bne.n	8000cc4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <HAL_TIM_MspPostInit+0x9c>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a1d      	ldr	r2, [pc, #116]	; (8000d0c <HAL_TIM_MspPostInit+0x9c>)
 8000c96:	f043 0304 	orr.w	r3, r3, #4
 8000c9a:	6193      	str	r3, [r2, #24]
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <HAL_TIM_MspPostInit+0x9c>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	f003 0304 	and.w	r3, r3, #4
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ca8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 0310 	add.w	r3, r7, #16
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4814      	ldr	r0, [pc, #80]	; (8000d10 <HAL_TIM_MspPostInit+0xa0>)
 8000cbe:	f000 fa19 	bl	80010f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000cc2:	e01c      	b.n	8000cfe <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM2)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ccc:	d117      	bne.n	8000cfe <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <HAL_TIM_MspPostInit+0x9c>)
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <HAL_TIM_MspPostInit+0x9c>)
 8000cd4:	f043 0304 	orr.w	r3, r3, #4
 8000cd8:	6193      	str	r3, [r2, #24]
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <HAL_TIM_MspPostInit+0x9c>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	f003 0304 	and.w	r3, r3, #4
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	f107 0310 	add.w	r3, r7, #16
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4805      	ldr	r0, [pc, #20]	; (8000d10 <HAL_TIM_MspPostInit+0xa0>)
 8000cfa:	f000 f9fb 	bl	80010f4 <HAL_GPIO_Init>
}
 8000cfe:	bf00      	nop
 8000d00:	3720      	adds	r7, #32
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40012c00 	.word	0x40012c00
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	40010800 	.word	0x40010800

08000d14 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d1a:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <MX_USART1_UART_Init+0x50>)
 8000d1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d4c:	f001 ffab 	bl	8002ca6 <HAL_UART_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d56:	f7ff fc27 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000290 	.word	0x20000290
 8000d64:	40013800 	.word	0x40013800

08000d68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	; 0x28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a22      	ldr	r2, [pc, #136]	; (8000e0c <HAL_UART_MspInit+0xa4>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d13d      	bne.n	8000e04 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d88:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <HAL_UART_MspInit+0xa8>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a20      	ldr	r2, [pc, #128]	; (8000e10 <HAL_UART_MspInit+0xa8>)
 8000d8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b1e      	ldr	r3, [pc, #120]	; (8000e10 <HAL_UART_MspInit+0xa8>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da0:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <HAL_UART_MspInit+0xa8>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a1a      	ldr	r2, [pc, #104]	; (8000e10 <HAL_UART_MspInit+0xa8>)
 8000da6:	f043 0308 	orr.w	r3, r3, #8
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <HAL_UART_MspInit+0xa8>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0308 	and.w	r3, r3, #8
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000db8:	2340      	movs	r3, #64	; 0x40
 8000dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4812      	ldr	r0, [pc, #72]	; (8000e14 <HAL_UART_MspInit+0xac>)
 8000dcc:	f000 f992 	bl	80010f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000dd0:	2380      	movs	r3, #128	; 0x80
 8000dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	480c      	ldr	r0, [pc, #48]	; (8000e14 <HAL_UART_MspInit+0xac>)
 8000de4:	f000 f986 	bl	80010f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000de8:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <HAL_UART_MspInit+0xb0>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
 8000dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
 8000df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df8:	f043 0304 	orr.w	r3, r3, #4
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8000dfe:	4a06      	ldr	r2, [pc, #24]	; (8000e18 <HAL_UART_MspInit+0xb0>)
 8000e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e02:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e04:	bf00      	nop
 8000e06:	3728      	adds	r7, #40	; 0x28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40013800 	.word	0x40013800
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40010c00 	.word	0x40010c00
 8000e18:	40010000 	.word	0x40010000

08000e1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e1c:	f7ff fc7a 	bl	8000714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e20:	480b      	ldr	r0, [pc, #44]	; (8000e50 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e22:	490c      	ldr	r1, [pc, #48]	; (8000e54 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e24:	4a0c      	ldr	r2, [pc, #48]	; (8000e58 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a09      	ldr	r2, [pc, #36]	; (8000e5c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e38:	4c09      	ldr	r4, [pc, #36]	; (8000e60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e46:	f002 f839 	bl	8002ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e4a:	f7ff fb5b 	bl	8000504 <main>
  bx lr
 8000e4e:	4770      	bx	lr
  ldr r0, =_sdata
 8000e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e54:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e58:	08003204 	.word	0x08003204
  ldr r2, =_sbss
 8000e5c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e60:	200002f0 	.word	0x200002f0

08000e64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e64:	e7fe      	b.n	8000e64 <ADC1_2_IRQHandler>
	...

08000e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <HAL_Init+0x28>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <HAL_Init+0x28>)
 8000e72:	f043 0310 	orr.w	r3, r3, #16
 8000e76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f000 f907 	bl	800108c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7e:	200f      	movs	r0, #15
 8000e80:	f000 f808 	bl	8000e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e84:	f7ff fb96 	bl	80005b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40022000 	.word	0x40022000

08000e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_InitTick+0x54>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_InitTick+0x58>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f911 	bl	80010da <HAL_SYSTICK_Config>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00e      	b.n	8000ee0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b0f      	cmp	r3, #15
 8000ec6:	d80a      	bhi.n	8000ede <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f000 f8e7 	bl	80010a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed4:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <HAL_InitTick+0x5c>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e000      	b.n	8000ee0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	20000004 	.word	0x20000004

08000ef4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <HAL_IncTick+0x1c>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <HAL_IncTick+0x20>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	4a03      	ldr	r2, [pc, #12]	; (8000f14 <HAL_IncTick+0x20>)
 8000f06:	6013      	str	r3, [r2, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	20000008 	.word	0x20000008
 8000f14:	200002d8 	.word	0x200002d8

08000f18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f1c:	4b02      	ldr	r3, [pc, #8]	; (8000f28 <HAL_GetTick+0x10>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr
 8000f28:	200002d8 	.word	0x200002d8

08000f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5e:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	60d3      	str	r3, [r2, #12]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <__NVIC_GetPriorityGrouping+0x18>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	0a1b      	lsrs	r3, r3, #8
 8000f7e:	f003 0307 	and.w	r3, r3, #7
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db0a      	blt.n	8000fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	490c      	ldr	r1, [pc, #48]	; (8000fdc <__NVIC_SetPriority+0x4c>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	0112      	lsls	r2, r2, #4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb8:	e00a      	b.n	8000fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4908      	ldr	r1, [pc, #32]	; (8000fe0 <__NVIC_SetPriority+0x50>)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	3b04      	subs	r3, #4
 8000fc8:	0112      	lsls	r2, r2, #4
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	440b      	add	r3, r1
 8000fce:	761a      	strb	r2, [r3, #24]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000e100 	.word	0xe000e100
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f1c3 0307 	rsb	r3, r3, #7
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	bf28      	it	cs
 8001002:	2304      	movcs	r3, #4
 8001004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3304      	adds	r3, #4
 800100a:	2b06      	cmp	r3, #6
 800100c:	d902      	bls.n	8001014 <NVIC_EncodePriority+0x30>
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3b03      	subs	r3, #3
 8001012:	e000      	b.n	8001016 <NVIC_EncodePriority+0x32>
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	f04f 32ff 	mov.w	r2, #4294967295
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	401a      	ands	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800102c:	f04f 31ff 	mov.w	r1, #4294967295
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43d9      	mvns	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	4313      	orrs	r3, r2
         );
}
 800103e:	4618      	mov	r0, r3
 8001040:	3724      	adds	r7, #36	; 0x24
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr

08001048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001058:	d301      	bcc.n	800105e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105a:	2301      	movs	r3, #1
 800105c:	e00f      	b.n	800107e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105e:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <SysTick_Config+0x40>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001066:	210f      	movs	r1, #15
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	f7ff ff90 	bl	8000f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <SysTick_Config+0x40>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001076:	4b04      	ldr	r3, [pc, #16]	; (8001088 <SysTick_Config+0x40>)
 8001078:	2207      	movs	r2, #7
 800107a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	e000e010 	.word	0xe000e010

0800108c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff49 	bl	8000f2c <__NVIC_SetPriorityGrouping>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4603      	mov	r3, r0
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b4:	f7ff ff5e 	bl	8000f74 <__NVIC_GetPriorityGrouping>
 80010b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	68b9      	ldr	r1, [r7, #8]
 80010be:	6978      	ldr	r0, [r7, #20]
 80010c0:	f7ff ff90 	bl	8000fe4 <NVIC_EncodePriority>
 80010c4:	4602      	mov	r2, r0
 80010c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff5f 	bl	8000f90 <__NVIC_SetPriority>
}
 80010d2:	bf00      	nop
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ffb0 	bl	8001048 <SysTick_Config>
 80010e8:	4603      	mov	r3, r0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b08b      	sub	sp, #44	; 0x2c
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001106:	e169      	b.n	80013dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001108:	2201      	movs	r2, #1
 800110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	69fa      	ldr	r2, [r7, #28]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	429a      	cmp	r2, r3
 8001122:	f040 8158 	bne.w	80013d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	4a9a      	ldr	r2, [pc, #616]	; (8001394 <HAL_GPIO_Init+0x2a0>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d05e      	beq.n	80011ee <HAL_GPIO_Init+0xfa>
 8001130:	4a98      	ldr	r2, [pc, #608]	; (8001394 <HAL_GPIO_Init+0x2a0>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d875      	bhi.n	8001222 <HAL_GPIO_Init+0x12e>
 8001136:	4a98      	ldr	r2, [pc, #608]	; (8001398 <HAL_GPIO_Init+0x2a4>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d058      	beq.n	80011ee <HAL_GPIO_Init+0xfa>
 800113c:	4a96      	ldr	r2, [pc, #600]	; (8001398 <HAL_GPIO_Init+0x2a4>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d86f      	bhi.n	8001222 <HAL_GPIO_Init+0x12e>
 8001142:	4a96      	ldr	r2, [pc, #600]	; (800139c <HAL_GPIO_Init+0x2a8>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d052      	beq.n	80011ee <HAL_GPIO_Init+0xfa>
 8001148:	4a94      	ldr	r2, [pc, #592]	; (800139c <HAL_GPIO_Init+0x2a8>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d869      	bhi.n	8001222 <HAL_GPIO_Init+0x12e>
 800114e:	4a94      	ldr	r2, [pc, #592]	; (80013a0 <HAL_GPIO_Init+0x2ac>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d04c      	beq.n	80011ee <HAL_GPIO_Init+0xfa>
 8001154:	4a92      	ldr	r2, [pc, #584]	; (80013a0 <HAL_GPIO_Init+0x2ac>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d863      	bhi.n	8001222 <HAL_GPIO_Init+0x12e>
 800115a:	4a92      	ldr	r2, [pc, #584]	; (80013a4 <HAL_GPIO_Init+0x2b0>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d046      	beq.n	80011ee <HAL_GPIO_Init+0xfa>
 8001160:	4a90      	ldr	r2, [pc, #576]	; (80013a4 <HAL_GPIO_Init+0x2b0>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d85d      	bhi.n	8001222 <HAL_GPIO_Init+0x12e>
 8001166:	2b12      	cmp	r3, #18
 8001168:	d82a      	bhi.n	80011c0 <HAL_GPIO_Init+0xcc>
 800116a:	2b12      	cmp	r3, #18
 800116c:	d859      	bhi.n	8001222 <HAL_GPIO_Init+0x12e>
 800116e:	a201      	add	r2, pc, #4	; (adr r2, 8001174 <HAL_GPIO_Init+0x80>)
 8001170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001174:	080011ef 	.word	0x080011ef
 8001178:	080011c9 	.word	0x080011c9
 800117c:	080011db 	.word	0x080011db
 8001180:	0800121d 	.word	0x0800121d
 8001184:	08001223 	.word	0x08001223
 8001188:	08001223 	.word	0x08001223
 800118c:	08001223 	.word	0x08001223
 8001190:	08001223 	.word	0x08001223
 8001194:	08001223 	.word	0x08001223
 8001198:	08001223 	.word	0x08001223
 800119c:	08001223 	.word	0x08001223
 80011a0:	08001223 	.word	0x08001223
 80011a4:	08001223 	.word	0x08001223
 80011a8:	08001223 	.word	0x08001223
 80011ac:	08001223 	.word	0x08001223
 80011b0:	08001223 	.word	0x08001223
 80011b4:	08001223 	.word	0x08001223
 80011b8:	080011d1 	.word	0x080011d1
 80011bc:	080011e5 	.word	0x080011e5
 80011c0:	4a79      	ldr	r2, [pc, #484]	; (80013a8 <HAL_GPIO_Init+0x2b4>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d013      	beq.n	80011ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011c6:	e02c      	b.n	8001222 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	623b      	str	r3, [r7, #32]
          break;
 80011ce:	e029      	b.n	8001224 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	3304      	adds	r3, #4
 80011d6:	623b      	str	r3, [r7, #32]
          break;
 80011d8:	e024      	b.n	8001224 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	3308      	adds	r3, #8
 80011e0:	623b      	str	r3, [r7, #32]
          break;
 80011e2:	e01f      	b.n	8001224 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	330c      	adds	r3, #12
 80011ea:	623b      	str	r3, [r7, #32]
          break;
 80011ec:	e01a      	b.n	8001224 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d102      	bne.n	80011fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011f6:	2304      	movs	r3, #4
 80011f8:	623b      	str	r3, [r7, #32]
          break;
 80011fa:	e013      	b.n	8001224 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d105      	bne.n	8001210 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001204:	2308      	movs	r3, #8
 8001206:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69fa      	ldr	r2, [r7, #28]
 800120c:	611a      	str	r2, [r3, #16]
          break;
 800120e:	e009      	b.n	8001224 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001210:	2308      	movs	r3, #8
 8001212:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69fa      	ldr	r2, [r7, #28]
 8001218:	615a      	str	r2, [r3, #20]
          break;
 800121a:	e003      	b.n	8001224 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
          break;
 8001220:	e000      	b.n	8001224 <HAL_GPIO_Init+0x130>
          break;
 8001222:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	2bff      	cmp	r3, #255	; 0xff
 8001228:	d801      	bhi.n	800122e <HAL_GPIO_Init+0x13a>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	e001      	b.n	8001232 <HAL_GPIO_Init+0x13e>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3304      	adds	r3, #4
 8001232:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	2bff      	cmp	r3, #255	; 0xff
 8001238:	d802      	bhi.n	8001240 <HAL_GPIO_Init+0x14c>
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	e002      	b.n	8001246 <HAL_GPIO_Init+0x152>
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	3b08      	subs	r3, #8
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	210f      	movs	r1, #15
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	fa01 f303 	lsl.w	r3, r1, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	401a      	ands	r2, r3
 8001258:	6a39      	ldr	r1, [r7, #32]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	fa01 f303 	lsl.w	r3, r1, r3
 8001260:	431a      	orrs	r2, r3
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 80b1 	beq.w	80013d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001274:	4b4d      	ldr	r3, [pc, #308]	; (80013ac <HAL_GPIO_Init+0x2b8>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	4a4c      	ldr	r2, [pc, #304]	; (80013ac <HAL_GPIO_Init+0x2b8>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	6193      	str	r3, [r2, #24]
 8001280:	4b4a      	ldr	r3, [pc, #296]	; (80013ac <HAL_GPIO_Init+0x2b8>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800128c:	4a48      	ldr	r2, [pc, #288]	; (80013b0 <HAL_GPIO_Init+0x2bc>)
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	3302      	adds	r3, #2
 8001294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001298:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	220f      	movs	r2, #15
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	4013      	ands	r3, r2
 80012ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a40      	ldr	r2, [pc, #256]	; (80013b4 <HAL_GPIO_Init+0x2c0>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d013      	beq.n	80012e0 <HAL_GPIO_Init+0x1ec>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a3f      	ldr	r2, [pc, #252]	; (80013b8 <HAL_GPIO_Init+0x2c4>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d00d      	beq.n	80012dc <HAL_GPIO_Init+0x1e8>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a3e      	ldr	r2, [pc, #248]	; (80013bc <HAL_GPIO_Init+0x2c8>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d007      	beq.n	80012d8 <HAL_GPIO_Init+0x1e4>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a3d      	ldr	r2, [pc, #244]	; (80013c0 <HAL_GPIO_Init+0x2cc>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d101      	bne.n	80012d4 <HAL_GPIO_Init+0x1e0>
 80012d0:	2303      	movs	r3, #3
 80012d2:	e006      	b.n	80012e2 <HAL_GPIO_Init+0x1ee>
 80012d4:	2304      	movs	r3, #4
 80012d6:	e004      	b.n	80012e2 <HAL_GPIO_Init+0x1ee>
 80012d8:	2302      	movs	r3, #2
 80012da:	e002      	b.n	80012e2 <HAL_GPIO_Init+0x1ee>
 80012dc:	2301      	movs	r3, #1
 80012de:	e000      	b.n	80012e2 <HAL_GPIO_Init+0x1ee>
 80012e0:	2300      	movs	r3, #0
 80012e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012e4:	f002 0203 	and.w	r2, r2, #3
 80012e8:	0092      	lsls	r2, r2, #2
 80012ea:	4093      	lsls	r3, r2
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012f2:	492f      	ldr	r1, [pc, #188]	; (80013b0 <HAL_GPIO_Init+0x2bc>)
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	089b      	lsrs	r3, r3, #2
 80012f8:	3302      	adds	r3, #2
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d006      	beq.n	800131a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800130c:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	492c      	ldr	r1, [pc, #176]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	608b      	str	r3, [r1, #8]
 8001318:	e006      	b.n	8001328 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800131a:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	43db      	mvns	r3, r3
 8001322:	4928      	ldr	r1, [pc, #160]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 8001324:	4013      	ands	r3, r2
 8001326:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d006      	beq.n	8001342 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001334:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 8001336:	68da      	ldr	r2, [r3, #12]
 8001338:	4922      	ldr	r1, [pc, #136]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	4313      	orrs	r3, r2
 800133e:	60cb      	str	r3, [r1, #12]
 8001340:	e006      	b.n	8001350 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	43db      	mvns	r3, r3
 800134a:	491e      	ldr	r1, [pc, #120]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 800134c:	4013      	ands	r3, r2
 800134e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d006      	beq.n	800136a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800135c:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	4918      	ldr	r1, [pc, #96]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	604b      	str	r3, [r1, #4]
 8001368:	e006      	b.n	8001378 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800136a:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	43db      	mvns	r3, r3
 8001372:	4914      	ldr	r1, [pc, #80]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 8001374:	4013      	ands	r3, r2
 8001376:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d021      	beq.n	80013c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	490e      	ldr	r1, [pc, #56]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	4313      	orrs	r3, r2
 800138e:	600b      	str	r3, [r1, #0]
 8001390:	e021      	b.n	80013d6 <HAL_GPIO_Init+0x2e2>
 8001392:	bf00      	nop
 8001394:	10320000 	.word	0x10320000
 8001398:	10310000 	.word	0x10310000
 800139c:	10220000 	.word	0x10220000
 80013a0:	10210000 	.word	0x10210000
 80013a4:	10120000 	.word	0x10120000
 80013a8:	10110000 	.word	0x10110000
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40010000 	.word	0x40010000
 80013b4:	40010800 	.word	0x40010800
 80013b8:	40010c00 	.word	0x40010c00
 80013bc:	40011000 	.word	0x40011000
 80013c0:	40011400 	.word	0x40011400
 80013c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_GPIO_Init+0x304>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	4909      	ldr	r1, [pc, #36]	; (80013f8 <HAL_GPIO_Init+0x304>)
 80013d2:	4013      	ands	r3, r2
 80013d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	3301      	adds	r3, #1
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	fa22 f303 	lsr.w	r3, r2, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f47f ae8e 	bne.w	8001108 <HAL_GPIO_Init+0x14>
  }
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	372c      	adds	r7, #44	; 0x2c
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	40010400 	.word	0x40010400

080013fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	807b      	strh	r3, [r7, #2]
 8001408:	4613      	mov	r3, r2
 800140a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800140c:	787b      	ldrb	r3, [r7, #1]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001412:	887a      	ldrh	r2, [r7, #2]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001418:	e003      	b.n	8001422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800141a:	887b      	ldrh	r3, [r7, #2]
 800141c:	041a      	lsls	r2, r3, #16
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	611a      	str	r2, [r3, #16]
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e12b      	b.n	8001696 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d106      	bne.n	8001458 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7fe ffda 	bl	800040c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2224      	movs	r2, #36	; 0x24
 800145c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 0201 	bic.w	r2, r2, #1
 800146e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800147e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800148e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001490:	f000 fcda 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 8001494:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	4a81      	ldr	r2, [pc, #516]	; (80016a0 <HAL_I2C_Init+0x274>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d807      	bhi.n	80014b0 <HAL_I2C_Init+0x84>
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4a80      	ldr	r2, [pc, #512]	; (80016a4 <HAL_I2C_Init+0x278>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	bf94      	ite	ls
 80014a8:	2301      	movls	r3, #1
 80014aa:	2300      	movhi	r3, #0
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	e006      	b.n	80014be <HAL_I2C_Init+0x92>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a7d      	ldr	r2, [pc, #500]	; (80016a8 <HAL_I2C_Init+0x27c>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	bf94      	ite	ls
 80014b8:	2301      	movls	r3, #1
 80014ba:	2300      	movhi	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e0e7      	b.n	8001696 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	4a78      	ldr	r2, [pc, #480]	; (80016ac <HAL_I2C_Init+0x280>)
 80014ca:	fba2 2303 	umull	r2, r3, r2, r3
 80014ce:	0c9b      	lsrs	r3, r3, #18
 80014d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68ba      	ldr	r2, [r7, #8]
 80014e2:	430a      	orrs	r2, r1
 80014e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	4a6a      	ldr	r2, [pc, #424]	; (80016a0 <HAL_I2C_Init+0x274>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d802      	bhi.n	8001500 <HAL_I2C_Init+0xd4>
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	3301      	adds	r3, #1
 80014fe:	e009      	b.n	8001514 <HAL_I2C_Init+0xe8>
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001506:	fb02 f303 	mul.w	r3, r2, r3
 800150a:	4a69      	ldr	r2, [pc, #420]	; (80016b0 <HAL_I2C_Init+0x284>)
 800150c:	fba2 2303 	umull	r2, r3, r2, r3
 8001510:	099b      	lsrs	r3, r3, #6
 8001512:	3301      	adds	r3, #1
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	6812      	ldr	r2, [r2, #0]
 8001518:	430b      	orrs	r3, r1
 800151a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001526:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	495c      	ldr	r1, [pc, #368]	; (80016a0 <HAL_I2C_Init+0x274>)
 8001530:	428b      	cmp	r3, r1
 8001532:	d819      	bhi.n	8001568 <HAL_I2C_Init+0x13c>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	1e59      	subs	r1, r3, #1
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001542:	1c59      	adds	r1, r3, #1
 8001544:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001548:	400b      	ands	r3, r1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00a      	beq.n	8001564 <HAL_I2C_Init+0x138>
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	1e59      	subs	r1, r3, #1
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	fbb1 f3f3 	udiv	r3, r1, r3
 800155c:	3301      	adds	r3, #1
 800155e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001562:	e051      	b.n	8001608 <HAL_I2C_Init+0x1dc>
 8001564:	2304      	movs	r3, #4
 8001566:	e04f      	b.n	8001608 <HAL_I2C_Init+0x1dc>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d111      	bne.n	8001594 <HAL_I2C_Init+0x168>
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	1e58      	subs	r0, r3, #1
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6859      	ldr	r1, [r3, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	440b      	add	r3, r1
 800157e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001582:	3301      	adds	r3, #1
 8001584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001588:	2b00      	cmp	r3, #0
 800158a:	bf0c      	ite	eq
 800158c:	2301      	moveq	r3, #1
 800158e:	2300      	movne	r3, #0
 8001590:	b2db      	uxtb	r3, r3
 8001592:	e012      	b.n	80015ba <HAL_I2C_Init+0x18e>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	1e58      	subs	r0, r3, #1
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6859      	ldr	r1, [r3, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	0099      	lsls	r1, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015aa:	3301      	adds	r3, #1
 80015ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	bf0c      	ite	eq
 80015b4:	2301      	moveq	r3, #1
 80015b6:	2300      	movne	r3, #0
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_I2C_Init+0x196>
 80015be:	2301      	movs	r3, #1
 80015c0:	e022      	b.n	8001608 <HAL_I2C_Init+0x1dc>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10e      	bne.n	80015e8 <HAL_I2C_Init+0x1bc>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	1e58      	subs	r0, r3, #1
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6859      	ldr	r1, [r3, #4]
 80015d2:	460b      	mov	r3, r1
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	440b      	add	r3, r1
 80015d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80015dc:	3301      	adds	r3, #1
 80015de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015e6:	e00f      	b.n	8001608 <HAL_I2C_Init+0x1dc>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	1e58      	subs	r0, r3, #1
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6859      	ldr	r1, [r3, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	0099      	lsls	r1, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80015fe:	3301      	adds	r3, #1
 8001600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001604:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	6809      	ldr	r1, [r1, #0]
 800160c:	4313      	orrs	r3, r2
 800160e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69da      	ldr	r2, [r3, #28]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	430a      	orrs	r2, r1
 800162a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001636:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6911      	ldr	r1, [r2, #16]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	68d2      	ldr	r2, [r2, #12]
 8001642:	4311      	orrs	r1, r2
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6812      	ldr	r2, [r2, #0]
 8001648:	430b      	orrs	r3, r1
 800164a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	695a      	ldr	r2, [r3, #20]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f042 0201 	orr.w	r2, r2, #1
 8001676:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2220      	movs	r2, #32
 8001682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	000186a0 	.word	0x000186a0
 80016a4:	001e847f 	.word	0x001e847f
 80016a8:	003d08ff 	.word	0x003d08ff
 80016ac:	431bde83 	.word	0x431bde83
 80016b0:	10624dd3 	.word	0x10624dd3

080016b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e272      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 8087 	beq.w	80017e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016d4:	4b92      	ldr	r3, [pc, #584]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 030c 	and.w	r3, r3, #12
 80016dc:	2b04      	cmp	r3, #4
 80016de:	d00c      	beq.n	80016fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016e0:	4b8f      	ldr	r3, [pc, #572]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 030c 	and.w	r3, r3, #12
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	d112      	bne.n	8001712 <HAL_RCC_OscConfig+0x5e>
 80016ec:	4b8c      	ldr	r3, [pc, #560]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f8:	d10b      	bne.n	8001712 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fa:	4b89      	ldr	r3, [pc, #548]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d06c      	beq.n	80017e0 <HAL_RCC_OscConfig+0x12c>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d168      	bne.n	80017e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e24c      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171a:	d106      	bne.n	800172a <HAL_RCC_OscConfig+0x76>
 800171c:	4b80      	ldr	r3, [pc, #512]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a7f      	ldr	r2, [pc, #508]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	e02e      	b.n	8001788 <HAL_RCC_OscConfig+0xd4>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10c      	bne.n	800174c <HAL_RCC_OscConfig+0x98>
 8001732:	4b7b      	ldr	r3, [pc, #492]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a7a      	ldr	r2, [pc, #488]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	4b78      	ldr	r3, [pc, #480]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a77      	ldr	r2, [pc, #476]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001744:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e01d      	b.n	8001788 <HAL_RCC_OscConfig+0xd4>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001754:	d10c      	bne.n	8001770 <HAL_RCC_OscConfig+0xbc>
 8001756:	4b72      	ldr	r3, [pc, #456]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a71      	ldr	r2, [pc, #452]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 800175c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	4b6f      	ldr	r3, [pc, #444]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a6e      	ldr	r2, [pc, #440]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	e00b      	b.n	8001788 <HAL_RCC_OscConfig+0xd4>
 8001770:	4b6b      	ldr	r3, [pc, #428]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a6a      	ldr	r2, [pc, #424]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	4b68      	ldr	r3, [pc, #416]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a67      	ldr	r2, [pc, #412]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001786:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d013      	beq.n	80017b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001790:	f7ff fbc2 	bl	8000f18 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001798:	f7ff fbbe 	bl	8000f18 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b64      	cmp	r3, #100	; 0x64
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e200      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017aa:	4b5d      	ldr	r3, [pc, #372]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0xe4>
 80017b6:	e014      	b.n	80017e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b8:	f7ff fbae 	bl	8000f18 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c0:	f7ff fbaa 	bl	8000f18 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b64      	cmp	r3, #100	; 0x64
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e1ec      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017d2:	4b53      	ldr	r3, [pc, #332]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f0      	bne.n	80017c0 <HAL_RCC_OscConfig+0x10c>
 80017de:	e000      	b.n	80017e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d063      	beq.n	80018b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ee:	4b4c      	ldr	r3, [pc, #304]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00b      	beq.n	8001812 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017fa:	4b49      	ldr	r3, [pc, #292]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 030c 	and.w	r3, r3, #12
 8001802:	2b08      	cmp	r3, #8
 8001804:	d11c      	bne.n	8001840 <HAL_RCC_OscConfig+0x18c>
 8001806:	4b46      	ldr	r3, [pc, #280]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d116      	bne.n	8001840 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001812:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d005      	beq.n	800182a <HAL_RCC_OscConfig+0x176>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d001      	beq.n	800182a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e1c0      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182a:	4b3d      	ldr	r3, [pc, #244]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	4939      	ldr	r1, [pc, #228]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183e:	e03a      	b.n	80018b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d020      	beq.n	800188a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001848:	4b36      	ldr	r3, [pc, #216]	; (8001924 <HAL_RCC_OscConfig+0x270>)
 800184a:	2201      	movs	r2, #1
 800184c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184e:	f7ff fb63 	bl	8000f18 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001856:	f7ff fb5f 	bl	8000f18 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e1a1      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001868:	4b2d      	ldr	r3, [pc, #180]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0f0      	beq.n	8001856 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001874:	4b2a      	ldr	r3, [pc, #168]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	695b      	ldr	r3, [r3, #20]
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	4927      	ldr	r1, [pc, #156]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001884:	4313      	orrs	r3, r2
 8001886:	600b      	str	r3, [r1, #0]
 8001888:	e015      	b.n	80018b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800188a:	4b26      	ldr	r3, [pc, #152]	; (8001924 <HAL_RCC_OscConfig+0x270>)
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001890:	f7ff fb42 	bl	8000f18 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001898:	f7ff fb3e 	bl	8000f18 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e180      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018aa:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d03a      	beq.n	8001938 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d019      	beq.n	80018fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ca:	4b17      	ldr	r3, [pc, #92]	; (8001928 <HAL_RCC_OscConfig+0x274>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d0:	f7ff fb22 	bl	8000f18 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d8:	f7ff fb1e 	bl	8000f18 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e160      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ea:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018f6:	2001      	movs	r0, #1
 80018f8:	f000 face 	bl	8001e98 <RCC_Delay>
 80018fc:	e01c      	b.n	8001938 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018fe:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <HAL_RCC_OscConfig+0x274>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001904:	f7ff fb08 	bl	8000f18 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800190a:	e00f      	b.n	800192c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800190c:	f7ff fb04 	bl	8000f18 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d908      	bls.n	800192c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e146      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
 800191e:	bf00      	nop
 8001920:	40021000 	.word	0x40021000
 8001924:	42420000 	.word	0x42420000
 8001928:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800192c:	4b92      	ldr	r3, [pc, #584]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1e9      	bne.n	800190c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 80a6 	beq.w	8001a92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001946:	2300      	movs	r3, #0
 8001948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800194a:	4b8b      	ldr	r3, [pc, #556]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10d      	bne.n	8001972 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	4b88      	ldr	r3, [pc, #544]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	4a87      	ldr	r2, [pc, #540]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 800195c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001960:	61d3      	str	r3, [r2, #28]
 8001962:	4b85      	ldr	r3, [pc, #532]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800196e:	2301      	movs	r3, #1
 8001970:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001972:	4b82      	ldr	r3, [pc, #520]	; (8001b7c <HAL_RCC_OscConfig+0x4c8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197a:	2b00      	cmp	r3, #0
 800197c:	d118      	bne.n	80019b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800197e:	4b7f      	ldr	r3, [pc, #508]	; (8001b7c <HAL_RCC_OscConfig+0x4c8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a7e      	ldr	r2, [pc, #504]	; (8001b7c <HAL_RCC_OscConfig+0x4c8>)
 8001984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800198a:	f7ff fac5 	bl	8000f18 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001992:	f7ff fac1 	bl	8000f18 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b64      	cmp	r3, #100	; 0x64
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e103      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a4:	4b75      	ldr	r3, [pc, #468]	; (8001b7c <HAL_RCC_OscConfig+0x4c8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d106      	bne.n	80019c6 <HAL_RCC_OscConfig+0x312>
 80019b8:	4b6f      	ldr	r3, [pc, #444]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	4a6e      	ldr	r2, [pc, #440]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6213      	str	r3, [r2, #32]
 80019c4:	e02d      	b.n	8001a22 <HAL_RCC_OscConfig+0x36e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10c      	bne.n	80019e8 <HAL_RCC_OscConfig+0x334>
 80019ce:	4b6a      	ldr	r3, [pc, #424]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	4a69      	ldr	r2, [pc, #420]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019d4:	f023 0301 	bic.w	r3, r3, #1
 80019d8:	6213      	str	r3, [r2, #32]
 80019da:	4b67      	ldr	r3, [pc, #412]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	4a66      	ldr	r2, [pc, #408]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019e0:	f023 0304 	bic.w	r3, r3, #4
 80019e4:	6213      	str	r3, [r2, #32]
 80019e6:	e01c      	b.n	8001a22 <HAL_RCC_OscConfig+0x36e>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	2b05      	cmp	r3, #5
 80019ee:	d10c      	bne.n	8001a0a <HAL_RCC_OscConfig+0x356>
 80019f0:	4b61      	ldr	r3, [pc, #388]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	4a60      	ldr	r2, [pc, #384]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019f6:	f043 0304 	orr.w	r3, r3, #4
 80019fa:	6213      	str	r3, [r2, #32]
 80019fc:	4b5e      	ldr	r3, [pc, #376]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	4a5d      	ldr	r2, [pc, #372]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6213      	str	r3, [r2, #32]
 8001a08:	e00b      	b.n	8001a22 <HAL_RCC_OscConfig+0x36e>
 8001a0a:	4b5b      	ldr	r3, [pc, #364]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	4a5a      	ldr	r2, [pc, #360]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a10:	f023 0301 	bic.w	r3, r3, #1
 8001a14:	6213      	str	r3, [r2, #32]
 8001a16:	4b58      	ldr	r3, [pc, #352]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	4a57      	ldr	r2, [pc, #348]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	f023 0304 	bic.w	r3, r3, #4
 8001a20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d015      	beq.n	8001a56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2a:	f7ff fa75 	bl	8000f18 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a30:	e00a      	b.n	8001a48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a32:	f7ff fa71 	bl	8000f18 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e0b1      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a48:	4b4b      	ldr	r3, [pc, #300]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0ee      	beq.n	8001a32 <HAL_RCC_OscConfig+0x37e>
 8001a54:	e014      	b.n	8001a80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a56:	f7ff fa5f 	bl	8000f18 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a5c:	e00a      	b.n	8001a74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5e:	f7ff fa5b 	bl	8000f18 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e09b      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a74:	4b40      	ldr	r3, [pc, #256]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1ee      	bne.n	8001a5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a80:	7dfb      	ldrb	r3, [r7, #23]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d105      	bne.n	8001a92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a86:	4b3c      	ldr	r3, [pc, #240]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	4a3b      	ldr	r2, [pc, #236]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 8087 	beq.w	8001baa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a9c:	4b36      	ldr	r3, [pc, #216]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d061      	beq.n	8001b6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d146      	bne.n	8001b3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab0:	4b33      	ldr	r3, [pc, #204]	; (8001b80 <HAL_RCC_OscConfig+0x4cc>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab6:	f7ff fa2f 	bl	8000f18 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001abe:	f7ff fa2b 	bl	8000f18 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e06d      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad0:	4b29      	ldr	r3, [pc, #164]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f0      	bne.n	8001abe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae4:	d108      	bne.n	8001af8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ae6:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	4921      	ldr	r1, [pc, #132]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af8:	4b1f      	ldr	r3, [pc, #124]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a19      	ldr	r1, [r3, #32]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	491b      	ldr	r1, [pc, #108]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b10:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <HAL_RCC_OscConfig+0x4cc>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b16:	f7ff f9ff 	bl	8000f18 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1e:	f7ff f9fb 	bl	8000f18 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e03d      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x46a>
 8001b3c:	e035      	b.n	8001baa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <HAL_RCC_OscConfig+0x4cc>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7ff f9e8 	bl	8000f18 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b4c:	f7ff f9e4 	bl	8000f18 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e026      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x498>
 8001b6a:	e01e      	b.n	8001baa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d107      	bne.n	8001b84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e019      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40007000 	.word	0x40007000
 8001b80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_RCC_OscConfig+0x500>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d106      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d001      	beq.n	8001baa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0d0      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b6a      	ldr	r3, [pc, #424]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d910      	bls.n	8001bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b67      	ldr	r3, [pc, #412]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 0207 	bic.w	r2, r3, #7
 8001be2:	4965      	ldr	r1, [pc, #404]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b63      	ldr	r3, [pc, #396]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0b8      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d020      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c14:	4b59      	ldr	r3, [pc, #356]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	4a58      	ldr	r2, [pc, #352]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c2c:	4b53      	ldr	r3, [pc, #332]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	4a52      	ldr	r2, [pc, #328]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c38:	4b50      	ldr	r3, [pc, #320]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	494d      	ldr	r1, [pc, #308]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d040      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d107      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5e:	4b47      	ldr	r3, [pc, #284]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d115      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e07f      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d107      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c76:	4b41      	ldr	r3, [pc, #260]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d109      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e073      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c86:	4b3d      	ldr	r3, [pc, #244]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e06b      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c96:	4b39      	ldr	r3, [pc, #228]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f023 0203 	bic.w	r2, r3, #3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	4936      	ldr	r1, [pc, #216]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca8:	f7ff f936 	bl	8000f18 <HAL_GetTick>
 8001cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cae:	e00a      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb0:	f7ff f932 	bl	8000f18 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e053      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc6:	4b2d      	ldr	r3, [pc, #180]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 020c 	and.w	r2, r3, #12
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d1eb      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd8:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d210      	bcs.n	8001d08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce6:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 0207 	bic.w	r2, r3, #7
 8001cee:	4922      	ldr	r1, [pc, #136]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e032      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d008      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	4916      	ldr	r1, [pc, #88]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d009      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d32:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	490e      	ldr	r1, [pc, #56]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d46:	f000 f821 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	490a      	ldr	r1, [pc, #40]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001d58:	5ccb      	ldrb	r3, [r1, r3]
 8001d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5e:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <HAL_RCC_ClockConfig+0x1cc>)
 8001d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <HAL_RCC_ClockConfig+0x1d0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f894 	bl	8000e94 <HAL_InitTick>

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40022000 	.word	0x40022000
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	080031c8 	.word	0x080031c8
 8001d84:	20000000 	.word	0x20000000
 8001d88:	20000004 	.word	0x20000004

08001d8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	2300      	movs	r3, #0
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001da6:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x94>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d002      	beq.n	8001dbc <HAL_RCC_GetSysClockFreq+0x30>
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d003      	beq.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x36>
 8001dba:	e027      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dbc:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dbe:	613b      	str	r3, [r7, #16]
      break;
 8001dc0:	e027      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	0c9b      	lsrs	r3, r3, #18
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	4a17      	ldr	r2, [pc, #92]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dcc:	5cd3      	ldrb	r3, [r2, r3]
 8001dce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d010      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dda:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	0c5b      	lsrs	r3, r3, #17
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	4a11      	ldr	r2, [pc, #68]	; (8001e2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001de6:	5cd3      	ldrb	r3, [r2, r3]
 8001de8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a0d      	ldr	r2, [pc, #52]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dee:	fb03 f202 	mul.w	r2, r3, r2
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	e004      	b.n	8001e06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a0c      	ldr	r2, [pc, #48]	; (8001e30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e00:	fb02 f303 	mul.w	r3, r2, r3
 8001e04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	613b      	str	r3, [r7, #16]
      break;
 8001e0a:	e002      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e0e:	613b      	str	r3, [r7, #16]
      break;
 8001e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e12:	693b      	ldr	r3, [r7, #16]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	371c      	adds	r7, #28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000
 8001e24:	007a1200 	.word	0x007a1200
 8001e28:	080031e0 	.word	0x080031e0
 8001e2c:	080031f0 	.word	0x080031f0
 8001e30:	003d0900 	.word	0x003d0900

08001e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e38:	4b02      	ldr	r3, [pc, #8]	; (8001e44 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr
 8001e44:	20000000 	.word	0x20000000

08001e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e4c:	f7ff fff2 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e50:	4602      	mov	r2, r0
 8001e52:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	0a1b      	lsrs	r3, r3, #8
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	4903      	ldr	r1, [pc, #12]	; (8001e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e5e:	5ccb      	ldrb	r3, [r1, r3]
 8001e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	080031d8 	.word	0x080031d8

08001e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e74:	f7ff ffde 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	0adb      	lsrs	r3, r3, #11
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	4903      	ldr	r1, [pc, #12]	; (8001e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e86:	5ccb      	ldrb	r3, [r1, r3]
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40021000 	.word	0x40021000
 8001e94:	080031d8 	.word	0x080031d8

08001e98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ea0:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <RCC_Delay+0x34>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <RCC_Delay+0x38>)
 8001ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eaa:	0a5b      	lsrs	r3, r3, #9
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	fb02 f303 	mul.w	r3, r2, r3
 8001eb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001eb4:	bf00      	nop
  }
  while (Delay --);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1e5a      	subs	r2, r3, #1
 8001eba:	60fa      	str	r2, [r7, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f9      	bne.n	8001eb4 <RCC_Delay+0x1c>
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	10624dd3 	.word	0x10624dd3

08001ed4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e041      	b.n	8001f6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d106      	bne.n	8001f00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7fe fe60 	bl	8000bc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2202      	movs	r2, #2
 8001f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3304      	adds	r3, #4
 8001f10:	4619      	mov	r1, r3
 8001f12:	4610      	mov	r0, r2
 8001f14:	f000 fb06 	bl	8002524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e041      	b.n	8002008 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d106      	bne.n	8001f9e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f839 	bl	8002010 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3304      	adds	r3, #4
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	f000 fab7 	bl	8002524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr

08002022 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e041      	b.n	80020b8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b00      	cmp	r3, #0
 800203e:	d106      	bne.n	800204e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f839 	bl	80020c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2202      	movs	r2, #2
 8002052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3304      	adds	r3, #4
 800205e:	4619      	mov	r1, r3
 8002060:	4610      	mov	r0, r2
 8002062:	f000 fa5f 	bl	8002524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr
	...

080020d4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d101      	bne.n	80020f2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80020ee:	2302      	movs	r3, #2
 80020f0:	e048      	b.n	8002184 <HAL_TIM_OC_ConfigChannel+0xb0>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b0c      	cmp	r3, #12
 80020fe:	d839      	bhi.n	8002174 <HAL_TIM_OC_ConfigChannel+0xa0>
 8002100:	a201      	add	r2, pc, #4	; (adr r2, 8002108 <HAL_TIM_OC_ConfigChannel+0x34>)
 8002102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002106:	bf00      	nop
 8002108:	0800213d 	.word	0x0800213d
 800210c:	08002175 	.word	0x08002175
 8002110:	08002175 	.word	0x08002175
 8002114:	08002175 	.word	0x08002175
 8002118:	0800214b 	.word	0x0800214b
 800211c:	08002175 	.word	0x08002175
 8002120:	08002175 	.word	0x08002175
 8002124:	08002175 	.word	0x08002175
 8002128:	08002159 	.word	0x08002159
 800212c:	08002175 	.word	0x08002175
 8002130:	08002175 	.word	0x08002175
 8002134:	08002175 	.word	0x08002175
 8002138:	08002167 	.word	0x08002167
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	4618      	mov	r0, r3
 8002144:	f000 fa50 	bl	80025e8 <TIM_OC1_SetConfig>
      break;
 8002148:	e017      	b.n	800217a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68b9      	ldr	r1, [r7, #8]
 8002150:	4618      	mov	r0, r3
 8002152:	f000 faaf 	bl	80026b4 <TIM_OC2_SetConfig>
      break;
 8002156:	e010      	b.n	800217a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	4618      	mov	r0, r3
 8002160:	f000 fb12 	bl	8002788 <TIM_OC3_SetConfig>
      break;
 8002164:	e009      	b.n	800217a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68b9      	ldr	r1, [r7, #8]
 800216c:	4618      	mov	r0, r3
 800216e:	f000 fb75 	bl	800285c <TIM_OC4_SetConfig>
      break;
 8002172:	e002      	b.n	800217a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	75fb      	strb	r3, [r7, #23]
      break;
 8002178:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002182:	7dfb      	ldrb	r3, [r7, #23]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d101      	bne.n	80021aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80021a6:	2302      	movs	r3, #2
 80021a8:	e0ae      	b.n	8002308 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b0c      	cmp	r3, #12
 80021b6:	f200 809f 	bhi.w	80022f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80021ba:	a201      	add	r2, pc, #4	; (adr r2, 80021c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80021bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c0:	080021f5 	.word	0x080021f5
 80021c4:	080022f9 	.word	0x080022f9
 80021c8:	080022f9 	.word	0x080022f9
 80021cc:	080022f9 	.word	0x080022f9
 80021d0:	08002235 	.word	0x08002235
 80021d4:	080022f9 	.word	0x080022f9
 80021d8:	080022f9 	.word	0x080022f9
 80021dc:	080022f9 	.word	0x080022f9
 80021e0:	08002277 	.word	0x08002277
 80021e4:	080022f9 	.word	0x080022f9
 80021e8:	080022f9 	.word	0x080022f9
 80021ec:	080022f9 	.word	0x080022f9
 80021f0:	080022b7 	.word	0x080022b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 f9f4 	bl	80025e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699a      	ldr	r2, [r3, #24]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0208 	orr.w	r2, r2, #8
 800220e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699a      	ldr	r2, [r3, #24]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0204 	bic.w	r2, r2, #4
 800221e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6999      	ldr	r1, [r3, #24]
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	691a      	ldr	r2, [r3, #16]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	619a      	str	r2, [r3, #24]
      break;
 8002232:	e064      	b.n	80022fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	4618      	mov	r0, r3
 800223c:	f000 fa3a 	bl	80026b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	699a      	ldr	r2, [r3, #24]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800224e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699a      	ldr	r2, [r3, #24]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800225e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6999      	ldr	r1, [r3, #24]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	021a      	lsls	r2, r3, #8
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	619a      	str	r2, [r3, #24]
      break;
 8002274:	e043      	b.n	80022fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68b9      	ldr	r1, [r7, #8]
 800227c:	4618      	mov	r0, r3
 800227e:	f000 fa83 	bl	8002788 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	69da      	ldr	r2, [r3, #28]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f042 0208 	orr.w	r2, r2, #8
 8002290:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	69da      	ldr	r2, [r3, #28]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0204 	bic.w	r2, r2, #4
 80022a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	69d9      	ldr	r1, [r3, #28]
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	61da      	str	r2, [r3, #28]
      break;
 80022b4:	e023      	b.n	80022fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68b9      	ldr	r1, [r7, #8]
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 facd 	bl	800285c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	69da      	ldr	r2, [r3, #28]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	69da      	ldr	r2, [r3, #28]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	69d9      	ldr	r1, [r3, #28]
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	021a      	lsls	r2, r3, #8
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	61da      	str	r2, [r3, #28]
      break;
 80022f6:	e002      	b.n	80022fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	75fb      	strb	r3, [r7, #23]
      break;
 80022fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002306:	7dfb      	ldrb	r3, [r7, #23]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_TIM_ConfigClockSource+0x1c>
 8002328:	2302      	movs	r3, #2
 800232a:	e0b4      	b.n	8002496 <HAL_TIM_ConfigClockSource+0x186>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800234a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002352:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002364:	d03e      	beq.n	80023e4 <HAL_TIM_ConfigClockSource+0xd4>
 8002366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800236a:	f200 8087 	bhi.w	800247c <HAL_TIM_ConfigClockSource+0x16c>
 800236e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002372:	f000 8086 	beq.w	8002482 <HAL_TIM_ConfigClockSource+0x172>
 8002376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800237a:	d87f      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
 800237c:	2b70      	cmp	r3, #112	; 0x70
 800237e:	d01a      	beq.n	80023b6 <HAL_TIM_ConfigClockSource+0xa6>
 8002380:	2b70      	cmp	r3, #112	; 0x70
 8002382:	d87b      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
 8002384:	2b60      	cmp	r3, #96	; 0x60
 8002386:	d050      	beq.n	800242a <HAL_TIM_ConfigClockSource+0x11a>
 8002388:	2b60      	cmp	r3, #96	; 0x60
 800238a:	d877      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
 800238c:	2b50      	cmp	r3, #80	; 0x50
 800238e:	d03c      	beq.n	800240a <HAL_TIM_ConfigClockSource+0xfa>
 8002390:	2b50      	cmp	r3, #80	; 0x50
 8002392:	d873      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
 8002394:	2b40      	cmp	r3, #64	; 0x40
 8002396:	d058      	beq.n	800244a <HAL_TIM_ConfigClockSource+0x13a>
 8002398:	2b40      	cmp	r3, #64	; 0x40
 800239a:	d86f      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
 800239c:	2b30      	cmp	r3, #48	; 0x30
 800239e:	d064      	beq.n	800246a <HAL_TIM_ConfigClockSource+0x15a>
 80023a0:	2b30      	cmp	r3, #48	; 0x30
 80023a2:	d86b      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
 80023a4:	2b20      	cmp	r3, #32
 80023a6:	d060      	beq.n	800246a <HAL_TIM_ConfigClockSource+0x15a>
 80023a8:	2b20      	cmp	r3, #32
 80023aa:	d867      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d05c      	beq.n	800246a <HAL_TIM_ConfigClockSource+0x15a>
 80023b0:	2b10      	cmp	r3, #16
 80023b2:	d05a      	beq.n	800246a <HAL_TIM_ConfigClockSource+0x15a>
 80023b4:	e062      	b.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6818      	ldr	r0, [r3, #0]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	6899      	ldr	r1, [r3, #8]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f000 fb9f 	bl	8002b08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	609a      	str	r2, [r3, #8]
      break;
 80023e2:	e04f      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6818      	ldr	r0, [r3, #0]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	6899      	ldr	r1, [r3, #8]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f000 fb88 	bl	8002b08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002406:	609a      	str	r2, [r3, #8]
      break;
 8002408:	e03c      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6859      	ldr	r1, [r3, #4]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	461a      	mov	r2, r3
 8002418:	f000 faff 	bl	8002a1a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2150      	movs	r1, #80	; 0x50
 8002422:	4618      	mov	r0, r3
 8002424:	f000 fb56 	bl	8002ad4 <TIM_ITRx_SetConfig>
      break;
 8002428:	e02c      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	6859      	ldr	r1, [r3, #4]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	461a      	mov	r2, r3
 8002438:	f000 fb1d 	bl	8002a76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2160      	movs	r1, #96	; 0x60
 8002442:	4618      	mov	r0, r3
 8002444:	f000 fb46 	bl	8002ad4 <TIM_ITRx_SetConfig>
      break;
 8002448:	e01c      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6859      	ldr	r1, [r3, #4]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	461a      	mov	r2, r3
 8002458:	f000 fadf 	bl	8002a1a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2140      	movs	r1, #64	; 0x40
 8002462:	4618      	mov	r0, r3
 8002464:	f000 fb36 	bl	8002ad4 <TIM_ITRx_SetConfig>
      break;
 8002468:	e00c      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4619      	mov	r1, r3
 8002474:	4610      	mov	r0, r2
 8002476:	f000 fb2d 	bl	8002ad4 <TIM_ITRx_SetConfig>
      break;
 800247a:	e003      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	73fb      	strb	r3, [r7, #15]
      break;
 8002480:	e000      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002482:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002494:	7bfb      	ldrb	r3, [r7, #15]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e031      	b.n	800251a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2202      	movs	r2, #2
 80024c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80024c6:	6839      	ldr	r1, [r7, #0]
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 fa15 	bl	80028f8 <TIM_SlaveTimer_SetConfig>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d009      	beq.n	80024e8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e018      	b.n	800251a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024f6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002506:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a29      	ldr	r2, [pc, #164]	; (80025dc <TIM_Base_SetConfig+0xb8>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d00b      	beq.n	8002554 <TIM_Base_SetConfig+0x30>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002542:	d007      	beq.n	8002554 <TIM_Base_SetConfig+0x30>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a26      	ldr	r2, [pc, #152]	; (80025e0 <TIM_Base_SetConfig+0xbc>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d003      	beq.n	8002554 <TIM_Base_SetConfig+0x30>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a25      	ldr	r2, [pc, #148]	; (80025e4 <TIM_Base_SetConfig+0xc0>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d108      	bne.n	8002566 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800255a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	4313      	orrs	r3, r2
 8002564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a1c      	ldr	r2, [pc, #112]	; (80025dc <TIM_Base_SetConfig+0xb8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00b      	beq.n	8002586 <TIM_Base_SetConfig+0x62>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002574:	d007      	beq.n	8002586 <TIM_Base_SetConfig+0x62>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a19      	ldr	r2, [pc, #100]	; (80025e0 <TIM_Base_SetConfig+0xbc>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d003      	beq.n	8002586 <TIM_Base_SetConfig+0x62>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a18      	ldr	r2, [pc, #96]	; (80025e4 <TIM_Base_SetConfig+0xc0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d108      	bne.n	8002598 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800258c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	4313      	orrs	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a07      	ldr	r2, [pc, #28]	; (80025dc <TIM_Base_SetConfig+0xb8>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d103      	bne.n	80025cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	615a      	str	r2, [r3, #20]
}
 80025d2:	bf00      	nop
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr
 80025dc:	40012c00 	.word	0x40012c00
 80025e0:	40000400 	.word	0x40000400
 80025e4:	40000800 	.word	0x40000800

080025e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	f023 0201 	bic.w	r2, r3, #1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f023 0303 	bic.w	r3, r3, #3
 800261e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	4313      	orrs	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f023 0302 	bic.w	r3, r3, #2
 8002630:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	4313      	orrs	r3, r2
 800263a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a1c      	ldr	r2, [pc, #112]	; (80026b0 <TIM_OC1_SetConfig+0xc8>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d10c      	bne.n	800265e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f023 0308 	bic.w	r3, r3, #8
 800264a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	4313      	orrs	r3, r2
 8002654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f023 0304 	bic.w	r3, r3, #4
 800265c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a13      	ldr	r2, [pc, #76]	; (80026b0 <TIM_OC1_SetConfig+0xc8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d111      	bne.n	800268a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800266c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002674:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4313      	orrs	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	621a      	str	r2, [r3, #32]
}
 80026a4:	bf00      	nop
 80026a6:	371c      	adds	r7, #28
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40012c00 	.word	0x40012c00

080026b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	f023 0210 	bic.w	r2, r3, #16
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	021b      	lsls	r3, r3, #8
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f023 0320 	bic.w	r3, r3, #32
 80026fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	4313      	orrs	r3, r2
 800270a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a1d      	ldr	r2, [pc, #116]	; (8002784 <TIM_OC2_SetConfig+0xd0>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d10d      	bne.n	8002730 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800271a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	011b      	lsls	r3, r3, #4
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	4313      	orrs	r3, r2
 8002726:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800272e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a14      	ldr	r2, [pc, #80]	; (8002784 <TIM_OC2_SetConfig+0xd0>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d113      	bne.n	8002760 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800273e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002746:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	621a      	str	r2, [r3, #32]
}
 800277a:	bf00      	nop
 800277c:	371c      	adds	r7, #28
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr
 8002784:	40012c00 	.word	0x40012c00

08002788 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f023 0303 	bic.w	r3, r3, #3
 80027be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	021b      	lsls	r3, r3, #8
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	4313      	orrs	r3, r2
 80027dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a1d      	ldr	r2, [pc, #116]	; (8002858 <TIM_OC3_SetConfig+0xd0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d10d      	bne.n	8002802 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	021b      	lsls	r3, r3, #8
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a14      	ldr	r2, [pc, #80]	; (8002858 <TIM_OC3_SetConfig+0xd0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d113      	bne.n	8002832 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	621a      	str	r2, [r3, #32]
}
 800284c:	bf00      	nop
 800284e:	371c      	adds	r7, #28
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40012c00 	.word	0x40012c00

0800285c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800288a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	021b      	lsls	r3, r3, #8
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	4313      	orrs	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	031b      	lsls	r3, r3, #12
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a0f      	ldr	r2, [pc, #60]	; (80028f4 <TIM_OC4_SetConfig+0x98>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d109      	bne.n	80028d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	019b      	lsls	r3, r3, #6
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	621a      	str	r2, [r3, #32]
}
 80028ea:	bf00      	nop
 80028ec:	371c      	adds	r7, #28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr
 80028f4:	40012c00 	.word	0x40012c00

080028f8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002914:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	f023 0307 	bic.w	r3, r3, #7
 8002926:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	4313      	orrs	r3, r2
 8002930:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b70      	cmp	r3, #112	; 0x70
 8002940:	d01a      	beq.n	8002978 <TIM_SlaveTimer_SetConfig+0x80>
 8002942:	2b70      	cmp	r3, #112	; 0x70
 8002944:	d860      	bhi.n	8002a08 <TIM_SlaveTimer_SetConfig+0x110>
 8002946:	2b60      	cmp	r3, #96	; 0x60
 8002948:	d054      	beq.n	80029f4 <TIM_SlaveTimer_SetConfig+0xfc>
 800294a:	2b60      	cmp	r3, #96	; 0x60
 800294c:	d85c      	bhi.n	8002a08 <TIM_SlaveTimer_SetConfig+0x110>
 800294e:	2b50      	cmp	r3, #80	; 0x50
 8002950:	d046      	beq.n	80029e0 <TIM_SlaveTimer_SetConfig+0xe8>
 8002952:	2b50      	cmp	r3, #80	; 0x50
 8002954:	d858      	bhi.n	8002a08 <TIM_SlaveTimer_SetConfig+0x110>
 8002956:	2b40      	cmp	r3, #64	; 0x40
 8002958:	d019      	beq.n	800298e <TIM_SlaveTimer_SetConfig+0x96>
 800295a:	2b40      	cmp	r3, #64	; 0x40
 800295c:	d854      	bhi.n	8002a08 <TIM_SlaveTimer_SetConfig+0x110>
 800295e:	2b30      	cmp	r3, #48	; 0x30
 8002960:	d055      	beq.n	8002a0e <TIM_SlaveTimer_SetConfig+0x116>
 8002962:	2b30      	cmp	r3, #48	; 0x30
 8002964:	d850      	bhi.n	8002a08 <TIM_SlaveTimer_SetConfig+0x110>
 8002966:	2b20      	cmp	r3, #32
 8002968:	d051      	beq.n	8002a0e <TIM_SlaveTimer_SetConfig+0x116>
 800296a:	2b20      	cmp	r3, #32
 800296c:	d84c      	bhi.n	8002a08 <TIM_SlaveTimer_SetConfig+0x110>
 800296e:	2b00      	cmp	r3, #0
 8002970:	d04d      	beq.n	8002a0e <TIM_SlaveTimer_SetConfig+0x116>
 8002972:	2b10      	cmp	r3, #16
 8002974:	d04b      	beq.n	8002a0e <TIM_SlaveTimer_SetConfig+0x116>
 8002976:	e047      	b.n	8002a08 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	68d9      	ldr	r1, [r3, #12]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	f000 f8be 	bl	8002b08 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800298c:	e040      	b.n	8002a10 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b05      	cmp	r3, #5
 8002994:	d101      	bne.n	800299a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e03b      	b.n	8002a12 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6a1a      	ldr	r2, [r3, #32]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0201 	bic.w	r2, r2, #1
 80029b0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029c0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	621a      	str	r2, [r3, #32]
      break;
 80029de:	e017      	b.n	8002a10 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	6899      	ldr	r1, [r3, #8]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	461a      	mov	r2, r3
 80029ee:	f000 f814 	bl	8002a1a <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80029f2:	e00d      	b.n	8002a10 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6818      	ldr	r0, [r3, #0]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	6899      	ldr	r1, [r3, #8]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	461a      	mov	r2, r3
 8002a02:	f000 f838 	bl	8002a76 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8002a06:	e003      	b.n	8002a10 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a0c:	e000      	b.n	8002a10 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8002a0e:	bf00      	nop
  }

  return status;
 8002a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b087      	sub	sp, #28
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	60f8      	str	r0, [r7, #12]
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	f023 0201 	bic.w	r2, r3, #1
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	f023 030a 	bic.w	r3, r3, #10
 8002a56:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	621a      	str	r2, [r3, #32]
}
 8002a6c:	bf00      	nop
 8002a6e:	371c      	adds	r7, #28
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr

08002a76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b087      	sub	sp, #28
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	f023 0210 	bic.w	r2, r3, #16
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002aa0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	031b      	lsls	r3, r3, #12
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ab2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	621a      	str	r2, [r3, #32]
}
 8002aca:	bf00      	nop
 8002acc:	371c      	adds	r7, #28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr

08002ad4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f043 0307 	orr.w	r3, r3, #7
 8002af6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	609a      	str	r2, [r3, #8]
}
 8002afe:	bf00      	nop
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
 8002b14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	021a      	lsls	r2, r3, #8
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	609a      	str	r2, [r3, #8]
}
 8002b3c:	bf00      	nop
 8002b3e:	371c      	adds	r7, #28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr
	...

08002b48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e046      	b.n	8002bee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a16      	ldr	r2, [pc, #88]	; (8002bf8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d00e      	beq.n	8002bc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bac:	d009      	beq.n	8002bc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a12      	ldr	r2, [pc, #72]	; (8002bfc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d004      	beq.n	8002bc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a10      	ldr	r2, [pc, #64]	; (8002c00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d10c      	bne.n	8002bdc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr
 8002bf8:	40012c00 	.word	0x40012c00
 8002bfc:	40000400 	.word	0x40000400
 8002c00:	40000800 	.word	0x40000800

08002c04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e03d      	b.n	8002c9c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e042      	b.n	8002d3e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d106      	bne.n	8002cd2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7fe f84b 	bl	8000d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2224      	movs	r2, #36	; 0x24
 8002cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ce8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f82c 	bl	8002d48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691a      	ldr	r2, [r3, #16]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cfe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d0e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d1e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2220      	movs	r2, #32
 8002d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68da      	ldr	r2, [r3, #12]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d82:	f023 030c 	bic.w	r3, r3, #12
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6812      	ldr	r2, [r2, #0]
 8002d8a:	68b9      	ldr	r1, [r7, #8]
 8002d8c:	430b      	orrs	r3, r1
 8002d8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699a      	ldr	r2, [r3, #24]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a2c      	ldr	r2, [pc, #176]	; (8002e5c <UART_SetConfig+0x114>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d103      	bne.n	8002db8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002db0:	f7ff f85e 	bl	8001e70 <HAL_RCC_GetPCLK2Freq>
 8002db4:	60f8      	str	r0, [r7, #12]
 8002db6:	e002      	b.n	8002dbe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002db8:	f7ff f846 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 8002dbc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009a      	lsls	r2, r3, #2
 8002dc8:	441a      	add	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd4:	4a22      	ldr	r2, [pc, #136]	; (8002e60 <UART_SetConfig+0x118>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	0119      	lsls	r1, r3, #4
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	009a      	lsls	r2, r3, #2
 8002de8:	441a      	add	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002df4:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <UART_SetConfig+0x118>)
 8002df6:	fba3 0302 	umull	r0, r3, r3, r2
 8002dfa:	095b      	lsrs	r3, r3, #5
 8002dfc:	2064      	movs	r0, #100	; 0x64
 8002dfe:	fb00 f303 	mul.w	r3, r0, r3
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	3332      	adds	r3, #50	; 0x32
 8002e08:	4a15      	ldr	r2, [pc, #84]	; (8002e60 <UART_SetConfig+0x118>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	095b      	lsrs	r3, r3, #5
 8002e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e14:	4419      	add	r1, r3
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009a      	lsls	r2, r3, #2
 8002e20:	441a      	add	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <UART_SetConfig+0x118>)
 8002e2e:	fba3 0302 	umull	r0, r3, r3, r2
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	2064      	movs	r0, #100	; 0x64
 8002e36:	fb00 f303 	mul.w	r3, r0, r3
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	3332      	adds	r3, #50	; 0x32
 8002e40:	4a07      	ldr	r2, [pc, #28]	; (8002e60 <UART_SetConfig+0x118>)
 8002e42:	fba2 2303 	umull	r2, r3, r2, r3
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	f003 020f 	and.w	r2, r3, #15
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	440a      	add	r2, r1
 8002e52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e54:	bf00      	nop
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40013800 	.word	0x40013800
 8002e60:	51eb851f 	.word	0x51eb851f

08002e64 <_ZdlPvj>:
 8002e64:	f000 b811 	b.w	8002e8a <_ZdlPv>

08002e68 <_Znwj>:
 8002e68:	2801      	cmp	r0, #1
 8002e6a:	bf38      	it	cc
 8002e6c:	2001      	movcc	r0, #1
 8002e6e:	b510      	push	{r4, lr}
 8002e70:	4604      	mov	r4, r0
 8002e72:	4620      	mov	r0, r4
 8002e74:	f000 f846 	bl	8002f04 <malloc>
 8002e78:	b930      	cbnz	r0, 8002e88 <_Znwj+0x20>
 8002e7a:	f000 f809 	bl	8002e90 <_ZSt15get_new_handlerv>
 8002e7e:	b908      	cbnz	r0, 8002e84 <_Znwj+0x1c>
 8002e80:	f000 f80e 	bl	8002ea0 <abort>
 8002e84:	4780      	blx	r0
 8002e86:	e7f4      	b.n	8002e72 <_Znwj+0xa>
 8002e88:	bd10      	pop	{r4, pc}

08002e8a <_ZdlPv>:
 8002e8a:	f000 b843 	b.w	8002f14 <free>
	...

08002e90 <_ZSt15get_new_handlerv>:
 8002e90:	4b02      	ldr	r3, [pc, #8]	; (8002e9c <_ZSt15get_new_handlerv+0xc>)
 8002e92:	6818      	ldr	r0, [r3, #0]
 8002e94:	f3bf 8f5b 	dmb	ish
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	200002dc 	.word	0x200002dc

08002ea0 <abort>:
 8002ea0:	2006      	movs	r0, #6
 8002ea2:	b508      	push	{r3, lr}
 8002ea4:	f000 f95a 	bl	800315c <raise>
 8002ea8:	2001      	movs	r0, #1
 8002eaa:	f7fd fbf3 	bl	8000694 <_exit>
	...

08002eb0 <__errno>:
 8002eb0:	4b01      	ldr	r3, [pc, #4]	; (8002eb8 <__errno+0x8>)
 8002eb2:	6818      	ldr	r0, [r3, #0]
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	2000000c 	.word	0x2000000c

08002ebc <__libc_init_array>:
 8002ebc:	b570      	push	{r4, r5, r6, lr}
 8002ebe:	2600      	movs	r6, #0
 8002ec0:	4d0c      	ldr	r5, [pc, #48]	; (8002ef4 <__libc_init_array+0x38>)
 8002ec2:	4c0d      	ldr	r4, [pc, #52]	; (8002ef8 <__libc_init_array+0x3c>)
 8002ec4:	1b64      	subs	r4, r4, r5
 8002ec6:	10a4      	asrs	r4, r4, #2
 8002ec8:	42a6      	cmp	r6, r4
 8002eca:	d109      	bne.n	8002ee0 <__libc_init_array+0x24>
 8002ecc:	f000 f970 	bl	80031b0 <_init>
 8002ed0:	2600      	movs	r6, #0
 8002ed2:	4d0a      	ldr	r5, [pc, #40]	; (8002efc <__libc_init_array+0x40>)
 8002ed4:	4c0a      	ldr	r4, [pc, #40]	; (8002f00 <__libc_init_array+0x44>)
 8002ed6:	1b64      	subs	r4, r4, r5
 8002ed8:	10a4      	asrs	r4, r4, #2
 8002eda:	42a6      	cmp	r6, r4
 8002edc:	d105      	bne.n	8002eea <__libc_init_array+0x2e>
 8002ede:	bd70      	pop	{r4, r5, r6, pc}
 8002ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ee4:	4798      	blx	r3
 8002ee6:	3601      	adds	r6, #1
 8002ee8:	e7ee      	b.n	8002ec8 <__libc_init_array+0xc>
 8002eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eee:	4798      	blx	r3
 8002ef0:	3601      	adds	r6, #1
 8002ef2:	e7f2      	b.n	8002eda <__libc_init_array+0x1e>
 8002ef4:	080031f4 	.word	0x080031f4
 8002ef8:	080031f4 	.word	0x080031f4
 8002efc:	080031f4 	.word	0x080031f4
 8002f00:	080031fc 	.word	0x080031fc

08002f04 <malloc>:
 8002f04:	4b02      	ldr	r3, [pc, #8]	; (8002f10 <malloc+0xc>)
 8002f06:	4601      	mov	r1, r0
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	f000 b87b 	b.w	8003004 <_malloc_r>
 8002f0e:	bf00      	nop
 8002f10:	2000000c 	.word	0x2000000c

08002f14 <free>:
 8002f14:	4b02      	ldr	r3, [pc, #8]	; (8002f20 <free+0xc>)
 8002f16:	4601      	mov	r1, r0
 8002f18:	6818      	ldr	r0, [r3, #0]
 8002f1a:	f000 b80b 	b.w	8002f34 <_free_r>
 8002f1e:	bf00      	nop
 8002f20:	2000000c 	.word	0x2000000c

08002f24 <memset>:
 8002f24:	4603      	mov	r3, r0
 8002f26:	4402      	add	r2, r0
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d100      	bne.n	8002f2e <memset+0xa>
 8002f2c:	4770      	bx	lr
 8002f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f32:	e7f9      	b.n	8002f28 <memset+0x4>

08002f34 <_free_r>:
 8002f34:	b538      	push	{r3, r4, r5, lr}
 8002f36:	4605      	mov	r5, r0
 8002f38:	2900      	cmp	r1, #0
 8002f3a:	d040      	beq.n	8002fbe <_free_r+0x8a>
 8002f3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f40:	1f0c      	subs	r4, r1, #4
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	bfb8      	it	lt
 8002f46:	18e4      	addlt	r4, r4, r3
 8002f48:	f000 f924 	bl	8003194 <__malloc_lock>
 8002f4c:	4a1c      	ldr	r2, [pc, #112]	; (8002fc0 <_free_r+0x8c>)
 8002f4e:	6813      	ldr	r3, [r2, #0]
 8002f50:	b933      	cbnz	r3, 8002f60 <_free_r+0x2c>
 8002f52:	6063      	str	r3, [r4, #4]
 8002f54:	6014      	str	r4, [r2, #0]
 8002f56:	4628      	mov	r0, r5
 8002f58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f5c:	f000 b920 	b.w	80031a0 <__malloc_unlock>
 8002f60:	42a3      	cmp	r3, r4
 8002f62:	d908      	bls.n	8002f76 <_free_r+0x42>
 8002f64:	6820      	ldr	r0, [r4, #0]
 8002f66:	1821      	adds	r1, r4, r0
 8002f68:	428b      	cmp	r3, r1
 8002f6a:	bf01      	itttt	eq
 8002f6c:	6819      	ldreq	r1, [r3, #0]
 8002f6e:	685b      	ldreq	r3, [r3, #4]
 8002f70:	1809      	addeq	r1, r1, r0
 8002f72:	6021      	streq	r1, [r4, #0]
 8002f74:	e7ed      	b.n	8002f52 <_free_r+0x1e>
 8002f76:	461a      	mov	r2, r3
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	b10b      	cbz	r3, 8002f80 <_free_r+0x4c>
 8002f7c:	42a3      	cmp	r3, r4
 8002f7e:	d9fa      	bls.n	8002f76 <_free_r+0x42>
 8002f80:	6811      	ldr	r1, [r2, #0]
 8002f82:	1850      	adds	r0, r2, r1
 8002f84:	42a0      	cmp	r0, r4
 8002f86:	d10b      	bne.n	8002fa0 <_free_r+0x6c>
 8002f88:	6820      	ldr	r0, [r4, #0]
 8002f8a:	4401      	add	r1, r0
 8002f8c:	1850      	adds	r0, r2, r1
 8002f8e:	4283      	cmp	r3, r0
 8002f90:	6011      	str	r1, [r2, #0]
 8002f92:	d1e0      	bne.n	8002f56 <_free_r+0x22>
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	4401      	add	r1, r0
 8002f9a:	6011      	str	r1, [r2, #0]
 8002f9c:	6053      	str	r3, [r2, #4]
 8002f9e:	e7da      	b.n	8002f56 <_free_r+0x22>
 8002fa0:	d902      	bls.n	8002fa8 <_free_r+0x74>
 8002fa2:	230c      	movs	r3, #12
 8002fa4:	602b      	str	r3, [r5, #0]
 8002fa6:	e7d6      	b.n	8002f56 <_free_r+0x22>
 8002fa8:	6820      	ldr	r0, [r4, #0]
 8002faa:	1821      	adds	r1, r4, r0
 8002fac:	428b      	cmp	r3, r1
 8002fae:	bf01      	itttt	eq
 8002fb0:	6819      	ldreq	r1, [r3, #0]
 8002fb2:	685b      	ldreq	r3, [r3, #4]
 8002fb4:	1809      	addeq	r1, r1, r0
 8002fb6:	6021      	streq	r1, [r4, #0]
 8002fb8:	6063      	str	r3, [r4, #4]
 8002fba:	6054      	str	r4, [r2, #4]
 8002fbc:	e7cb      	b.n	8002f56 <_free_r+0x22>
 8002fbe:	bd38      	pop	{r3, r4, r5, pc}
 8002fc0:	200002e0 	.word	0x200002e0

08002fc4 <sbrk_aligned>:
 8002fc4:	b570      	push	{r4, r5, r6, lr}
 8002fc6:	4e0e      	ldr	r6, [pc, #56]	; (8003000 <sbrk_aligned+0x3c>)
 8002fc8:	460c      	mov	r4, r1
 8002fca:	6831      	ldr	r1, [r6, #0]
 8002fcc:	4605      	mov	r5, r0
 8002fce:	b911      	cbnz	r1, 8002fd6 <sbrk_aligned+0x12>
 8002fd0:	f000 f88c 	bl	80030ec <_sbrk_r>
 8002fd4:	6030      	str	r0, [r6, #0]
 8002fd6:	4621      	mov	r1, r4
 8002fd8:	4628      	mov	r0, r5
 8002fda:	f000 f887 	bl	80030ec <_sbrk_r>
 8002fde:	1c43      	adds	r3, r0, #1
 8002fe0:	d00a      	beq.n	8002ff8 <sbrk_aligned+0x34>
 8002fe2:	1cc4      	adds	r4, r0, #3
 8002fe4:	f024 0403 	bic.w	r4, r4, #3
 8002fe8:	42a0      	cmp	r0, r4
 8002fea:	d007      	beq.n	8002ffc <sbrk_aligned+0x38>
 8002fec:	1a21      	subs	r1, r4, r0
 8002fee:	4628      	mov	r0, r5
 8002ff0:	f000 f87c 	bl	80030ec <_sbrk_r>
 8002ff4:	3001      	adds	r0, #1
 8002ff6:	d101      	bne.n	8002ffc <sbrk_aligned+0x38>
 8002ff8:	f04f 34ff 	mov.w	r4, #4294967295
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	bd70      	pop	{r4, r5, r6, pc}
 8003000:	200002e4 	.word	0x200002e4

08003004 <_malloc_r>:
 8003004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003008:	1ccd      	adds	r5, r1, #3
 800300a:	f025 0503 	bic.w	r5, r5, #3
 800300e:	3508      	adds	r5, #8
 8003010:	2d0c      	cmp	r5, #12
 8003012:	bf38      	it	cc
 8003014:	250c      	movcc	r5, #12
 8003016:	2d00      	cmp	r5, #0
 8003018:	4607      	mov	r7, r0
 800301a:	db01      	blt.n	8003020 <_malloc_r+0x1c>
 800301c:	42a9      	cmp	r1, r5
 800301e:	d905      	bls.n	800302c <_malloc_r+0x28>
 8003020:	230c      	movs	r3, #12
 8003022:	2600      	movs	r6, #0
 8003024:	603b      	str	r3, [r7, #0]
 8003026:	4630      	mov	r0, r6
 8003028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800302c:	4e2e      	ldr	r6, [pc, #184]	; (80030e8 <_malloc_r+0xe4>)
 800302e:	f000 f8b1 	bl	8003194 <__malloc_lock>
 8003032:	6833      	ldr	r3, [r6, #0]
 8003034:	461c      	mov	r4, r3
 8003036:	bb34      	cbnz	r4, 8003086 <_malloc_r+0x82>
 8003038:	4629      	mov	r1, r5
 800303a:	4638      	mov	r0, r7
 800303c:	f7ff ffc2 	bl	8002fc4 <sbrk_aligned>
 8003040:	1c43      	adds	r3, r0, #1
 8003042:	4604      	mov	r4, r0
 8003044:	d14d      	bne.n	80030e2 <_malloc_r+0xde>
 8003046:	6834      	ldr	r4, [r6, #0]
 8003048:	4626      	mov	r6, r4
 800304a:	2e00      	cmp	r6, #0
 800304c:	d140      	bne.n	80030d0 <_malloc_r+0xcc>
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	4631      	mov	r1, r6
 8003052:	4638      	mov	r0, r7
 8003054:	eb04 0803 	add.w	r8, r4, r3
 8003058:	f000 f848 	bl	80030ec <_sbrk_r>
 800305c:	4580      	cmp	r8, r0
 800305e:	d13a      	bne.n	80030d6 <_malloc_r+0xd2>
 8003060:	6821      	ldr	r1, [r4, #0]
 8003062:	3503      	adds	r5, #3
 8003064:	1a6d      	subs	r5, r5, r1
 8003066:	f025 0503 	bic.w	r5, r5, #3
 800306a:	3508      	adds	r5, #8
 800306c:	2d0c      	cmp	r5, #12
 800306e:	bf38      	it	cc
 8003070:	250c      	movcc	r5, #12
 8003072:	4638      	mov	r0, r7
 8003074:	4629      	mov	r1, r5
 8003076:	f7ff ffa5 	bl	8002fc4 <sbrk_aligned>
 800307a:	3001      	adds	r0, #1
 800307c:	d02b      	beq.n	80030d6 <_malloc_r+0xd2>
 800307e:	6823      	ldr	r3, [r4, #0]
 8003080:	442b      	add	r3, r5
 8003082:	6023      	str	r3, [r4, #0]
 8003084:	e00e      	b.n	80030a4 <_malloc_r+0xa0>
 8003086:	6822      	ldr	r2, [r4, #0]
 8003088:	1b52      	subs	r2, r2, r5
 800308a:	d41e      	bmi.n	80030ca <_malloc_r+0xc6>
 800308c:	2a0b      	cmp	r2, #11
 800308e:	d916      	bls.n	80030be <_malloc_r+0xba>
 8003090:	1961      	adds	r1, r4, r5
 8003092:	42a3      	cmp	r3, r4
 8003094:	6025      	str	r5, [r4, #0]
 8003096:	bf18      	it	ne
 8003098:	6059      	strne	r1, [r3, #4]
 800309a:	6863      	ldr	r3, [r4, #4]
 800309c:	bf08      	it	eq
 800309e:	6031      	streq	r1, [r6, #0]
 80030a0:	5162      	str	r2, [r4, r5]
 80030a2:	604b      	str	r3, [r1, #4]
 80030a4:	4638      	mov	r0, r7
 80030a6:	f104 060b 	add.w	r6, r4, #11
 80030aa:	f000 f879 	bl	80031a0 <__malloc_unlock>
 80030ae:	f026 0607 	bic.w	r6, r6, #7
 80030b2:	1d23      	adds	r3, r4, #4
 80030b4:	1af2      	subs	r2, r6, r3
 80030b6:	d0b6      	beq.n	8003026 <_malloc_r+0x22>
 80030b8:	1b9b      	subs	r3, r3, r6
 80030ba:	50a3      	str	r3, [r4, r2]
 80030bc:	e7b3      	b.n	8003026 <_malloc_r+0x22>
 80030be:	6862      	ldr	r2, [r4, #4]
 80030c0:	42a3      	cmp	r3, r4
 80030c2:	bf0c      	ite	eq
 80030c4:	6032      	streq	r2, [r6, #0]
 80030c6:	605a      	strne	r2, [r3, #4]
 80030c8:	e7ec      	b.n	80030a4 <_malloc_r+0xa0>
 80030ca:	4623      	mov	r3, r4
 80030cc:	6864      	ldr	r4, [r4, #4]
 80030ce:	e7b2      	b.n	8003036 <_malloc_r+0x32>
 80030d0:	4634      	mov	r4, r6
 80030d2:	6876      	ldr	r6, [r6, #4]
 80030d4:	e7b9      	b.n	800304a <_malloc_r+0x46>
 80030d6:	230c      	movs	r3, #12
 80030d8:	4638      	mov	r0, r7
 80030da:	603b      	str	r3, [r7, #0]
 80030dc:	f000 f860 	bl	80031a0 <__malloc_unlock>
 80030e0:	e7a1      	b.n	8003026 <_malloc_r+0x22>
 80030e2:	6025      	str	r5, [r4, #0]
 80030e4:	e7de      	b.n	80030a4 <_malloc_r+0xa0>
 80030e6:	bf00      	nop
 80030e8:	200002e0 	.word	0x200002e0

080030ec <_sbrk_r>:
 80030ec:	b538      	push	{r3, r4, r5, lr}
 80030ee:	2300      	movs	r3, #0
 80030f0:	4d05      	ldr	r5, [pc, #20]	; (8003108 <_sbrk_r+0x1c>)
 80030f2:	4604      	mov	r4, r0
 80030f4:	4608      	mov	r0, r1
 80030f6:	602b      	str	r3, [r5, #0]
 80030f8:	f7fd fad6 	bl	80006a8 <_sbrk>
 80030fc:	1c43      	adds	r3, r0, #1
 80030fe:	d102      	bne.n	8003106 <_sbrk_r+0x1a>
 8003100:	682b      	ldr	r3, [r5, #0]
 8003102:	b103      	cbz	r3, 8003106 <_sbrk_r+0x1a>
 8003104:	6023      	str	r3, [r4, #0]
 8003106:	bd38      	pop	{r3, r4, r5, pc}
 8003108:	200002e8 	.word	0x200002e8

0800310c <_raise_r>:
 800310c:	291f      	cmp	r1, #31
 800310e:	b538      	push	{r3, r4, r5, lr}
 8003110:	4604      	mov	r4, r0
 8003112:	460d      	mov	r5, r1
 8003114:	d904      	bls.n	8003120 <_raise_r+0x14>
 8003116:	2316      	movs	r3, #22
 8003118:	6003      	str	r3, [r0, #0]
 800311a:	f04f 30ff 	mov.w	r0, #4294967295
 800311e:	bd38      	pop	{r3, r4, r5, pc}
 8003120:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003122:	b112      	cbz	r2, 800312a <_raise_r+0x1e>
 8003124:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003128:	b94b      	cbnz	r3, 800313e <_raise_r+0x32>
 800312a:	4620      	mov	r0, r4
 800312c:	f000 f830 	bl	8003190 <_getpid_r>
 8003130:	462a      	mov	r2, r5
 8003132:	4601      	mov	r1, r0
 8003134:	4620      	mov	r0, r4
 8003136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800313a:	f000 b817 	b.w	800316c <_kill_r>
 800313e:	2b01      	cmp	r3, #1
 8003140:	d00a      	beq.n	8003158 <_raise_r+0x4c>
 8003142:	1c59      	adds	r1, r3, #1
 8003144:	d103      	bne.n	800314e <_raise_r+0x42>
 8003146:	2316      	movs	r3, #22
 8003148:	6003      	str	r3, [r0, #0]
 800314a:	2001      	movs	r0, #1
 800314c:	e7e7      	b.n	800311e <_raise_r+0x12>
 800314e:	2400      	movs	r4, #0
 8003150:	4628      	mov	r0, r5
 8003152:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003156:	4798      	blx	r3
 8003158:	2000      	movs	r0, #0
 800315a:	e7e0      	b.n	800311e <_raise_r+0x12>

0800315c <raise>:
 800315c:	4b02      	ldr	r3, [pc, #8]	; (8003168 <raise+0xc>)
 800315e:	4601      	mov	r1, r0
 8003160:	6818      	ldr	r0, [r3, #0]
 8003162:	f7ff bfd3 	b.w	800310c <_raise_r>
 8003166:	bf00      	nop
 8003168:	2000000c 	.word	0x2000000c

0800316c <_kill_r>:
 800316c:	b538      	push	{r3, r4, r5, lr}
 800316e:	2300      	movs	r3, #0
 8003170:	4d06      	ldr	r5, [pc, #24]	; (800318c <_kill_r+0x20>)
 8003172:	4604      	mov	r4, r0
 8003174:	4608      	mov	r0, r1
 8003176:	4611      	mov	r1, r2
 8003178:	602b      	str	r3, [r5, #0]
 800317a:	f7fd fa7b 	bl	8000674 <_kill>
 800317e:	1c43      	adds	r3, r0, #1
 8003180:	d102      	bne.n	8003188 <_kill_r+0x1c>
 8003182:	682b      	ldr	r3, [r5, #0]
 8003184:	b103      	cbz	r3, 8003188 <_kill_r+0x1c>
 8003186:	6023      	str	r3, [r4, #0]
 8003188:	bd38      	pop	{r3, r4, r5, pc}
 800318a:	bf00      	nop
 800318c:	200002e8 	.word	0x200002e8

08003190 <_getpid_r>:
 8003190:	f7fd ba69 	b.w	8000666 <_getpid>

08003194 <__malloc_lock>:
 8003194:	4801      	ldr	r0, [pc, #4]	; (800319c <__malloc_lock+0x8>)
 8003196:	f000 b809 	b.w	80031ac <__retarget_lock_acquire_recursive>
 800319a:	bf00      	nop
 800319c:	200002ec 	.word	0x200002ec

080031a0 <__malloc_unlock>:
 80031a0:	4801      	ldr	r0, [pc, #4]	; (80031a8 <__malloc_unlock+0x8>)
 80031a2:	f000 b804 	b.w	80031ae <__retarget_lock_release_recursive>
 80031a6:	bf00      	nop
 80031a8:	200002ec 	.word	0x200002ec

080031ac <__retarget_lock_acquire_recursive>:
 80031ac:	4770      	bx	lr

080031ae <__retarget_lock_release_recursive>:
 80031ae:	4770      	bx	lr

080031b0 <_init>:
 80031b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b2:	bf00      	nop
 80031b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031b6:	bc08      	pop	{r3}
 80031b8:	469e      	mov	lr, r3
 80031ba:	4770      	bx	lr

080031bc <_fini>:
 80031bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031be:	bf00      	nop
 80031c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031c2:	bc08      	pop	{r3}
 80031c4:	469e      	mov	lr, r3
 80031c6:	4770      	bx	lr
