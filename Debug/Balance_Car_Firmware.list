
Balance_Car_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000752c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000084c  08007640  08007640  00017640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e8c  08007e8c  00020108  2**0
                  CONTENTS
  4 .ARM          00000000  08007e8c  08007e8c  00020108  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e8c  08007e8c  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007e8c  08007e8c  00017e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08007e94  08007e94  00017e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08007e9c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a0  20000108  08007fa4  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a8  08007fa4  000207a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b24  00000000  00000000  00020131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000364b  00000000  00000000  00035c55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  000392a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  0003a490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c9ee  00000000  00000000  0003b518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000171f4  00000000  00000000  00057f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091dbe  00000000  00000000  0006f0fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00100eb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005414  00000000  00000000  00100f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000108 	.word	0x20000108
 800012c:	00000000 	.word	0x00000000
 8000130:	08007624 	.word	0x08007624

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000010c 	.word	0x2000010c
 800014c:	08007624 	.word	0x08007624

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_frsub>:
 8000a78:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a7c:	e002      	b.n	8000a84 <__addsf3>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_fsub>:
 8000a80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a84 <__addsf3>:
 8000a84:	0042      	lsls	r2, r0, #1
 8000a86:	bf1f      	itttt	ne
 8000a88:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a8c:	ea92 0f03 	teqne	r2, r3
 8000a90:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a94:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a98:	d06a      	beq.n	8000b70 <__addsf3+0xec>
 8000a9a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a9e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aa2:	bfc1      	itttt	gt
 8000aa4:	18d2      	addgt	r2, r2, r3
 8000aa6:	4041      	eorgt	r1, r0
 8000aa8:	4048      	eorgt	r0, r1
 8000aaa:	4041      	eorgt	r1, r0
 8000aac:	bfb8      	it	lt
 8000aae:	425b      	neglt	r3, r3
 8000ab0:	2b19      	cmp	r3, #25
 8000ab2:	bf88      	it	hi
 8000ab4:	4770      	bxhi	lr
 8000ab6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000abe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ac2:	bf18      	it	ne
 8000ac4:	4240      	negne	r0, r0
 8000ac6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ace:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4249      	negne	r1, r1
 8000ad6:	ea92 0f03 	teq	r2, r3
 8000ada:	d03f      	beq.n	8000b5c <__addsf3+0xd8>
 8000adc:	f1a2 0201 	sub.w	r2, r2, #1
 8000ae0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ae4:	eb10 000c 	adds.w	r0, r0, ip
 8000ae8:	f1c3 0320 	rsb	r3, r3, #32
 8000aec:	fa01 f103 	lsl.w	r1, r1, r3
 8000af0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000af4:	d502      	bpl.n	8000afc <__addsf3+0x78>
 8000af6:	4249      	negs	r1, r1
 8000af8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000afc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b00:	d313      	bcc.n	8000b2a <__addsf3+0xa6>
 8000b02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b06:	d306      	bcc.n	8000b16 <__addsf3+0x92>
 8000b08:	0840      	lsrs	r0, r0, #1
 8000b0a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b0e:	f102 0201 	add.w	r2, r2, #1
 8000b12:	2afe      	cmp	r2, #254	; 0xfe
 8000b14:	d251      	bcs.n	8000bba <__addsf3+0x136>
 8000b16:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b1e:	bf08      	it	eq
 8000b20:	f020 0001 	biceq.w	r0, r0, #1
 8000b24:	ea40 0003 	orr.w	r0, r0, r3
 8000b28:	4770      	bx	lr
 8000b2a:	0049      	lsls	r1, r1, #1
 8000b2c:	eb40 0000 	adc.w	r0, r0, r0
 8000b30:	3a01      	subs	r2, #1
 8000b32:	bf28      	it	cs
 8000b34:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b38:	d2ed      	bcs.n	8000b16 <__addsf3+0x92>
 8000b3a:	fab0 fc80 	clz	ip, r0
 8000b3e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b42:	ebb2 020c 	subs.w	r2, r2, ip
 8000b46:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b4a:	bfaa      	itet	ge
 8000b4c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b50:	4252      	neglt	r2, r2
 8000b52:	4318      	orrge	r0, r3
 8000b54:	bfbc      	itt	lt
 8000b56:	40d0      	lsrlt	r0, r2
 8000b58:	4318      	orrlt	r0, r3
 8000b5a:	4770      	bx	lr
 8000b5c:	f092 0f00 	teq	r2, #0
 8000b60:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b64:	bf06      	itte	eq
 8000b66:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b6a:	3201      	addeq	r2, #1
 8000b6c:	3b01      	subne	r3, #1
 8000b6e:	e7b5      	b.n	8000adc <__addsf3+0x58>
 8000b70:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b78:	bf18      	it	ne
 8000b7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b7e:	d021      	beq.n	8000bc4 <__addsf3+0x140>
 8000b80:	ea92 0f03 	teq	r2, r3
 8000b84:	d004      	beq.n	8000b90 <__addsf3+0x10c>
 8000b86:	f092 0f00 	teq	r2, #0
 8000b8a:	bf08      	it	eq
 8000b8c:	4608      	moveq	r0, r1
 8000b8e:	4770      	bx	lr
 8000b90:	ea90 0f01 	teq	r0, r1
 8000b94:	bf1c      	itt	ne
 8000b96:	2000      	movne	r0, #0
 8000b98:	4770      	bxne	lr
 8000b9a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b9e:	d104      	bne.n	8000baa <__addsf3+0x126>
 8000ba0:	0040      	lsls	r0, r0, #1
 8000ba2:	bf28      	it	cs
 8000ba4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ba8:	4770      	bx	lr
 8000baa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bae:	bf3c      	itt	cc
 8000bb0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bb4:	4770      	bxcc	lr
 8000bb6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	4770      	bx	lr
 8000bc4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bc8:	bf16      	itet	ne
 8000bca:	4608      	movne	r0, r1
 8000bcc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bd0:	4601      	movne	r1, r0
 8000bd2:	0242      	lsls	r2, r0, #9
 8000bd4:	bf06      	itte	eq
 8000bd6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bda:	ea90 0f01 	teqeq	r0, r1
 8000bde:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000be2:	4770      	bx	lr

08000be4 <__aeabi_ui2f>:
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	e004      	b.n	8000bf4 <__aeabi_i2f+0x8>
 8000bea:	bf00      	nop

08000bec <__aeabi_i2f>:
 8000bec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bf0:	bf48      	it	mi
 8000bf2:	4240      	negmi	r0, r0
 8000bf4:	ea5f 0c00 	movs.w	ip, r0
 8000bf8:	bf08      	it	eq
 8000bfa:	4770      	bxeq	lr
 8000bfc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c00:	4601      	mov	r1, r0
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	e01c      	b.n	8000c42 <__aeabi_l2f+0x2a>

08000c08 <__aeabi_ul2f>:
 8000c08:	ea50 0201 	orrs.w	r2, r0, r1
 8000c0c:	bf08      	it	eq
 8000c0e:	4770      	bxeq	lr
 8000c10:	f04f 0300 	mov.w	r3, #0
 8000c14:	e00a      	b.n	8000c2c <__aeabi_l2f+0x14>
 8000c16:	bf00      	nop

08000c18 <__aeabi_l2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__aeabi_l2f+0x14>
 8000c26:	4240      	negs	r0, r0
 8000c28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2c:	ea5f 0c01 	movs.w	ip, r1
 8000c30:	bf02      	ittt	eq
 8000c32:	4684      	moveq	ip, r0
 8000c34:	4601      	moveq	r1, r0
 8000c36:	2000      	moveq	r0, #0
 8000c38:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c3c:	bf08      	it	eq
 8000c3e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c42:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c46:	fabc f28c 	clz	r2, ip
 8000c4a:	3a08      	subs	r2, #8
 8000c4c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c50:	db10      	blt.n	8000c74 <__aeabi_l2f+0x5c>
 8000c52:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c56:	4463      	add	r3, ip
 8000c58:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5c:	f1c2 0220 	rsb	r2, r2, #32
 8000c60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c64:	fa20 f202 	lsr.w	r2, r0, r2
 8000c68:	eb43 0002 	adc.w	r0, r3, r2
 8000c6c:	bf08      	it	eq
 8000c6e:	f020 0001 	biceq.w	r0, r0, #1
 8000c72:	4770      	bx	lr
 8000c74:	f102 0220 	add.w	r2, r2, #32
 8000c78:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7c:	f1c2 0220 	rsb	r2, r2, #32
 8000c80:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c84:	fa21 f202 	lsr.w	r2, r1, r2
 8000c88:	eb43 0002 	adc.w	r0, r3, r2
 8000c8c:	bf08      	it	eq
 8000c8e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_fmul>:
 8000c94:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c98:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ca2:	ea92 0f0c 	teqne	r2, ip
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d06f      	beq.n	8000d8c <__aeabi_fmul+0xf8>
 8000cac:	441a      	add	r2, r3
 8000cae:	ea80 0c01 	eor.w	ip, r0, r1
 8000cb2:	0240      	lsls	r0, r0, #9
 8000cb4:	bf18      	it	ne
 8000cb6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cba:	d01e      	beq.n	8000cfa <__aeabi_fmul+0x66>
 8000cbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cc0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cc4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cc8:	fba0 3101 	umull	r3, r1, r0, r1
 8000ccc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cd0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cd4:	bf3e      	ittt	cc
 8000cd6:	0049      	lslcc	r1, r1, #1
 8000cd8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cdc:	005b      	lslcc	r3, r3, #1
 8000cde:	ea40 0001 	orr.w	r0, r0, r1
 8000ce2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ce6:	2afd      	cmp	r2, #253	; 0xfd
 8000ce8:	d81d      	bhi.n	8000d26 <__aeabi_fmul+0x92>
 8000cea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cf2:	bf08      	it	eq
 8000cf4:	f020 0001 	biceq.w	r0, r0, #1
 8000cf8:	4770      	bx	lr
 8000cfa:	f090 0f00 	teq	r0, #0
 8000cfe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d02:	bf08      	it	eq
 8000d04:	0249      	lsleq	r1, r1, #9
 8000d06:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d0a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d0e:	3a7f      	subs	r2, #127	; 0x7f
 8000d10:	bfc2      	ittt	gt
 8000d12:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d16:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d1a:	4770      	bxgt	lr
 8000d1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	3a01      	subs	r2, #1
 8000d26:	dc5d      	bgt.n	8000de4 <__aeabi_fmul+0x150>
 8000d28:	f112 0f19 	cmn.w	r2, #25
 8000d2c:	bfdc      	itt	le
 8000d2e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d32:	4770      	bxle	lr
 8000d34:	f1c2 0200 	rsb	r2, r2, #0
 8000d38:	0041      	lsls	r1, r0, #1
 8000d3a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d3e:	f1c2 0220 	rsb	r2, r2, #32
 8000d42:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d46:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d4a:	f140 0000 	adc.w	r0, r0, #0
 8000d4e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d52:	bf08      	it	eq
 8000d54:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d58:	4770      	bx	lr
 8000d5a:	f092 0f00 	teq	r2, #0
 8000d5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d62:	bf02      	ittt	eq
 8000d64:	0040      	lsleq	r0, r0, #1
 8000d66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d6a:	3a01      	subeq	r2, #1
 8000d6c:	d0f9      	beq.n	8000d62 <__aeabi_fmul+0xce>
 8000d6e:	ea40 000c 	orr.w	r0, r0, ip
 8000d72:	f093 0f00 	teq	r3, #0
 8000d76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d7a:	bf02      	ittt	eq
 8000d7c:	0049      	lsleq	r1, r1, #1
 8000d7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d82:	3b01      	subeq	r3, #1
 8000d84:	d0f9      	beq.n	8000d7a <__aeabi_fmul+0xe6>
 8000d86:	ea41 010c 	orr.w	r1, r1, ip
 8000d8a:	e78f      	b.n	8000cac <__aeabi_fmul+0x18>
 8000d8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d90:	ea92 0f0c 	teq	r2, ip
 8000d94:	bf18      	it	ne
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d00a      	beq.n	8000db2 <__aeabi_fmul+0x11e>
 8000d9c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000da0:	bf18      	it	ne
 8000da2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000da6:	d1d8      	bne.n	8000d5a <__aeabi_fmul+0xc6>
 8000da8:	ea80 0001 	eor.w	r0, r0, r1
 8000dac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000db0:	4770      	bx	lr
 8000db2:	f090 0f00 	teq	r0, #0
 8000db6:	bf17      	itett	ne
 8000db8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dbc:	4608      	moveq	r0, r1
 8000dbe:	f091 0f00 	teqne	r1, #0
 8000dc2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dc6:	d014      	beq.n	8000df2 <__aeabi_fmul+0x15e>
 8000dc8:	ea92 0f0c 	teq	r2, ip
 8000dcc:	d101      	bne.n	8000dd2 <__aeabi_fmul+0x13e>
 8000dce:	0242      	lsls	r2, r0, #9
 8000dd0:	d10f      	bne.n	8000df2 <__aeabi_fmul+0x15e>
 8000dd2:	ea93 0f0c 	teq	r3, ip
 8000dd6:	d103      	bne.n	8000de0 <__aeabi_fmul+0x14c>
 8000dd8:	024b      	lsls	r3, r1, #9
 8000dda:	bf18      	it	ne
 8000ddc:	4608      	movne	r0, r1
 8000dde:	d108      	bne.n	8000df2 <__aeabi_fmul+0x15e>
 8000de0:	ea80 0001 	eor.w	r0, r0, r1
 8000de4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000de8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df0:	4770      	bx	lr
 8000df2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000df6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_fdiv>:
 8000dfc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e04:	bf1e      	ittt	ne
 8000e06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e0a:	ea92 0f0c 	teqne	r2, ip
 8000e0e:	ea93 0f0c 	teqne	r3, ip
 8000e12:	d069      	beq.n	8000ee8 <__aeabi_fdiv+0xec>
 8000e14:	eba2 0203 	sub.w	r2, r2, r3
 8000e18:	ea80 0c01 	eor.w	ip, r0, r1
 8000e1c:	0249      	lsls	r1, r1, #9
 8000e1e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e22:	d037      	beq.n	8000e94 <__aeabi_fdiv+0x98>
 8000e24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e28:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e2c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e34:	428b      	cmp	r3, r1
 8000e36:	bf38      	it	cc
 8000e38:	005b      	lslcc	r3, r3, #1
 8000e3a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e3e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e42:	428b      	cmp	r3, r1
 8000e44:	bf24      	itt	cs
 8000e46:	1a5b      	subcs	r3, r3, r1
 8000e48:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e4c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e50:	bf24      	itt	cs
 8000e52:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e56:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e5a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e5e:	bf24      	itt	cs
 8000e60:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e68:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e6c:	bf24      	itt	cs
 8000e6e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e72:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e76:	011b      	lsls	r3, r3, #4
 8000e78:	bf18      	it	ne
 8000e7a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e7e:	d1e0      	bne.n	8000e42 <__aeabi_fdiv+0x46>
 8000e80:	2afd      	cmp	r2, #253	; 0xfd
 8000e82:	f63f af50 	bhi.w	8000d26 <__aeabi_fmul+0x92>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e8c:	bf08      	it	eq
 8000e8e:	f020 0001 	biceq.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e98:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e9c:	327f      	adds	r2, #127	; 0x7f
 8000e9e:	bfc2      	ittt	gt
 8000ea0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ea4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ea8:	4770      	bxgt	lr
 8000eaa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eae:	f04f 0300 	mov.w	r3, #0
 8000eb2:	3a01      	subs	r2, #1
 8000eb4:	e737      	b.n	8000d26 <__aeabi_fmul+0x92>
 8000eb6:	f092 0f00 	teq	r2, #0
 8000eba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ebe:	bf02      	ittt	eq
 8000ec0:	0040      	lsleq	r0, r0, #1
 8000ec2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ec6:	3a01      	subeq	r2, #1
 8000ec8:	d0f9      	beq.n	8000ebe <__aeabi_fdiv+0xc2>
 8000eca:	ea40 000c 	orr.w	r0, r0, ip
 8000ece:	f093 0f00 	teq	r3, #0
 8000ed2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ed6:	bf02      	ittt	eq
 8000ed8:	0049      	lsleq	r1, r1, #1
 8000eda:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ede:	3b01      	subeq	r3, #1
 8000ee0:	d0f9      	beq.n	8000ed6 <__aeabi_fdiv+0xda>
 8000ee2:	ea41 010c 	orr.w	r1, r1, ip
 8000ee6:	e795      	b.n	8000e14 <__aeabi_fdiv+0x18>
 8000ee8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eec:	ea92 0f0c 	teq	r2, ip
 8000ef0:	d108      	bne.n	8000f04 <__aeabi_fdiv+0x108>
 8000ef2:	0242      	lsls	r2, r0, #9
 8000ef4:	f47f af7d 	bne.w	8000df2 <__aeabi_fmul+0x15e>
 8000ef8:	ea93 0f0c 	teq	r3, ip
 8000efc:	f47f af70 	bne.w	8000de0 <__aeabi_fmul+0x14c>
 8000f00:	4608      	mov	r0, r1
 8000f02:	e776      	b.n	8000df2 <__aeabi_fmul+0x15e>
 8000f04:	ea93 0f0c 	teq	r3, ip
 8000f08:	d104      	bne.n	8000f14 <__aeabi_fdiv+0x118>
 8000f0a:	024b      	lsls	r3, r1, #9
 8000f0c:	f43f af4c 	beq.w	8000da8 <__aeabi_fmul+0x114>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e76e      	b.n	8000df2 <__aeabi_fmul+0x15e>
 8000f14:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f18:	bf18      	it	ne
 8000f1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f1e:	d1ca      	bne.n	8000eb6 <__aeabi_fdiv+0xba>
 8000f20:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f24:	f47f af5c 	bne.w	8000de0 <__aeabi_fmul+0x14c>
 8000f28:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f2c:	f47f af3c 	bne.w	8000da8 <__aeabi_fmul+0x114>
 8000f30:	e75f      	b.n	8000df2 <__aeabi_fmul+0x15e>
 8000f32:	bf00      	nop

08000f34 <__gesf2>:
 8000f34:	f04f 3cff 	mov.w	ip, #4294967295
 8000f38:	e006      	b.n	8000f48 <__cmpsf2+0x4>
 8000f3a:	bf00      	nop

08000f3c <__lesf2>:
 8000f3c:	f04f 0c01 	mov.w	ip, #1
 8000f40:	e002      	b.n	8000f48 <__cmpsf2+0x4>
 8000f42:	bf00      	nop

08000f44 <__cmpsf2>:
 8000f44:	f04f 0c01 	mov.w	ip, #1
 8000f48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f4c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f58:	bf18      	it	ne
 8000f5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f5e:	d011      	beq.n	8000f84 <__cmpsf2+0x40>
 8000f60:	b001      	add	sp, #4
 8000f62:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f66:	bf18      	it	ne
 8000f68:	ea90 0f01 	teqne	r0, r1
 8000f6c:	bf58      	it	pl
 8000f6e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f72:	bf88      	it	hi
 8000f74:	17c8      	asrhi	r0, r1, #31
 8000f76:	bf38      	it	cc
 8000f78:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f7c:	bf18      	it	ne
 8000f7e:	f040 0001 	orrne.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f88:	d102      	bne.n	8000f90 <__cmpsf2+0x4c>
 8000f8a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f8e:	d105      	bne.n	8000f9c <__cmpsf2+0x58>
 8000f90:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f94:	d1e4      	bne.n	8000f60 <__cmpsf2+0x1c>
 8000f96:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f9a:	d0e1      	beq.n	8000f60 <__cmpsf2+0x1c>
 8000f9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_cfrcmple>:
 8000fa4:	4684      	mov	ip, r0
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	4661      	mov	r1, ip
 8000faa:	e7ff      	b.n	8000fac <__aeabi_cfcmpeq>

08000fac <__aeabi_cfcmpeq>:
 8000fac:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fae:	f7ff ffc9 	bl	8000f44 <__cmpsf2>
 8000fb2:	2800      	cmp	r0, #0
 8000fb4:	bf48      	it	mi
 8000fb6:	f110 0f00 	cmnmi.w	r0, #0
 8000fba:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fbc <__aeabi_fcmpeq>:
 8000fbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc0:	f7ff fff4 	bl	8000fac <__aeabi_cfcmpeq>
 8000fc4:	bf0c      	ite	eq
 8000fc6:	2001      	moveq	r0, #1
 8000fc8:	2000      	movne	r0, #0
 8000fca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fce:	bf00      	nop

08000fd0 <__aeabi_fcmplt>:
 8000fd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd4:	f7ff ffea 	bl	8000fac <__aeabi_cfcmpeq>
 8000fd8:	bf34      	ite	cc
 8000fda:	2001      	movcc	r0, #1
 8000fdc:	2000      	movcs	r0, #0
 8000fde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_fcmple>:
 8000fe4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe8:	f7ff ffe0 	bl	8000fac <__aeabi_cfcmpeq>
 8000fec:	bf94      	ite	ls
 8000fee:	2001      	movls	r0, #1
 8000ff0:	2000      	movhi	r0, #0
 8000ff2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_fcmpge>:
 8000ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ffc:	f7ff ffd2 	bl	8000fa4 <__aeabi_cfrcmple>
 8001000:	bf94      	ite	ls
 8001002:	2001      	movls	r0, #1
 8001004:	2000      	movhi	r0, #0
 8001006:	f85d fb08 	ldr.w	pc, [sp], #8
 800100a:	bf00      	nop

0800100c <__aeabi_fcmpgt>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff ffc8 	bl	8000fa4 <__aeabi_cfrcmple>
 8001014:	bf34      	ite	cc
 8001016:	2001      	movcc	r0, #1
 8001018:	2000      	movcs	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_f2uiz>:
 8001020:	0042      	lsls	r2, r0, #1
 8001022:	d20e      	bcs.n	8001042 <__aeabi_f2uiz+0x22>
 8001024:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001028:	d30b      	bcc.n	8001042 <__aeabi_f2uiz+0x22>
 800102a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800102e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001032:	d409      	bmi.n	8001048 <__aeabi_f2uiz+0x28>
 8001034:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001038:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800103c:	fa23 f002 	lsr.w	r0, r3, r2
 8001040:	4770      	bx	lr
 8001042:	f04f 0000 	mov.w	r0, #0
 8001046:	4770      	bx	lr
 8001048:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800104c:	d101      	bne.n	8001052 <__aeabi_f2uiz+0x32>
 800104e:	0242      	lsls	r2, r0, #9
 8001050:	d102      	bne.n	8001058 <__aeabi_f2uiz+0x38>
 8001052:	f04f 30ff 	mov.w	r0, #4294967295
 8001056:	4770      	bx	lr
 8001058:	f04f 0000 	mov.w	r0, #0
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <HAL_UART_RxCpltCallback>:
#include "usart.h"

static uint8_t rxData[20];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0f      	ldr	r2, [pc, #60]	; (80010ac <HAL_UART_RxCpltCallback+0x4c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d117      	bne.n	80010a2 <HAL_UART_RxCpltCallback+0x42>
  {
    if(rxData[0] == 78) // Ascii value of 'N' is 78 (N for NO)
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <HAL_UART_RxCpltCallback+0x50>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b4e      	cmp	r3, #78	; 0x4e
 8001078:	d105      	bne.n	8001086 <HAL_UART_RxCpltCallback+0x26>
    {
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800107a:	2201      	movs	r2, #1
 800107c:	2102      	movs	r1, #2
 800107e:	480d      	ldr	r0, [pc, #52]	; (80010b4 <HAL_UART_RxCpltCallback+0x54>)
 8001080:	f002 f966 	bl	8003350 <HAL_GPIO_WritePin>
 8001084:	e008      	b.n	8001098 <HAL_UART_RxCpltCallback+0x38>
    }
    else if (rxData[0] ==89) // Ascii value of 'Y' is 89 (Y for YES)
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_UART_RxCpltCallback+0x50>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b59      	cmp	r3, #89	; 0x59
 800108c:	d104      	bne.n	8001098 <HAL_UART_RxCpltCallback+0x38>
    {
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2102      	movs	r1, #2
 8001092:	4808      	ldr	r0, [pc, #32]	; (80010b4 <HAL_UART_RxCpltCallback+0x54>)
 8001094:	f002 f95c 	bl	8003350 <HAL_GPIO_WritePin>
    }
    HAL_UART_Receive_IT(&huart1, rxData,20); // Enabling interrupt receive again
 8001098:	2214      	movs	r2, #20
 800109a:	4905      	ldr	r1, [pc, #20]	; (80010b0 <HAL_UART_RxCpltCallback+0x50>)
 800109c:	4806      	ldr	r0, [pc, #24]	; (80010b8 <HAL_UART_RxCpltCallback+0x58>)
 800109e:	f004 fd2c 	bl	8005afa <HAL_UART_Receive_IT>
  }
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40013800 	.word	0x40013800
 80010b0:	20000124 	.word	0x20000124
 80010b4:	40010800 	.word	0x40010800
 80010b8:	20000340 	.word	0x20000340

080010bc <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af04      	add	r7, sp, #16
 80010c2:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80010c4:	2364      	movs	r3, #100	; 0x64
 80010c6:	9302      	str	r3, [sp, #8]
 80010c8:	2301      	movs	r3, #1
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	f107 030f 	add.w	r3, r7, #15
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2301      	movs	r3, #1
 80010d4:	2275      	movs	r2, #117	; 0x75
 80010d6:	21d0      	movs	r1, #208	; 0xd0
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f002 fba9 	bl	8003830 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	2b68      	cmp	r3, #104	; 0x68
 80010e2:	d13d      	bne.n	8001160 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80010e8:	2364      	movs	r3, #100	; 0x64
 80010ea:	9302      	str	r3, [sp, #8]
 80010ec:	2301      	movs	r3, #1
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	f107 030e 	add.w	r3, r7, #14
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2301      	movs	r3, #1
 80010f8:	226b      	movs	r2, #107	; 0x6b
 80010fa:	21d0      	movs	r1, #208	; 0xd0
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f002 fa9d 	bl	800363c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001102:	2307      	movs	r3, #7
 8001104:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001106:	2364      	movs	r3, #100	; 0x64
 8001108:	9302      	str	r3, [sp, #8]
 800110a:	2301      	movs	r3, #1
 800110c:	9301      	str	r3, [sp, #4]
 800110e:	f107 030e 	add.w	r3, r7, #14
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2301      	movs	r3, #1
 8001116:	2219      	movs	r2, #25
 8001118:	21d0      	movs	r1, #208	; 0xd0
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f002 fa8e 	bl	800363c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001120:	2300      	movs	r3, #0
 8001122:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001124:	2364      	movs	r3, #100	; 0x64
 8001126:	9302      	str	r3, [sp, #8]
 8001128:	2301      	movs	r3, #1
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	f107 030e 	add.w	r3, r7, #14
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2301      	movs	r3, #1
 8001134:	221c      	movs	r2, #28
 8001136:	21d0      	movs	r1, #208	; 0xd0
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f002 fa7f 	bl	800363c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800113e:	2300      	movs	r3, #0
 8001140:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001142:	2364      	movs	r3, #100	; 0x64
 8001144:	9302      	str	r3, [sp, #8]
 8001146:	2301      	movs	r3, #1
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	f107 030e 	add.w	r3, r7, #14
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2301      	movs	r3, #1
 8001152:	221b      	movs	r2, #27
 8001154:	21d0      	movs	r1, #208	; 0xd0
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f002 fa70 	bl	800363c <HAL_I2C_Mem_Write>
        return 0;
 800115c:	2300      	movs	r3, #0
 800115e:	e000      	b.n	8001162 <MPU6050_Init+0xa6>
    }
    return 1;
 8001160:	2301      	movs	r3, #1
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	0000      	movs	r0, r0
 800116c:	0000      	movs	r0, r0
	...

08001170 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001174:	b094      	sub	sp, #80	; 0x50
 8001176:	af04      	add	r7, sp, #16
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800117c:	2364      	movs	r3, #100	; 0x64
 800117e:	9302      	str	r3, [sp, #8]
 8001180:	230e      	movs	r3, #14
 8001182:	9301      	str	r3, [sp, #4]
 8001184:	f107 0308 	add.w	r3, r7, #8
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	223b      	movs	r2, #59	; 0x3b
 800118e:	21d0      	movs	r1, #208	; 0xd0
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f002 fb4d 	bl	8003830 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001196:	7a3b      	ldrb	r3, [r7, #8]
 8001198:	021b      	lsls	r3, r3, #8
 800119a:	b21a      	sxth	r2, r3
 800119c:	7a7b      	ldrb	r3, [r7, #9]
 800119e:	b21b      	sxth	r3, r3
 80011a0:	4313      	orrs	r3, r2
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80011a8:	7abb      	ldrb	r3, [r7, #10]
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	b21a      	sxth	r2, r3
 80011ae:	7afb      	ldrb	r3, [r7, #11]
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	4313      	orrs	r3, r2
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80011ba:	7b3b      	ldrb	r3, [r7, #12]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	b21a      	sxth	r2, r3
 80011c0:	7b7b      	ldrb	r3, [r7, #13]
 80011c2:	b21b      	sxth	r3, r3
 80011c4:	4313      	orrs	r3, r2
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80011cc:	7bbb      	ldrb	r3, [r7, #14]
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	4313      	orrs	r3, r2
 80011d8:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80011da:	7c3b      	ldrb	r3, [r7, #16]
 80011dc:	021b      	lsls	r3, r3, #8
 80011de:	b21a      	sxth	r2, r3
 80011e0:	7c7b      	ldrb	r3, [r7, #17]
 80011e2:	b21b      	sxth	r3, r3
 80011e4:	4313      	orrs	r3, r2
 80011e6:	b21a      	sxth	r2, r3
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80011ec:	7cbb      	ldrb	r3, [r7, #18]
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	b21a      	sxth	r2, r3
 80011f2:	7cfb      	ldrb	r3, [r7, #19]
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80011fe:	7d3b      	ldrb	r3, [r7, #20]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b21a      	sxth	r2, r3
 8001204:	7d7b      	ldrb	r3, [r7, #21]
 8001206:	b21b      	sxth	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	b21a      	sxth	r2, r3
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff f8ec 	bl	80003f4 <__aeabi_i2d>
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	4b95      	ldr	r3, [pc, #596]	; (8001478 <MPU6050_Read_All+0x308>)
 8001222:	f7ff fa7b 	bl	800071c <__aeabi_ddiv>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	6839      	ldr	r1, [r7, #0]
 800122c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f8dc 	bl	80003f4 <__aeabi_i2d>
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	4b8d      	ldr	r3, [pc, #564]	; (8001478 <MPU6050_Read_All+0x308>)
 8001242:	f7ff fa6b 	bl	800071c <__aeabi_ddiv>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	6839      	ldr	r1, [r7, #0]
 800124c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f8cc 	bl	80003f4 <__aeabi_i2d>
 800125c:	a380      	add	r3, pc, #512	; (adr r3, 8001460 <MPU6050_Read_All+0x2f0>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	f7ff fa5b 	bl	800071c <__aeabi_ddiv>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	6839      	ldr	r1, [r7, #0]
 800126c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001270:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fcb9 	bl	8000bec <__aeabi_i2f>
 800127a:	4603      	mov	r3, r0
 800127c:	497f      	ldr	r1, [pc, #508]	; (800147c <MPU6050_Read_All+0x30c>)
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fdbc 	bl	8000dfc <__aeabi_fdiv>
 8001284:	4603      	mov	r3, r0
 8001286:	497e      	ldr	r1, [pc, #504]	; (8001480 <MPU6050_Read_All+0x310>)
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fbfb 	bl	8000a84 <__addsf3>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f8a9 	bl	80003f4 <__aeabi_i2d>
 80012a2:	a371      	add	r3, pc, #452	; (adr r3, 8001468 <MPU6050_Read_All+0x2f8>)
 80012a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a8:	f7ff fa38 	bl	800071c <__aeabi_ddiv>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	6839      	ldr	r1, [r7, #0]
 80012b2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f899 	bl	80003f4 <__aeabi_i2d>
 80012c2:	a369      	add	r3, pc, #420	; (adr r3, 8001468 <MPU6050_Read_All+0x2f8>)
 80012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c8:	f7ff fa28 	bl	800071c <__aeabi_ddiv>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	6839      	ldr	r1, [r7, #0]
 80012d2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f889 	bl	80003f4 <__aeabi_i2d>
 80012e2:	a361      	add	r3, pc, #388	; (adr r3, 8001468 <MPU6050_Read_All+0x2f8>)
 80012e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e8:	f7ff fa18 	bl	800071c <__aeabi_ddiv>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	6839      	ldr	r1, [r7, #0]
 80012f2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80012f6:	f001 fcb9 	bl	8002c6c <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	4b61      	ldr	r3, [pc, #388]	; (8001484 <MPU6050_Read_All+0x314>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f866 	bl	80003d4 <__aeabi_ui2d>
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	4b5e      	ldr	r3, [pc, #376]	; (8001488 <MPU6050_Read_All+0x318>)
 800130e:	f7ff fa05 	bl	800071c <__aeabi_ddiv>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 800131a:	f001 fca7 	bl	8002c6c <HAL_GetTick>
 800131e:	4603      	mov	r3, r0
 8001320:	4a58      	ldr	r2, [pc, #352]	; (8001484 <MPU6050_Read_All+0x314>)
 8001322:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132a:	461a      	mov	r2, r3
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001332:	fb03 f202 	mul.w	r2, r3, r2
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800133c:	4619      	mov	r1, r3
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001344:	fb01 f303 	mul.w	r3, r1, r3
 8001348:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f852 	bl	80003f4 <__aeabi_i2d>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	f005 fab5 	bl	80068c6 <sqrt>
 800135c:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	f04f 0300 	mov.w	r3, #0
 8001368:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800136c:	f7ff fb14 	bl	8000998 <__aeabi_dcmpeq>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d119      	bne.n	80013aa <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f839 	bl	80003f4 <__aeabi_i2d>
 8001382:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001386:	f7ff f9c9 	bl	800071c <__aeabi_ddiv>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4610      	mov	r0, r2
 8001390:	4619      	mov	r1, r3
 8001392:	f005 f909 	bl	80065a8 <atan>
 8001396:	a336      	add	r3, pc, #216	; (adr r3, 8001470 <MPU6050_Read_All+0x300>)
 8001398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139c:	f7ff f894 	bl	80004c8 <__aeabi_dmul>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80013a8:	e005      	b.n	80013b6 <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	f04f 0300 	mov.w	r3, #0
 80013b2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013bc:	425b      	negs	r3, r3
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f818 	bl	80003f4 <__aeabi_i2d>
 80013c4:	4682      	mov	sl, r0
 80013c6:	468b      	mov	fp, r1
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f810 	bl	80003f4 <__aeabi_i2d>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4650      	mov	r0, sl
 80013da:	4659      	mov	r1, fp
 80013dc:	f005 fa71 	bl	80068c2 <atan2>
 80013e0:	a323      	add	r3, pc, #140	; (adr r3, 8001470 <MPU6050_Read_All+0x300>)
 80013e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e6:	f7ff f86f 	bl	80004c8 <__aeabi_dmul>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	4b25      	ldr	r3, [pc, #148]	; (800148c <MPU6050_Read_All+0x31c>)
 80013f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013fc:	f7ff fad6 	bl	80009ac <__aeabi_dcmplt>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00a      	beq.n	800141c <MPU6050_Read_All+0x2ac>
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <MPU6050_Read_All+0x320>)
 8001412:	f7ff fae9 	bl	80009e8 <__aeabi_dcmpgt>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d114      	bne.n	8001446 <MPU6050_Read_All+0x2d6>
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <MPU6050_Read_All+0x320>)
 8001422:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001426:	f7ff fadf 	bl	80009e8 <__aeabi_dcmpgt>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d033      	beq.n	8001498 <MPU6050_Read_All+0x328>
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	4b14      	ldr	r3, [pc, #80]	; (800148c <MPU6050_Read_All+0x31c>)
 800143c:	f7ff fab6 	bl	80009ac <__aeabi_dcmplt>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d028      	beq.n	8001498 <MPU6050_Read_All+0x328>
    {
        KalmanY.angle = pitch;
 8001446:	4913      	ldr	r1, [pc, #76]	; (8001494 <MPU6050_Read_All+0x324>)
 8001448:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800144c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001450:	6839      	ldr	r1, [r7, #0]
 8001452:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001456:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800145a:	e030      	b.n	80014be <MPU6050_Read_All+0x34e>
 800145c:	f3af 8000 	nop.w
 8001460:	00000000 	.word	0x00000000
 8001464:	40cc2900 	.word	0x40cc2900
 8001468:	00000000 	.word	0x00000000
 800146c:	40606000 	.word	0x40606000
 8001470:	1a63c1f8 	.word	0x1a63c1f8
 8001474:	404ca5dc 	.word	0x404ca5dc
 8001478:	40d00000 	.word	0x40d00000
 800147c:	43aa0000 	.word	0x43aa0000
 8001480:	42121eb8 	.word	0x42121eb8
 8001484:	20000138 	.word	0x20000138
 8001488:	408f4000 	.word	0x408f4000
 800148c:	c0568000 	.word	0xc0568000
 8001490:	40568000 	.word	0x40568000
 8001494:	20000048 	.word	0x20000048
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800149e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80014a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80014a6:	e9cd 2300 	strd	r2, r3, [sp]
 80014aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014ae:	481c      	ldr	r0, [pc, #112]	; (8001520 <MPU6050_Read_All+0x3b0>)
 80014b0:	f000 f83c 	bl	800152c <Kalman_getAngle>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	6839      	ldr	r1, [r7, #0]
 80014ba:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80014c4:	4690      	mov	r8, r2
 80014c6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <MPU6050_Read_All+0x3b4>)
 80014d0:	4640      	mov	r0, r8
 80014d2:	4649      	mov	r1, r9
 80014d4:	f7ff fa88 	bl	80009e8 <__aeabi_dcmpgt>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d008      	beq.n	80014f0 <MPU6050_Read_All+0x380>
        DataStruct->Gx = -DataStruct->Gx;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80014e4:	4614      	mov	r4, r2
 80014e6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80014f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80014fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80014fe:	e9cd 2300 	strd	r2, r3, [sp]
 8001502:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001506:	4808      	ldr	r0, [pc, #32]	; (8001528 <MPU6050_Read_All+0x3b8>)
 8001508:	f000 f810 	bl	800152c <Kalman_getAngle>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	6839      	ldr	r1, [r7, #0]
 8001512:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8001516:	bf00      	nop
 8001518:	3740      	adds	r7, #64	; 0x40
 800151a:	46bd      	mov	sp, r7
 800151c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001520:	20000048 	.word	0x20000048
 8001524:	40568000 	.word	0x40568000
 8001528:	20000000 	.word	0x20000000

0800152c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 800152c:	b5b0      	push	{r4, r5, r7, lr}
 800152e:	b092      	sub	sp, #72	; 0x48
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800153e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001542:	f7fe fe09 	bl	8000158 <__aeabi_dsub>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001554:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001558:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800155c:	f7fe ffb4 	bl	80004c8 <__aeabi_dmul>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4620      	mov	r0, r4
 8001566:	4629      	mov	r1, r5
 8001568:	f7fe fdf8 	bl	800015c <__adddf3>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	68f9      	ldr	r1, [r7, #12]
 8001572:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001582:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001586:	f7fe ff9f 	bl	80004c8 <__aeabi_dmul>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4610      	mov	r0, r2
 8001590:	4619      	mov	r1, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001598:	f7fe fdde 	bl	8000158 <__aeabi_dsub>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80015aa:	f7fe fdd5 	bl	8000158 <__aeabi_dsub>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015bc:	f7fe fdce 	bl	800015c <__adddf3>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4610      	mov	r0, r2
 80015c6:	4619      	mov	r1, r3
 80015c8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80015cc:	f7fe ff7c 	bl	80004c8 <__aeabi_dmul>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4620      	mov	r0, r4
 80015d6:	4629      	mov	r1, r5
 80015d8:	f7fe fdc0 	bl	800015c <__adddf3>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	68f9      	ldr	r1, [r7, #12]
 80015e2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80015f2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80015f6:	f7fe ff67 	bl	80004c8 <__aeabi_dmul>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4620      	mov	r0, r4
 8001600:	4629      	mov	r1, r5
 8001602:	f7fe fda9 	bl	8000158 <__aeabi_dsub>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	68f9      	ldr	r1, [r7, #12]
 800160c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800161c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001620:	f7fe ff52 	bl	80004c8 <__aeabi_dmul>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4620      	mov	r0, r4
 800162a:	4629      	mov	r1, r5
 800162c:	f7fe fd94 	bl	8000158 <__aeabi_dsub>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	68f9      	ldr	r1, [r7, #12]
 8001636:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001646:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800164a:	f7fe ff3d 	bl	80004c8 <__aeabi_dmul>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4620      	mov	r0, r4
 8001654:	4629      	mov	r1, r5
 8001656:	f7fe fd81 	bl	800015c <__adddf3>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	68f9      	ldr	r1, [r7, #12]
 8001660:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001670:	f7fe fd74 	bl	800015c <__adddf3>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001682:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001686:	f7ff f849 	bl	800071c <__aeabi_ddiv>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001698:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800169c:	f7ff f83e 	bl	800071c <__aeabi_ddiv>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80016ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016b2:	f7fe fd51 	bl	8000158 <__aeabi_dsub>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80016c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80016cc:	f7fe fefc 	bl	80004c8 <__aeabi_dmul>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4620      	mov	r0, r4
 80016d6:	4629      	mov	r1, r5
 80016d8:	f7fe fd40 	bl	800015c <__adddf3>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	68f9      	ldr	r1, [r7, #12]
 80016e2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80016ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80016f4:	f7fe fee8 	bl	80004c8 <__aeabi_dmul>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4620      	mov	r0, r4
 80016fe:	4629      	mov	r1, r5
 8001700:	f7fe fd2c 	bl	800015c <__adddf3>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	68f9      	ldr	r1, [r7, #12]
 800170a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001714:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800171e:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001728:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800172c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001730:	f7fe feca 	bl	80004c8 <__aeabi_dmul>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4620      	mov	r0, r4
 800173a:	4629      	mov	r1, r5
 800173c:	f7fe fd0c 	bl	8000158 <__aeabi_dsub>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	68f9      	ldr	r1, [r7, #12]
 8001746:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001750:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001754:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001758:	f7fe feb6 	bl	80004c8 <__aeabi_dmul>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4620      	mov	r0, r4
 8001762:	4629      	mov	r1, r5
 8001764:	f7fe fcf8 	bl	8000158 <__aeabi_dsub>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	68f9      	ldr	r1, [r7, #12]
 800176e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001778:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800177c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001780:	f7fe fea2 	bl	80004c8 <__aeabi_dmul>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4620      	mov	r0, r4
 800178a:	4629      	mov	r1, r5
 800178c:	f7fe fce4 	bl	8000158 <__aeabi_dsub>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	68f9      	ldr	r1, [r7, #12]
 8001796:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80017a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017a8:	f7fe fe8e 	bl	80004c8 <__aeabi_dmul>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4620      	mov	r0, r4
 80017b2:	4629      	mov	r1, r5
 80017b4:	f7fe fcd0 	bl	8000158 <__aeabi_dsub>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	68f9      	ldr	r1, [r7, #12]
 80017be:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
}
 80017c8:	4610      	mov	r0, r2
 80017ca:	4619      	mov	r1, r3
 80017cc:	3748      	adds	r7, #72	; 0x48
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080017d4 <_Z41__static_initialization_and_destruction_0ii>:
			RightMotor.isForward = false;
		}
		RightMotor.duration--;
	}

}
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d110      	bne.n	8001806 <_Z41__static_initialization_and_destruction_0ii+0x32>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d10b      	bne.n	8001806 <_Z41__static_initialization_and_destruction_0ii+0x32>
#define RightMotorTimer	&htim2
#define SpeedCalculation &htim3


#include "MotorEncoder.hpp"
static MotorEncoder LeftMotor(LeftMotorTimer, TIM_CHANNEL_1 ,TIM_CHANNEL_2);
 80017ee:	2304      	movs	r3, #4
 80017f0:	2200      	movs	r2, #0
 80017f2:	490e      	ldr	r1, [pc, #56]	; (800182c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80017f4:	480e      	ldr	r0, [pc, #56]	; (8001830 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80017f6:	f000 f831 	bl	800185c <_ZN12MotorEncoderC1EP17TIM_HandleTypeDeftt>
static MotorEncoder RightMotor(RightMotorTimer, TIM_CHANNEL_1 ,TIM_CHANNEL_2);
 80017fa:	2304      	movs	r3, #4
 80017fc:	2200      	movs	r2, #0
 80017fe:	490d      	ldr	r1, [pc, #52]	; (8001834 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001800:	480d      	ldr	r0, [pc, #52]	; (8001838 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001802:	f000 f82b 	bl	800185c <_ZN12MotorEncoderC1EP17TIM_HandleTypeDeftt>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10a      	bne.n	8001822 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001812:	4293      	cmp	r3, r2
 8001814:	d105      	bne.n	8001822 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8001816:	4808      	ldr	r0, [pc, #32]	; (8001838 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001818:	f000 f860 	bl	80018dc <_ZN12MotorEncoderD1Ev>
static MotorEncoder LeftMotor(LeftMotorTimer, TIM_CHANNEL_1 ,TIM_CHANNEL_2);
 800181c:	4804      	ldr	r0, [pc, #16]	; (8001830 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800181e:	f000 f85d 	bl	80018dc <_ZN12MotorEncoderD1Ev>
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000220 	.word	0x20000220
 8001830:	2000013c 	.word	0x2000013c
 8001834:	20000268 	.word	0x20000268
 8001838:	20000158 	.word	0x20000158

0800183c <_GLOBAL__sub_I_HAL_GPIO_EXTI_Callback>:
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
 8001840:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001844:	2001      	movs	r0, #1
 8001846:	f7ff ffc5 	bl	80017d4 <_Z41__static_initialization_and_destruction_0ii>
 800184a:	bd80      	pop	{r7, pc}

0800184c <_GLOBAL__sub_D_HAL_GPIO_EXTI_Callback>:
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
 8001850:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001854:	2000      	movs	r0, #0
 8001856:	f7ff ffbd 	bl	80017d4 <_Z41__static_initialization_and_destruction_0ii>
 800185a:	bd80      	pop	{r7, pc}

0800185c <_ZN12MotorEncoderC1EP17TIM_HandleTypeDeftt>:

#include "../Inc/MotorEncoder.hpp"

#define SpeedCalTimer &htim3

MotorEncoder::MotorEncoder(TIM_HandleTypeDef* timer, uint16_t timer_channelA, uint16_t timer_channelB)
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b087      	sub	sp, #28
 8001860:	af02      	add	r7, sp, #8
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	4611      	mov	r1, r2
 8001868:	461a      	mov	r2, r3
 800186a:	460b      	mov	r3, r1
 800186c:	80fb      	strh	r3, [r7, #6]
 800186e:	4613      	mov	r3, r2
 8001870:	80bb      	strh	r3, [r7, #4]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4a18      	ldr	r2, [pc, #96]	; (80018d8 <_ZN12MotorEncoderC1EP17TIM_HandleTypeDeftt+0x7c>)
 8001876:	611a      	str	r2, [r3, #16]
{
	motorSpeed = 0;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
	prev_speed_timer_val = 0;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
	duration = 0;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	615a      	str	r2, [r3, #20]
	isForward = true;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2201      	movs	r2, #1
 8001890:	761a      	strb	r2, [r3, #24]
	forwardPWM = new PWMChannel(0, nullptr,timer, timer_channelA);
 8001892:	2014      	movs	r0, #20
 8001894:	f004 fe6a 	bl	800656c <_Znwj>
 8001898:	4603      	mov	r3, r0
 800189a:	461c      	mov	r4, r3
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	4620      	mov	r0, r4
 80018a8:	f000 f86e 	bl	8001988 <_ZN10PWMChannelC1EtP12GPIO_TypeDefP17TIM_HandleTypeDeft>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	605c      	str	r4, [r3, #4]
	reversePWM = new PWMChannel(0, nullptr,timer, timer_channelB);
 80018b0:	2014      	movs	r0, #20
 80018b2:	f004 fe5b 	bl	800656c <_Znwj>
 80018b6:	4603      	mov	r3, r0
 80018b8:	461c      	mov	r4, r3
 80018ba:	88bb      	ldrh	r3, [r7, #4]
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	2200      	movs	r2, #0
 80018c2:	2100      	movs	r1, #0
 80018c4:	4620      	mov	r0, r4
 80018c6:	f000 f85f 	bl	8001988 <_ZN10PWMChannelC1EtP12GPIO_TypeDefP17TIM_HandleTypeDeft>
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	609c      	str	r4, [r3, #8]
}
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4618      	mov	r0, r3
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd90      	pop	{r4, r7, pc}
 80018d8:	3a03126f 	.word	0x3a03126f

080018dc <_ZN12MotorEncoderD1Ev>:

MotorEncoder::~MotorEncoder()
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
{
	delete forwardPWM;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <_ZN12MotorEncoderD1Ev+0x18>
 80018ec:	2114      	movs	r1, #20
 80018ee:	4618      	mov	r0, r3
 80018f0:	f004 fe3a 	bl	8006568 <_ZdlPvj>
	delete reversePWM;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <_ZN12MotorEncoderD1Ev+0x28>
 80018fc:	2114      	movs	r1, #20
 80018fe:	4618      	mov	r0, r3
 8001900:	f004 fe32 	bl	8006568 <_ZdlPvj>
}
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <_ZN12MotorEncoder13setWheelSpeedEf>:
	motorSpeed = distance / second;
	return motorSpeed;
}

void MotorEncoder::setWheelSpeed(float percentage)
{
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
	if(percentage > 100 || percentage < -100 )
 800191a:	4919      	ldr	r1, [pc, #100]	; (8001980 <_ZN12MotorEncoder13setWheelSpeedEf+0x70>)
 800191c:	6838      	ldr	r0, [r7, #0]
 800191e:	f7ff fb75 	bl	800100c <__aeabi_fcmpgt>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d126      	bne.n	8001976 <_ZN12MotorEncoder13setWheelSpeedEf+0x66>
 8001928:	4916      	ldr	r1, [pc, #88]	; (8001984 <_ZN12MotorEncoder13setWheelSpeedEf+0x74>)
 800192a:	6838      	ldr	r0, [r7, #0]
 800192c:	f7ff fb50 	bl	8000fd0 <__aeabi_fcmplt>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d11f      	bne.n	8001976 <_ZN12MotorEncoder13setWheelSpeedEf+0x66>
	{
		return;
	}
	else if (percentage > 0)
 8001936:	f04f 0100 	mov.w	r1, #0
 800193a:	6838      	ldr	r0, [r7, #0]
 800193c:	f7ff fb66 	bl	800100c <__aeabi_fcmpgt>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00b      	beq.n	800195e <_ZN12MotorEncoder13setWheelSpeedEf+0x4e>
	{
		forwardPWM->set(percentage);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685c      	ldr	r4, [r3, #4]
 800194a:	6838      	ldr	r0, [r7, #0]
 800194c:	f7ff fb68 	bl	8001020 <__aeabi_f2uiz>
 8001950:	4603      	mov	r3, r0
 8001952:	b2db      	uxtb	r3, r3
 8001954:	4619      	mov	r1, r3
 8001956:	4620      	mov	r0, r4
 8001958:	f000 f830 	bl	80019bc <_ZN10PWMChannel3setEh>
 800195c:	e00c      	b.n	8001978 <_ZN12MotorEncoder13setWheelSpeedEf+0x68>
	}
	else
	{
		reversePWM->set(percentage);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689c      	ldr	r4, [r3, #8]
 8001962:	6838      	ldr	r0, [r7, #0]
 8001964:	f7ff fb5c 	bl	8001020 <__aeabi_f2uiz>
 8001968:	4603      	mov	r3, r0
 800196a:	b2db      	uxtb	r3, r3
 800196c:	4619      	mov	r1, r3
 800196e:	4620      	mov	r0, r4
 8001970:	f000 f824 	bl	80019bc <_ZN10PWMChannel3setEh>
 8001974:	e000      	b.n	8001978 <_ZN12MotorEncoder13setWheelSpeedEf+0x68>
		return;
 8001976:	bf00      	nop
	}
}
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	bd90      	pop	{r4, r7, pc}
 800197e:	bf00      	nop
 8001980:	42c80000 	.word	0x42c80000
 8001984:	c2c80000 	.word	0xc2c80000

08001988 <_ZN10PWMChannelC1EtP12GPIO_TypeDefP17TIM_HandleTypeDeft>:

/* Example
 * PWMChannel pwmChannel = PWMChannel(0, nullptr,&htim2, TIM_CHANNEL_1);
 * */

PWMChannel::PWMChannel(uint16_t pin_num, GPIO_TypeDef* port, TIM_HandleTypeDef* timer,
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	607a      	str	r2, [r7, #4]
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	460b      	mov	r3, r1
 8001996:	817b      	strh	r3, [r7, #10]
                       uint16_t timer_channel)
    : pin_num_(pin_num), port_(port), timer_(timer), timer_channel_(timer_channel) {}
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	897a      	ldrh	r2, [r7, #10]
 800199c:	801a      	strh	r2, [r3, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8b3a      	ldrh	r2, [r7, #24]
 80019ae:	819a      	strh	r2, [r3, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4618      	mov	r0, r3
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <_ZN10PWMChannel3setEh>:

    HAL_TIM_PWM_Start(timer_, timer_channel_);

}

void PWMChannel::set(uint8_t percent) {
 80019bc:	b590      	push	{r4, r7, lr}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	70fb      	strb	r3, [r7, #3]
    if (percent > 100) {
 80019c8:	78fb      	ldrb	r3, [r7, #3]
 80019ca:	2b64      	cmp	r3, #100	; 0x64
 80019cc:	d849      	bhi.n	8001a62 <_ZN10PWMChannel3setEh+0xa6>
        return;
    }

    uint32_t us = (percent * (MAX_SIGNAL - MIN_SIGNAL)) / 100 + MIN_SIGNAL;
 80019ce:	78fb      	ldrb	r3, [r7, #3]
 80019d0:	f240 424c 	movw	r2, #1100	; 0x44c
 80019d4:	fb02 f303 	mul.w	r3, r2, r3
 80019d8:	4a24      	ldr	r2, [pc, #144]	; (8001a6c <_ZN10PWMChannel3setEh+0xb0>)
 80019da:	fba2 2303 	umull	r2, r3, r2, r3
 80019de:	095b      	lsrs	r3, r3, #5
 80019e0:	f203 33b6 	addw	r3, r3, #950	; 0x3b6
 80019e4:	60fb      	str	r3, [r7, #12]
    uint32_t ticks =
        static_cast<uint32_t>((static_cast<float>(us) / static_cast<float>(PWM_PERIOD)) *
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f7ff f8fc 	bl	8000be4 <__aeabi_ui2f>
 80019ec:	4603      	mov	r3, r0
 80019ee:	4920      	ldr	r1, [pc, #128]	; (8001a70 <_ZN10PWMChannel3setEh+0xb4>)
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fa03 	bl	8000dfc <__aeabi_fdiv>
 80019f6:	4603      	mov	r3, r0
 80019f8:	461c      	mov	r4, r3
                              static_cast<float>(period_ticks_));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff f8f0 	bl	8000be4 <__aeabi_ui2f>
 8001a04:	4603      	mov	r3, r0
        static_cast<uint32_t>((static_cast<float>(us) / static_cast<float>(PWM_PERIOD)) *
 8001a06:	4619      	mov	r1, r3
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f7ff f943 	bl	8000c94 <__aeabi_fmul>
 8001a0e:	4603      	mov	r3, r0
    uint32_t ticks =
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fb05 	bl	8001020 <__aeabi_f2uiz>
 8001a16:	4603      	mov	r3, r0
 8001a18:	60bb      	str	r3, [r7, #8]

    __HAL_TIM_SET_COMPARE(timer_, timer_channel_, ticks);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	899b      	ldrh	r3, [r3, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d105      	bne.n	8001a2e <_ZN10PWMChannel3setEh+0x72>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	635a      	str	r2, [r3, #52]	; 0x34
 8001a2c:	e01a      	b.n	8001a64 <_ZN10PWMChannel3setEh+0xa8>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	899b      	ldrh	r3, [r3, #12]
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	d105      	bne.n	8001a42 <_ZN10PWMChannel3setEh+0x86>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68ba      	ldr	r2, [r7, #8]
 8001a3e:	639a      	str	r2, [r3, #56]	; 0x38
 8001a40:	e010      	b.n	8001a64 <_ZN10PWMChannel3setEh+0xa8>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	899b      	ldrh	r3, [r3, #12]
 8001a46:	2b08      	cmp	r3, #8
 8001a48:	d105      	bne.n	8001a56 <_ZN10PWMChannel3setEh+0x9a>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a54:	e006      	b.n	8001a64 <_ZN10PWMChannel3setEh+0xa8>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	641a      	str	r2, [r3, #64]	; 0x40
 8001a60:	e000      	b.n	8001a64 <_ZN10PWMChannel3setEh+0xa8>
        return;
 8001a62:	bf00      	nop
}
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd90      	pop	{r4, r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	51eb851f 	.word	0x51eb851f
 8001a70:	469c4000 	.word	0x469c4000

08001a74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7a:	f107 0310 	add.w	r3, r7, #16
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a88:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <MX_GPIO_Init+0x90>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	4a1d      	ldr	r2, [pc, #116]	; (8001b04 <MX_GPIO_Init+0x90>)
 8001a8e:	f043 0310 	orr.w	r3, r3, #16
 8001a92:	6193      	str	r3, [r2, #24]
 8001a94:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <MX_GPIO_Init+0x90>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	f003 0310 	and.w	r3, r3, #16
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa0:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <MX_GPIO_Init+0x90>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	4a17      	ldr	r2, [pc, #92]	; (8001b04 <MX_GPIO_Init+0x90>)
 8001aa6:	f043 0304 	orr.w	r3, r3, #4
 8001aaa:	6193      	str	r3, [r2, #24]
 8001aac:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <MX_GPIO_Init+0x90>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <MX_GPIO_Init+0x90>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	4a11      	ldr	r2, [pc, #68]	; (8001b04 <MX_GPIO_Init+0x90>)
 8001abe:	f043 0308 	orr.w	r3, r3, #8
 8001ac2:	6193      	str	r3, [r2, #24]
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <MX_GPIO_Init+0x90>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f003 0308 	and.w	r3, r3, #8
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ad6:	480c      	ldr	r0, [pc, #48]	; (8001b08 <MX_GPIO_Init+0x94>)
 8001ad8:	f001 fc3a 	bl	8003350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001adc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ae0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2302      	movs	r3, #2
 8001aec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aee:	f107 0310 	add.w	r3, r7, #16
 8001af2:	4619      	mov	r1, r3
 8001af4:	4804      	ldr	r0, [pc, #16]	; (8001b08 <MX_GPIO_Init+0x94>)
 8001af6:	f001 faa7 	bl	8003048 <HAL_GPIO_Init>

}
 8001afa:	bf00      	nop
 8001afc:	3720      	adds	r7, #32
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40011000 	.word	0x40011000

08001b0c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b12:	4a13      	ldr	r2, [pc, #76]	; (8001b60 <MX_I2C1_Init+0x54>)
 8001b14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b18:	4a12      	ldr	r2, [pc, #72]	; (8001b64 <MX_I2C1_Init+0x58>)
 8001b1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b30:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b3c:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b48:	4804      	ldr	r0, [pc, #16]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b4a:	f001 fc33 	bl	80033b4 <HAL_I2C_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b54:	f000 f988 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000174 	.word	0x20000174
 8001b60:	40005400 	.word	0x40005400
 8001b64:	000186a0 	.word	0x000186a0

08001b68 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <MX_I2C2_Init+0x50>)
 8001b6e:	4a13      	ldr	r2, [pc, #76]	; (8001bbc <MX_I2C2_Init+0x54>)
 8001b70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <MX_I2C2_Init+0x50>)
 8001b74:	4a12      	ldr	r2, [pc, #72]	; (8001bc0 <MX_I2C2_Init+0x58>)
 8001b76:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b78:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <MX_I2C2_Init+0x50>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <MX_I2C2_Init+0x50>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <MX_I2C2_Init+0x50>)
 8001b86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b8a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b8c:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <MX_I2C2_Init+0x50>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <MX_I2C2_Init+0x50>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b98:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <MX_I2C2_Init+0x50>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <MX_I2C2_Init+0x50>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ba4:	4804      	ldr	r0, [pc, #16]	; (8001bb8 <MX_I2C2_Init+0x50>)
 8001ba6:	f001 fc05 	bl	80033b4 <HAL_I2C_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001bb0:	f000 f95a 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	200001c8 	.word	0x200001c8
 8001bbc:	40005800 	.word	0x40005800
 8001bc0:	00061a80 	.word	0x00061a80

08001bc4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08c      	sub	sp, #48	; 0x30
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 031c 	add.w	r3, r7, #28
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a32      	ldr	r2, [pc, #200]	; (8001ca8 <HAL_I2C_MspInit+0xe4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d133      	bne.n	8001c4c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be4:	4b31      	ldr	r3, [pc, #196]	; (8001cac <HAL_I2C_MspInit+0xe8>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	4a30      	ldr	r2, [pc, #192]	; (8001cac <HAL_I2C_MspInit+0xe8>)
 8001bea:	f043 0308 	orr.w	r3, r3, #8
 8001bee:	6193      	str	r3, [r2, #24]
 8001bf0:	4b2e      	ldr	r3, [pc, #184]	; (8001cac <HAL_I2C_MspInit+0xe8>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	61bb      	str	r3, [r7, #24]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bfc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c02:	2312      	movs	r3, #18
 8001c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c06:	2303      	movs	r3, #3
 8001c08:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0a:	f107 031c 	add.w	r3, r7, #28
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4827      	ldr	r0, [pc, #156]	; (8001cb0 <HAL_I2C_MspInit+0xec>)
 8001c12:	f001 fa19 	bl	8003048 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001c16:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <HAL_I2C_MspInit+0xf0>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c26:	f043 0302 	orr.w	r3, r3, #2
 8001c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c2c:	4a21      	ldr	r2, [pc, #132]	; (8001cb4 <HAL_I2C_MspInit+0xf0>)
 8001c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c30:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c32:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <HAL_I2C_MspInit+0xe8>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	4a1d      	ldr	r2, [pc, #116]	; (8001cac <HAL_I2C_MspInit+0xe8>)
 8001c38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c3c:	61d3      	str	r3, [r2, #28]
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <HAL_I2C_MspInit+0xe8>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001c4a:	e029      	b.n	8001ca0 <HAL_I2C_MspInit+0xdc>
  else if(i2cHandle->Instance==I2C2)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a19      	ldr	r2, [pc, #100]	; (8001cb8 <HAL_I2C_MspInit+0xf4>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d124      	bne.n	8001ca0 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <HAL_I2C_MspInit+0xe8>)
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	4a14      	ldr	r2, [pc, #80]	; (8001cac <HAL_I2C_MspInit+0xe8>)
 8001c5c:	f043 0308 	orr.w	r3, r3, #8
 8001c60:	6193      	str	r3, [r2, #24]
 8001c62:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_I2C_MspInit+0xe8>)
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c6e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c74:	2312      	movs	r3, #18
 8001c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	4619      	mov	r1, r3
 8001c82:	480b      	ldr	r0, [pc, #44]	; (8001cb0 <HAL_I2C_MspInit+0xec>)
 8001c84:	f001 f9e0 	bl	8003048 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c88:	4b08      	ldr	r3, [pc, #32]	; (8001cac <HAL_I2C_MspInit+0xe8>)
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	4a07      	ldr	r2, [pc, #28]	; (8001cac <HAL_I2C_MspInit+0xe8>)
 8001c8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c92:	61d3      	str	r3, [r2, #28]
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <HAL_I2C_MspInit+0xe8>)
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ca0:	bf00      	nop
 8001ca2:	3730      	adds	r7, #48	; 0x30
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40005400 	.word	0x40005400
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40010c00 	.word	0x40010c00
 8001cb4:	40010000 	.word	0x40010000
 8001cb8:	40005800 	.word	0x40005800

08001cbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b0aa      	sub	sp, #168	; 0xa8
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cc2:	f000 ff7b 	bl	8002bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cc6:	f000 f851 	bl	8001d6c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cca:	f7ff fed3 	bl	8001a74 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001cce:	f7ff ff1d 	bl	8001b0c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001cd2:	f7ff ff49 	bl	8001b68 <MX_I2C2_Init>
  MX_TIM1_Init();
 8001cd6:	f000 f98f 	bl	8001ff8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001cda:	f000 fa3b 	bl	8002154 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001cde:	f000 fabb 	bl	8002258 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001ce2:	f000 fb4f 	bl	8002384 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001ce6:	f000 fc81 	bl	80025ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8001cea:	f000 fd69 	bl	80027c0 <ssd1306_Init>
  MPU6050_Init(&hi2c1);
 8001cee:	481a      	ldr	r0, [pc, #104]	; (8001d58 <main+0x9c>)
 8001cf0:	f7ff f9e4 	bl	80010bc <MPU6050_Init>
  MotorEncoder LMotor(&htim1, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001cf4:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8001cf8:	2304      	movs	r3, #4
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	4917      	ldr	r1, [pc, #92]	; (8001d5c <main+0xa0>)
 8001cfe:	f7ff fdad 	bl	800185c <_ZN12MotorEncoderC1EP17TIM_HandleTypeDeftt>
  char sentence[50];
  MPU6050_t imu{
 8001d02:	463b      	mov	r3, r7
 8001d04:	2258      	movs	r2, #88	; 0x58
 8001d06:	2100      	movs	r1, #0
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f004 ffed 	bl	8006ce8 <memset>
 8001d0e:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <main+0xa4>)
 8001d10:	643b      	str	r3, [r7, #64]	; 0x40
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  flash_led();
 8001d12:	f000 f871 	bl	8001df8 <_Z9flash_ledv>
	  MPU6050_Read_All(&hi2c1, &imu);
 8001d16:	463b      	mov	r3, r7
 8001d18:	4619      	mov	r1, r3
 8001d1a:	480f      	ldr	r0, [pc, #60]	; (8001d58 <main+0x9c>)
 8001d1c:	f7ff fa28 	bl	8001170 <MPU6050_Read_All>
	  HAL_Delay (100);
 8001d20:	2064      	movs	r0, #100	; 0x64
 8001d22:	f000 ffad 	bl	8002c80 <HAL_Delay>
	  sprintf(sentence, "Gyro X: %d", (int)imu.Gx);
 8001d26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f7fe fe7b 	bl	8000a28 <__aeabi_d2iz>
 8001d32:	4602      	mov	r2, r0
 8001d34:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d38:	490a      	ldr	r1, [pc, #40]	; (8001d64 <main+0xa8>)
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f005 f90c 	bl	8006f58 <siprintf>
	  show_string(sentence);
 8001d40:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 f873 	bl	8001e30 <_Z11show_stringPc>
	  LMotor.setWheelSpeed(10);
 8001d4a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001d4e:	4906      	ldr	r1, [pc, #24]	; (8001d68 <main+0xac>)
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fddd 	bl	8001910 <_ZN12MotorEncoder13setWheelSpeedEf>
	  flash_led();
 8001d56:	e7dc      	b.n	8001d12 <main+0x56>
 8001d58:	20000174 	.word	0x20000174
 8001d5c:	20000220 	.word	0x20000220
 8001d60:	41c80000 	.word	0x41c80000
 8001d64:	08007640 	.word	0x08007640
 8001d68:	41200000 	.word	0x41200000

08001d6c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b090      	sub	sp, #64	; 0x40
 8001d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d72:	f107 0318 	add.w	r3, r7, #24
 8001d76:	2228      	movs	r2, #40	; 0x28
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f004 ffb4 	bl	8006ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d92:	2301      	movs	r3, #1
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d96:	2310      	movs	r3, #16
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d9e:	f107 0318 	add.w	r3, r7, #24
 8001da2:	4618      	mov	r0, r3
 8001da4:	f002 fb60 	bl	8004468 <HAL_RCC_OscConfig>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	bf14      	ite	ne
 8001dae:	2301      	movne	r3, #1
 8001db0:	2300      	moveq	r3, #0
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <_Z18SystemClock_Configv+0x50>
  {
    Error_Handler();
 8001db8:	f000 f856 	bl	8001e68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dbc:	230f      	movs	r3, #15
 8001dbe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f002 fdc9 	bl	800496c <HAL_RCC_ClockConfig>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	bf14      	ite	ne
 8001de0:	2301      	movne	r3, #1
 8001de2:	2300      	moveq	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 8001dea:	f000 f83d 	bl	8001e68 <Error_Handler>
  }
}
 8001dee:	bf00      	nop
 8001df0:	3740      	adds	r7, #64	; 0x40
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <_Z9flash_ledv>:

/* USER CODE BEGIN 4 */

void flash_led()
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4 ; i++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	dc0c      	bgt.n	8001e22 <_Z9flash_ledv+0x2a>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001e08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e0c:	4807      	ldr	r0, [pc, #28]	; (8001e2c <_Z9flash_ledv+0x34>)
 8001e0e:	f001 fab7 	bl	8003380 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8001e12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e16:	f000 ff33 	bl	8002c80 <HAL_Delay>
	for(int i = 0; i < 4 ; i++)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	e7ef      	b.n	8001e02 <_Z9flash_ledv+0xa>
	}
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40011000 	.word	0x40011000

08001e30 <_Z11show_stringPc>:

void show_string(char* sentence)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
	uint8_t y = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	73fb      	strb	r3, [r7, #15]
	ssd1306_Fill(White);
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	f000 fd29 	bl	8002894 <ssd1306_Fill>
	ssd1306_SetCursor(2, y);
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	4619      	mov	r1, r3
 8001e46:	2002      	movs	r0, #2
 8001e48:	f000 fe6e 	bl	8002b28 <ssd1306_SetCursor>
	ssd1306_WriteString(sentence ,Font_7x10 ,Black);
 8001e4c:	4a05      	ldr	r2, [pc, #20]	; (8001e64 <_Z11show_stringPc+0x34>)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	ca06      	ldmia	r2, {r1, r2}
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 fe42 	bl	8002adc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001e58:	f000 fd3e 	bl	80028d8 <ssd1306_UpdateScreen>
}
 8001e5c:	bf00      	nop
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000094 	.word	0x20000094

08001e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e6c:	b672      	cpsid	i
}
 8001e6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <Error_Handler+0x8>
	...

08001e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e7a:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <HAL_MspInit+0x5c>)
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	4a14      	ldr	r2, [pc, #80]	; (8001ed0 <HAL_MspInit+0x5c>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6193      	str	r3, [r2, #24]
 8001e86:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <HAL_MspInit+0x5c>)
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e92:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <HAL_MspInit+0x5c>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	4a0e      	ldr	r2, [pc, #56]	; (8001ed0 <HAL_MspInit+0x5c>)
 8001e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	61d3      	str	r3, [r2, #28]
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <HAL_MspInit+0x5c>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001eaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <HAL_MspInit+0x60>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <HAL_MspInit+0x60>)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40010000 	.word	0x40010000

08001ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001edc:	e7fe      	b.n	8001edc <NMI_Handler+0x4>

08001ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ee2:	e7fe      	b.n	8001ee2 <HardFault_Handler+0x4>

08001ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee8:	e7fe      	b.n	8001ee8 <MemManage_Handler+0x4>

08001eea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eee:	e7fe      	b.n	8001eee <BusFault_Handler+0x4>

08001ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef4:	e7fe      	b.n	8001ef4 <UsageFault_Handler+0x4>

08001ef6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr

08001f02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr

08001f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr

08001f1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f1e:	f000 fe93 	bl	8002c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f2c:	4802      	ldr	r0, [pc, #8]	; (8001f38 <USART1_IRQHandler+0x10>)
 8001f2e:	f003 fe09 	bl	8005b44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000340 	.word	0x20000340

08001f3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return 1;
 8001f40:	2301      	movs	r3, #1
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr

08001f4a <_kill>:

int _kill(int pid, int sig)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f54:	f004 fe66 	bl	8006c24 <__errno>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2216      	movs	r2, #22
 8001f5c:	601a      	str	r2, [r3, #0]
  return -1;
 8001f5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <_exit>:

void _exit (int status)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f72:	f04f 31ff 	mov.w	r1, #4294967295
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff ffe7 	bl	8001f4a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f7c:	e7fe      	b.n	8001f7c <_exit+0x12>
	...

08001f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f88:	4a14      	ldr	r2, [pc, #80]	; (8001fdc <_sbrk+0x5c>)
 8001f8a:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <_sbrk+0x60>)
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f94:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <_sbrk+0x64>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d102      	bne.n	8001fa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f9c:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <_sbrk+0x64>)
 8001f9e:	4a12      	ldr	r2, [pc, #72]	; (8001fe8 <_sbrk+0x68>)
 8001fa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fa2:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <_sbrk+0x64>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d207      	bcs.n	8001fc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fb0:	f004 fe38 	bl	8006c24 <__errno>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	220c      	movs	r2, #12
 8001fb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbe:	e009      	b.n	8001fd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fc0:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <_sbrk+0x64>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fc6:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <_sbrk+0x64>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <_sbrk+0x64>)
 8001fd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20005000 	.word	0x20005000
 8001fe0:	00000400 	.word	0x00000400
 8001fe4:	2000021c 	.word	0x2000021c
 8001fe8:	200007a8 	.word	0x200007a8

08001fec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr

08001ff8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b096      	sub	sp, #88	; 0x58
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001ffe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]
 8002008:	609a      	str	r2, [r3, #8]
 800200a:	60da      	str	r2, [r3, #12]
 800200c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800200e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002018:	f107 0320 	add.w	r3, r7, #32
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
 8002028:	615a      	str	r2, [r3, #20]
 800202a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800202c:	463b      	mov	r3, r7
 800202e:	2220      	movs	r2, #32
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f004 fe58 	bl	8006ce8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002038:	4b44      	ldr	r3, [pc, #272]	; (800214c <MX_TIM1_Init+0x154>)
 800203a:	4a45      	ldr	r2, [pc, #276]	; (8002150 <MX_TIM1_Init+0x158>)
 800203c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800203e:	4b43      	ldr	r3, [pc, #268]	; (800214c <MX_TIM1_Init+0x154>)
 8002040:	2200      	movs	r2, #0
 8002042:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002044:	4b41      	ldr	r3, [pc, #260]	; (800214c <MX_TIM1_Init+0x154>)
 8002046:	2200      	movs	r2, #0
 8002048:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800204a:	4b40      	ldr	r3, [pc, #256]	; (800214c <MX_TIM1_Init+0x154>)
 800204c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002050:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002052:	4b3e      	ldr	r3, [pc, #248]	; (800214c <MX_TIM1_Init+0x154>)
 8002054:	2200      	movs	r2, #0
 8002056:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002058:	4b3c      	ldr	r3, [pc, #240]	; (800214c <MX_TIM1_Init+0x154>)
 800205a:	2200      	movs	r2, #0
 800205c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800205e:	4b3b      	ldr	r3, [pc, #236]	; (800214c <MX_TIM1_Init+0x154>)
 8002060:	2200      	movs	r2, #0
 8002062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002064:	4839      	ldr	r0, [pc, #228]	; (800214c <MX_TIM1_Init+0x154>)
 8002066:	f002 fe0f 	bl	8004c88 <HAL_TIM_Base_Init>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002070:	f7ff fefa 	bl	8001e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002074:	4835      	ldr	r0, [pc, #212]	; (800214c <MX_TIM1_Init+0x154>)
 8002076:	f002 feae 	bl	8004dd6 <HAL_TIM_PWM_Init>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8002080:	f7ff fef2 	bl	8001e68 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002084:	2307      	movs	r3, #7
 8002086:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002088:	2300      	movs	r3, #0
 800208a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800208c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002090:	4619      	mov	r1, r3
 8002092:	482e      	ldr	r0, [pc, #184]	; (800214c <MX_TIM1_Init+0x154>)
 8002094:	f003 f8dd 	bl	8005252 <HAL_TIM_SlaveConfigSynchro>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800209e:	f7ff fee3 	bl	8001e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020ae:	4619      	mov	r1, r3
 80020b0:	4826      	ldr	r0, [pc, #152]	; (800214c <MX_TIM1_Init+0x154>)
 80020b2:	f003 fc23 	bl	80058fc <HAL_TIMEx_MasterConfigSynchronization>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80020bc:	f7ff fed4 	bl	8001e68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020c0:	2360      	movs	r3, #96	; 0x60
 80020c2:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020c8:	2300      	movs	r3, #0
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020cc:	2300      	movs	r3, #0
 80020ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020d4:	2300      	movs	r3, #0
 80020d6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020d8:	2300      	movs	r3, #0
 80020da:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020dc:	f107 0320 	add.w	r3, r7, #32
 80020e0:	2200      	movs	r2, #0
 80020e2:	4619      	mov	r1, r3
 80020e4:	4819      	ldr	r0, [pc, #100]	; (800214c <MX_TIM1_Init+0x154>)
 80020e6:	f002 ff2b 	bl	8004f40 <HAL_TIM_PWM_ConfigChannel>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80020f0:	f7ff feba 	bl	8001e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020f4:	f107 0320 	add.w	r3, r7, #32
 80020f8:	2204      	movs	r2, #4
 80020fa:	4619      	mov	r1, r3
 80020fc:	4813      	ldr	r0, [pc, #76]	; (800214c <MX_TIM1_Init+0x154>)
 80020fe:	f002 ff1f 	bl	8004f40 <HAL_TIM_PWM_ConfigChannel>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8002108:	f7ff feae 	bl	8001e68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002114:	2300      	movs	r3, #0
 8002116:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002120:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002124:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800212a:	463b      	mov	r3, r7
 800212c:	4619      	mov	r1, r3
 800212e:	4807      	ldr	r0, [pc, #28]	; (800214c <MX_TIM1_Init+0x154>)
 8002130:	f003 fc42 	bl	80059b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800213a:	f7ff fe95 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800213e:	4803      	ldr	r0, [pc, #12]	; (800214c <MX_TIM1_Init+0x154>)
 8002140:	f000 fa02 	bl	8002548 <HAL_TIM_MspPostInit>

}
 8002144:	bf00      	nop
 8002146:	3758      	adds	r7, #88	; 0x58
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20000220 	.word	0x20000220
 8002150:	40012c00 	.word	0x40012c00

08002154 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08e      	sub	sp, #56	; 0x38
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800215a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	609a      	str	r2, [r3, #8]
 8002166:	60da      	str	r2, [r3, #12]
 8002168:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800216a:	f107 031c 	add.w	r3, r7, #28
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002174:	463b      	mov	r3, r7
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	609a      	str	r2, [r3, #8]
 800217e:	60da      	str	r2, [r3, #12]
 8002180:	611a      	str	r2, [r3, #16]
 8002182:	615a      	str	r2, [r3, #20]
 8002184:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002186:	4b33      	ldr	r3, [pc, #204]	; (8002254 <MX_TIM2_Init+0x100>)
 8002188:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800218c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800218e:	4b31      	ldr	r3, [pc, #196]	; (8002254 <MX_TIM2_Init+0x100>)
 8002190:	2200      	movs	r2, #0
 8002192:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002194:	4b2f      	ldr	r3, [pc, #188]	; (8002254 <MX_TIM2_Init+0x100>)
 8002196:	2200      	movs	r2, #0
 8002198:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800219a:	4b2e      	ldr	r3, [pc, #184]	; (8002254 <MX_TIM2_Init+0x100>)
 800219c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a2:	4b2c      	ldr	r3, [pc, #176]	; (8002254 <MX_TIM2_Init+0x100>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021a8:	4b2a      	ldr	r3, [pc, #168]	; (8002254 <MX_TIM2_Init+0x100>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021ae:	4829      	ldr	r0, [pc, #164]	; (8002254 <MX_TIM2_Init+0x100>)
 80021b0:	f002 fd6a 	bl	8004c88 <HAL_TIM_Base_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80021ba:	f7ff fe55 	bl	8001e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80021be:	4825      	ldr	r0, [pc, #148]	; (8002254 <MX_TIM2_Init+0x100>)
 80021c0:	f002 fe09 	bl	8004dd6 <HAL_TIM_PWM_Init>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80021ca:	f7ff fe4d 	bl	8001e68 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80021ce:	2307      	movs	r3, #7
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80021d2:	2300      	movs	r3, #0
 80021d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80021d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021da:	4619      	mov	r1, r3
 80021dc:	481d      	ldr	r0, [pc, #116]	; (8002254 <MX_TIM2_Init+0x100>)
 80021de:	f003 f838 	bl	8005252 <HAL_TIM_SlaveConfigSynchro>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80021e8:	f7ff fe3e 	bl	8001e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f0:	2300      	movs	r3, #0
 80021f2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021f4:	f107 031c 	add.w	r3, r7, #28
 80021f8:	4619      	mov	r1, r3
 80021fa:	4816      	ldr	r0, [pc, #88]	; (8002254 <MX_TIM2_Init+0x100>)
 80021fc:	f003 fb7e 	bl	80058fc <HAL_TIMEx_MasterConfigSynchronization>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8002206:	f7ff fe2f 	bl	8001e68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800220a:	2360      	movs	r3, #96	; 0x60
 800220c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002212:	2300      	movs	r3, #0
 8002214:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800221a:	463b      	mov	r3, r7
 800221c:	2200      	movs	r2, #0
 800221e:	4619      	mov	r1, r3
 8002220:	480c      	ldr	r0, [pc, #48]	; (8002254 <MX_TIM2_Init+0x100>)
 8002222:	f002 fe8d 	bl	8004f40 <HAL_TIM_PWM_ConfigChannel>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800222c:	f7ff fe1c 	bl	8001e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002230:	463b      	mov	r3, r7
 8002232:	2204      	movs	r2, #4
 8002234:	4619      	mov	r1, r3
 8002236:	4807      	ldr	r0, [pc, #28]	; (8002254 <MX_TIM2_Init+0x100>)
 8002238:	f002 fe82 	bl	8004f40 <HAL_TIM_PWM_ConfigChannel>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8002242:	f7ff fe11 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002246:	4803      	ldr	r0, [pc, #12]	; (8002254 <MX_TIM2_Init+0x100>)
 8002248:	f000 f97e 	bl	8002548 <HAL_TIM_MspPostInit>

}
 800224c:	bf00      	nop
 800224e:	3738      	adds	r7, #56	; 0x38
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20000268 	.word	0x20000268

08002258 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b092      	sub	sp, #72	; 0x48
 800225c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800225e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	605a      	str	r2, [r3, #4]
 8002268:	609a      	str	r2, [r3, #8]
 800226a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800226c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800227c:	f107 031c 	add.w	r3, r7, #28
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002286:	463b      	mov	r3, r7
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
 8002294:	615a      	str	r2, [r3, #20]
 8002296:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002298:	4b38      	ldr	r3, [pc, #224]	; (800237c <MX_TIM3_Init+0x124>)
 800229a:	4a39      	ldr	r2, [pc, #228]	; (8002380 <MX_TIM3_Init+0x128>)
 800229c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800229e:	4b37      	ldr	r3, [pc, #220]	; (800237c <MX_TIM3_Init+0x124>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a4:	4b35      	ldr	r3, [pc, #212]	; (800237c <MX_TIM3_Init+0x124>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80022aa:	4b34      	ldr	r3, [pc, #208]	; (800237c <MX_TIM3_Init+0x124>)
 80022ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b2:	4b32      	ldr	r3, [pc, #200]	; (800237c <MX_TIM3_Init+0x124>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b8:	4b30      	ldr	r3, [pc, #192]	; (800237c <MX_TIM3_Init+0x124>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022be:	482f      	ldr	r0, [pc, #188]	; (800237c <MX_TIM3_Init+0x124>)
 80022c0:	f002 fce2 	bl	8004c88 <HAL_TIM_Base_Init>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80022ca:	f7ff fdcd 	bl	8001e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022d2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022d8:	4619      	mov	r1, r3
 80022da:	4828      	ldr	r0, [pc, #160]	; (800237c <MX_TIM3_Init+0x124>)
 80022dc:	f002 fef2 	bl	80050c4 <HAL_TIM_ConfigClockSource>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80022e6:	f7ff fdbf 	bl	8001e68 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80022ea:	4824      	ldr	r0, [pc, #144]	; (800237c <MX_TIM3_Init+0x124>)
 80022ec:	f002 fd1b 	bl	8004d26 <HAL_TIM_OC_Init>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 80022f6:	f7ff fdb7 	bl	8001e68 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80022fa:	2300      	movs	r3, #0
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80022fe:	2310      	movs	r3, #16
 8002300:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002306:	4619      	mov	r1, r3
 8002308:	481c      	ldr	r0, [pc, #112]	; (800237c <MX_TIM3_Init+0x124>)
 800230a:	f002 ffa2 	bl	8005252 <HAL_TIM_SlaveConfigSynchro>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8002314:	f7ff fda8 	bl	8001e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002318:	2300      	movs	r3, #0
 800231a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800231c:	2300      	movs	r3, #0
 800231e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002320:	f107 031c 	add.w	r3, r7, #28
 8002324:	4619      	mov	r1, r3
 8002326:	4815      	ldr	r0, [pc, #84]	; (800237c <MX_TIM3_Init+0x124>)
 8002328:	f003 fae8 	bl	80058fc <HAL_TIMEx_MasterConfigSynchronization>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8002332:	f7ff fd99 	bl	8001e68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002336:	2300      	movs	r3, #0
 8002338:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800233e:	2300      	movs	r3, #0
 8002340:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002346:	463b      	mov	r3, r7
 8002348:	2200      	movs	r2, #0
 800234a:	4619      	mov	r1, r3
 800234c:	480b      	ldr	r0, [pc, #44]	; (800237c <MX_TIM3_Init+0x124>)
 800234e:	f002 fd9b 	bl	8004e88 <HAL_TIM_OC_ConfigChannel>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002358:	f7ff fd86 	bl	8001e68 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800235c:	463b      	mov	r3, r7
 800235e:	2204      	movs	r2, #4
 8002360:	4619      	mov	r1, r3
 8002362:	4806      	ldr	r0, [pc, #24]	; (800237c <MX_TIM3_Init+0x124>)
 8002364:	f002 fd90 	bl	8004e88 <HAL_TIM_OC_ConfigChannel>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 800236e:	f7ff fd7b 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002372:	bf00      	nop
 8002374:	3748      	adds	r7, #72	; 0x48
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	200002b0 	.word	0x200002b0
 8002380:	40000400 	.word	0x40000400

08002384 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b092      	sub	sp, #72	; 0x48
 8002388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800238a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	605a      	str	r2, [r3, #4]
 8002394:	609a      	str	r2, [r3, #8]
 8002396:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a8:	f107 031c 	add.w	r3, r7, #28
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023b2:	463b      	mov	r3, r7
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]
 80023c0:	615a      	str	r2, [r3, #20]
 80023c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023c4:	4b32      	ldr	r3, [pc, #200]	; (8002490 <MX_TIM4_Init+0x10c>)
 80023c6:	4a33      	ldr	r2, [pc, #204]	; (8002494 <MX_TIM4_Init+0x110>)
 80023c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80023ca:	4b31      	ldr	r3, [pc, #196]	; (8002490 <MX_TIM4_Init+0x10c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d0:	4b2f      	ldr	r3, [pc, #188]	; (8002490 <MX_TIM4_Init+0x10c>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80023d6:	4b2e      	ldr	r3, [pc, #184]	; (8002490 <MX_TIM4_Init+0x10c>)
 80023d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023de:	4b2c      	ldr	r3, [pc, #176]	; (8002490 <MX_TIM4_Init+0x10c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e4:	4b2a      	ldr	r3, [pc, #168]	; (8002490 <MX_TIM4_Init+0x10c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80023ea:	4829      	ldr	r0, [pc, #164]	; (8002490 <MX_TIM4_Init+0x10c>)
 80023ec:	f002 fc4c 	bl	8004c88 <HAL_TIM_Base_Init>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80023f6:	f7ff fd37 	bl	8001e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023fe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002400:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002404:	4619      	mov	r1, r3
 8002406:	4822      	ldr	r0, [pc, #136]	; (8002490 <MX_TIM4_Init+0x10c>)
 8002408:	f002 fe5c 	bl	80050c4 <HAL_TIM_ConfigClockSource>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002412:	f7ff fd29 	bl	8001e68 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002416:	481e      	ldr	r0, [pc, #120]	; (8002490 <MX_TIM4_Init+0x10c>)
 8002418:	f002 fc85 	bl	8004d26 <HAL_TIM_OC_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8002422:	f7ff fd21 	bl	8001e68 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8002426:	2300      	movs	r3, #0
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 800242a:	2320      	movs	r3, #32
 800242c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800242e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002432:	4619      	mov	r1, r3
 8002434:	4816      	ldr	r0, [pc, #88]	; (8002490 <MX_TIM4_Init+0x10c>)
 8002436:	f002 ff0c 	bl	8005252 <HAL_TIM_SlaveConfigSynchro>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8002440:	f7ff fd12 	bl	8001e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002444:	2300      	movs	r3, #0
 8002446:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002448:	2300      	movs	r3, #0
 800244a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800244c:	f107 031c 	add.w	r3, r7, #28
 8002450:	4619      	mov	r1, r3
 8002452:	480f      	ldr	r0, [pc, #60]	; (8002490 <MX_TIM4_Init+0x10c>)
 8002454:	f003 fa52 	bl	80058fc <HAL_TIMEx_MasterConfigSynchronization>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 800245e:	f7ff fd03 	bl	8001e68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002462:	2300      	movs	r3, #0
 8002464:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800246a:	2300      	movs	r3, #0
 800246c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800246e:	2300      	movs	r3, #0
 8002470:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002472:	463b      	mov	r3, r7
 8002474:	2200      	movs	r2, #0
 8002476:	4619      	mov	r1, r3
 8002478:	4805      	ldr	r0, [pc, #20]	; (8002490 <MX_TIM4_Init+0x10c>)
 800247a:	f002 fd05 	bl	8004e88 <HAL_TIM_OC_ConfigChannel>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8002484:	f7ff fcf0 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002488:	bf00      	nop
 800248a:	3748      	adds	r7, #72	; 0x48
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	200002f8 	.word	0x200002f8
 8002494:	40000800 	.word	0x40000800

08002498 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a24      	ldr	r2, [pc, #144]	; (8002538 <HAL_TIM_Base_MspInit+0xa0>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d10c      	bne.n	80024c4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024aa:	4b24      	ldr	r3, [pc, #144]	; (800253c <HAL_TIM_Base_MspInit+0xa4>)
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	4a23      	ldr	r2, [pc, #140]	; (800253c <HAL_TIM_Base_MspInit+0xa4>)
 80024b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024b4:	6193      	str	r3, [r2, #24]
 80024b6:	4b21      	ldr	r3, [pc, #132]	; (800253c <HAL_TIM_Base_MspInit+0xa4>)
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80024c2:	e034      	b.n	800252e <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM2)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024cc:	d10c      	bne.n	80024e8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024ce:	4b1b      	ldr	r3, [pc, #108]	; (800253c <HAL_TIM_Base_MspInit+0xa4>)
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	4a1a      	ldr	r2, [pc, #104]	; (800253c <HAL_TIM_Base_MspInit+0xa4>)
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	61d3      	str	r3, [r2, #28]
 80024da:	4b18      	ldr	r3, [pc, #96]	; (800253c <HAL_TIM_Base_MspInit+0xa4>)
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	693b      	ldr	r3, [r7, #16]
}
 80024e6:	e022      	b.n	800252e <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM3)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a14      	ldr	r2, [pc, #80]	; (8002540 <HAL_TIM_Base_MspInit+0xa8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d10c      	bne.n	800250c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024f2:	4b12      	ldr	r3, [pc, #72]	; (800253c <HAL_TIM_Base_MspInit+0xa4>)
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	4a11      	ldr	r2, [pc, #68]	; (800253c <HAL_TIM_Base_MspInit+0xa4>)
 80024f8:	f043 0302 	orr.w	r3, r3, #2
 80024fc:	61d3      	str	r3, [r2, #28]
 80024fe:	4b0f      	ldr	r3, [pc, #60]	; (800253c <HAL_TIM_Base_MspInit+0xa4>)
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
}
 800250a:	e010      	b.n	800252e <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM4)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a0c      	ldr	r2, [pc, #48]	; (8002544 <HAL_TIM_Base_MspInit+0xac>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d10b      	bne.n	800252e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <HAL_TIM_Base_MspInit+0xa4>)
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	4a08      	ldr	r2, [pc, #32]	; (800253c <HAL_TIM_Base_MspInit+0xa4>)
 800251c:	f043 0304 	orr.w	r3, r3, #4
 8002520:	61d3      	str	r3, [r2, #28]
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_TIM_Base_MspInit+0xa4>)
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]
}
 800252e:	bf00      	nop
 8002530:	371c      	adds	r7, #28
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr
 8002538:	40012c00 	.word	0x40012c00
 800253c:	40021000 	.word	0x40021000
 8002540:	40000400 	.word	0x40000400
 8002544:	40000800 	.word	0x40000800

08002548 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b088      	sub	sp, #32
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002550:	f107 0310 	add.w	r3, r7, #16
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	609a      	str	r2, [r3, #8]
 800255c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a1f      	ldr	r2, [pc, #124]	; (80025e0 <HAL_TIM_MspPostInit+0x98>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d119      	bne.n	800259c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002568:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <HAL_TIM_MspPostInit+0x9c>)
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	4a1d      	ldr	r2, [pc, #116]	; (80025e4 <HAL_TIM_MspPostInit+0x9c>)
 800256e:	f043 0304 	orr.w	r3, r3, #4
 8002572:	6193      	str	r3, [r2, #24]
 8002574:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <HAL_TIM_MspPostInit+0x9c>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002580:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002584:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002586:	2302      	movs	r3, #2
 8002588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258a:	2302      	movs	r3, #2
 800258c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258e:	f107 0310 	add.w	r3, r7, #16
 8002592:	4619      	mov	r1, r3
 8002594:	4814      	ldr	r0, [pc, #80]	; (80025e8 <HAL_TIM_MspPostInit+0xa0>)
 8002596:	f000 fd57 	bl	8003048 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800259a:	e01c      	b.n	80025d6 <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM2)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a4:	d117      	bne.n	80025d6 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a6:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <HAL_TIM_MspPostInit+0x9c>)
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <HAL_TIM_MspPostInit+0x9c>)
 80025ac:	f043 0304 	orr.w	r3, r3, #4
 80025b0:	6193      	str	r3, [r2, #24]
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_TIM_MspPostInit+0x9c>)
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025be:	2303      	movs	r3, #3
 80025c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c2:	2302      	movs	r3, #2
 80025c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c6:	2302      	movs	r3, #2
 80025c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ca:	f107 0310 	add.w	r3, r7, #16
 80025ce:	4619      	mov	r1, r3
 80025d0:	4805      	ldr	r0, [pc, #20]	; (80025e8 <HAL_TIM_MspPostInit+0xa0>)
 80025d2:	f000 fd39 	bl	8003048 <HAL_GPIO_Init>
}
 80025d6:	bf00      	nop
 80025d8:	3720      	adds	r7, #32
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40012c00 	.word	0x40012c00
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40010800 	.word	0x40010800

080025ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025f0:	4b11      	ldr	r3, [pc, #68]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 80025f2:	4a12      	ldr	r2, [pc, #72]	; (800263c <MX_USART1_UART_Init+0x50>)
 80025f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80025f6:	4b10      	ldr	r3, [pc, #64]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 80025f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80025fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025fe:	4b0e      	ldr	r3, [pc, #56]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 8002606:	2200      	movs	r2, #0
 8002608:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800260a:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 800260c:	2200      	movs	r2, #0
 800260e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002610:	4b09      	ldr	r3, [pc, #36]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 8002612:	220c      	movs	r2, #12
 8002614:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002616:	4b08      	ldr	r3, [pc, #32]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 8002618:	2200      	movs	r2, #0
 800261a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 800261e:	2200      	movs	r2, #0
 8002620:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002622:	4805      	ldr	r0, [pc, #20]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 8002624:	f003 fa19 	bl	8005a5a <HAL_UART_Init>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800262e:	f7ff fc1b 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000340 	.word	0x20000340
 800263c:	40013800 	.word	0x40013800

08002640 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08a      	sub	sp, #40	; 0x28
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a26      	ldr	r2, [pc, #152]	; (80026f4 <HAL_UART_MspInit+0xb4>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d145      	bne.n	80026ec <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002660:	4b25      	ldr	r3, [pc, #148]	; (80026f8 <HAL_UART_MspInit+0xb8>)
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	4a24      	ldr	r2, [pc, #144]	; (80026f8 <HAL_UART_MspInit+0xb8>)
 8002666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800266a:	6193      	str	r3, [r2, #24]
 800266c:	4b22      	ldr	r3, [pc, #136]	; (80026f8 <HAL_UART_MspInit+0xb8>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002678:	4b1f      	ldr	r3, [pc, #124]	; (80026f8 <HAL_UART_MspInit+0xb8>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	4a1e      	ldr	r2, [pc, #120]	; (80026f8 <HAL_UART_MspInit+0xb8>)
 800267e:	f043 0308 	orr.w	r3, r3, #8
 8002682:	6193      	str	r3, [r2, #24]
 8002684:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <HAL_UART_MspInit+0xb8>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002690:	2340      	movs	r3, #64	; 0x40
 8002692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002694:	2302      	movs	r3, #2
 8002696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002698:	2303      	movs	r3, #3
 800269a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269c:	f107 0314 	add.w	r3, r7, #20
 80026a0:	4619      	mov	r1, r3
 80026a2:	4816      	ldr	r0, [pc, #88]	; (80026fc <HAL_UART_MspInit+0xbc>)
 80026a4:	f000 fcd0 	bl	8003048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80026a8:	2380      	movs	r3, #128	; 0x80
 80026aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b0:	2300      	movs	r3, #0
 80026b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	4619      	mov	r1, r3
 80026ba:	4810      	ldr	r0, [pc, #64]	; (80026fc <HAL_UART_MspInit+0xbc>)
 80026bc:	f000 fcc4 	bl	8003048 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80026c0:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <HAL_UART_MspInit+0xc0>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	f043 0304 	orr.w	r3, r3, #4
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
 80026d6:	4a0a      	ldr	r2, [pc, #40]	; (8002700 <HAL_UART_MspInit+0xc0>)
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026dc:	2200      	movs	r2, #0
 80026de:	2100      	movs	r1, #0
 80026e0:	2025      	movs	r0, #37	; 0x25
 80026e2:	f000 fbc8 	bl	8002e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026e6:	2025      	movs	r0, #37	; 0x25
 80026e8:	f000 fbe1 	bl	8002eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80026ec:	bf00      	nop
 80026ee:	3728      	adds	r7, #40	; 0x28
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40013800 	.word	0x40013800
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40010c00 	.word	0x40010c00
 8002700:	40010000 	.word	0x40010000

08002704 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002704:	f7ff fc72 	bl	8001fec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002708:	480b      	ldr	r0, [pc, #44]	; (8002738 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800270a:	490c      	ldr	r1, [pc, #48]	; (800273c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800270c:	4a0c      	ldr	r2, [pc, #48]	; (8002740 <LoopFillZerobss+0x16>)
  movs r3, #0
 800270e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002710:	e002      	b.n	8002718 <LoopCopyDataInit>

08002712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002716:	3304      	adds	r3, #4

08002718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800271a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800271c:	d3f9      	bcc.n	8002712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800271e:	4a09      	ldr	r2, [pc, #36]	; (8002744 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002720:	4c09      	ldr	r4, [pc, #36]	; (8002748 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002724:	e001      	b.n	800272a <LoopFillZerobss>

08002726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002728:	3204      	adds	r2, #4

0800272a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800272a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800272c:	d3fb      	bcc.n	8002726 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800272e:	f004 fa7f 	bl	8006c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002732:	f7ff fac3 	bl	8001cbc <main>
  bx lr
 8002736:	4770      	bx	lr
  ldr r0, =_sdata
 8002738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800273c:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8002740:	08007e9c 	.word	0x08007e9c
  ldr r2, =_sbss
 8002744:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8002748:	200007a8 	.word	0x200007a8

0800274c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800274c:	e7fe      	b.n	800274c <ADC1_2_IRQHandler>

0800274e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002752:	bf00      	nop
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr
	...

0800275c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af04      	add	r7, sp, #16
 8002762:	4603      	mov	r3, r0
 8002764:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002766:	f04f 33ff 	mov.w	r3, #4294967295
 800276a:	9302      	str	r3, [sp, #8]
 800276c:	2301      	movs	r3, #1
 800276e:	9301      	str	r3, [sp, #4]
 8002770:	1dfb      	adds	r3, r7, #7
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	2301      	movs	r3, #1
 8002776:	2200      	movs	r2, #0
 8002778:	2178      	movs	r1, #120	; 0x78
 800277a:	4803      	ldr	r0, [pc, #12]	; (8002788 <ssd1306_WriteCommand+0x2c>)
 800277c:	f000 ff5e 	bl	800363c <HAL_I2C_Mem_Write>
}
 8002780:	bf00      	nop
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	200001c8 	.word	0x200001c8

0800278c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af04      	add	r7, sp, #16
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	b29b      	uxth	r3, r3
 800279a:	f04f 32ff 	mov.w	r2, #4294967295
 800279e:	9202      	str	r2, [sp, #8]
 80027a0:	9301      	str	r3, [sp, #4]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	2301      	movs	r3, #1
 80027a8:	2240      	movs	r2, #64	; 0x40
 80027aa:	2178      	movs	r1, #120	; 0x78
 80027ac:	4803      	ldr	r0, [pc, #12]	; (80027bc <ssd1306_WriteData+0x30>)
 80027ae:	f000 ff45 	bl	800363c <HAL_I2C_Mem_Write>
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	200001c8 	.word	0x200001c8

080027c0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80027c4:	f7ff ffc3 	bl	800274e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80027c8:	2064      	movs	r0, #100	; 0x64
 80027ca:	f000 fa59 	bl	8002c80 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80027ce:	2000      	movs	r0, #0
 80027d0:	f000 f9d6 	bl	8002b80 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80027d4:	2020      	movs	r0, #32
 80027d6:	f7ff ffc1 	bl	800275c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80027da:	2000      	movs	r0, #0
 80027dc:	f7ff ffbe 	bl	800275c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80027e0:	20b0      	movs	r0, #176	; 0xb0
 80027e2:	f7ff ffbb 	bl	800275c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80027e6:	20c8      	movs	r0, #200	; 0xc8
 80027e8:	f7ff ffb8 	bl	800275c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80027ec:	2000      	movs	r0, #0
 80027ee:	f7ff ffb5 	bl	800275c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80027f2:	2010      	movs	r0, #16
 80027f4:	f7ff ffb2 	bl	800275c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80027f8:	2040      	movs	r0, #64	; 0x40
 80027fa:	f7ff ffaf 	bl	800275c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80027fe:	20ff      	movs	r0, #255	; 0xff
 8002800:	f000 f9aa 	bl	8002b58 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002804:	20a1      	movs	r0, #161	; 0xa1
 8002806:	f7ff ffa9 	bl	800275c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800280a:	20a6      	movs	r0, #166	; 0xa6
 800280c:	f7ff ffa6 	bl	800275c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002810:	20a8      	movs	r0, #168	; 0xa8
 8002812:	f7ff ffa3 	bl	800275c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002816:	203f      	movs	r0, #63	; 0x3f
 8002818:	f7ff ffa0 	bl	800275c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800281c:	20a4      	movs	r0, #164	; 0xa4
 800281e:	f7ff ff9d 	bl	800275c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002822:	20d3      	movs	r0, #211	; 0xd3
 8002824:	f7ff ff9a 	bl	800275c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002828:	2000      	movs	r0, #0
 800282a:	f7ff ff97 	bl	800275c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800282e:	20d5      	movs	r0, #213	; 0xd5
 8002830:	f7ff ff94 	bl	800275c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002834:	20f0      	movs	r0, #240	; 0xf0
 8002836:	f7ff ff91 	bl	800275c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800283a:	20d9      	movs	r0, #217	; 0xd9
 800283c:	f7ff ff8e 	bl	800275c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002840:	2022      	movs	r0, #34	; 0x22
 8002842:	f7ff ff8b 	bl	800275c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002846:	20da      	movs	r0, #218	; 0xda
 8002848:	f7ff ff88 	bl	800275c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800284c:	2012      	movs	r0, #18
 800284e:	f7ff ff85 	bl	800275c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002852:	20db      	movs	r0, #219	; 0xdb
 8002854:	f7ff ff82 	bl	800275c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002858:	2020      	movs	r0, #32
 800285a:	f7ff ff7f 	bl	800275c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800285e:	208d      	movs	r0, #141	; 0x8d
 8002860:	f7ff ff7c 	bl	800275c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002864:	2014      	movs	r0, #20
 8002866:	f7ff ff79 	bl	800275c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800286a:	2001      	movs	r0, #1
 800286c:	f000 f988 	bl	8002b80 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002870:	2000      	movs	r0, #0
 8002872:	f000 f80f 	bl	8002894 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002876:	f000 f82f 	bl	80028d8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800287a:	4b05      	ldr	r3, [pc, #20]	; (8002890 <ssd1306_Init+0xd0>)
 800287c:	2200      	movs	r2, #0
 800287e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002880:	4b03      	ldr	r3, [pc, #12]	; (8002890 <ssd1306_Init+0xd0>)
 8002882:	2200      	movs	r2, #0
 8002884:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002886:	4b02      	ldr	r3, [pc, #8]	; (8002890 <ssd1306_Init+0xd0>)
 8002888:	2201      	movs	r2, #1
 800288a:	711a      	strb	r2, [r3, #4]
}
 800288c:	bf00      	nop
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000788 	.word	0x20000788

08002894 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	e00d      	b.n	80028c0 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <ssd1306_Fill+0x1a>
 80028aa:	2100      	movs	r1, #0
 80028ac:	e000      	b.n	80028b0 <ssd1306_Fill+0x1c>
 80028ae:	21ff      	movs	r1, #255	; 0xff
 80028b0:	4a08      	ldr	r2, [pc, #32]	; (80028d4 <ssd1306_Fill+0x40>)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4413      	add	r3, r2
 80028b6:	460a      	mov	r2, r1
 80028b8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	3301      	adds	r3, #1
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c6:	d3ed      	bcc.n	80028a4 <ssd1306_Fill+0x10>
    }
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	20000388 	.word	0x20000388

080028d8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80028de:	2300      	movs	r3, #0
 80028e0:	71fb      	strb	r3, [r7, #7]
 80028e2:	e016      	b.n	8002912 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	3b50      	subs	r3, #80	; 0x50
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff ff36 	bl	800275c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80028f0:	2000      	movs	r0, #0
 80028f2:	f7ff ff33 	bl	800275c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80028f6:	2010      	movs	r0, #16
 80028f8:	f7ff ff30 	bl	800275c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	01db      	lsls	r3, r3, #7
 8002900:	4a08      	ldr	r2, [pc, #32]	; (8002924 <ssd1306_UpdateScreen+0x4c>)
 8002902:	4413      	add	r3, r2
 8002904:	2180      	movs	r1, #128	; 0x80
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff ff40 	bl	800278c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	3301      	adds	r3, #1
 8002910:	71fb      	strb	r3, [r7, #7]
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	2b07      	cmp	r3, #7
 8002916:	d9e5      	bls.n	80028e4 <ssd1306_UpdateScreen+0xc>
    }
}
 8002918:	bf00      	nop
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20000388 	.word	0x20000388

08002928 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	71fb      	strb	r3, [r7, #7]
 8002932:	460b      	mov	r3, r1
 8002934:	71bb      	strb	r3, [r7, #6]
 8002936:	4613      	mov	r3, r2
 8002938:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800293a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293e:	2b00      	cmp	r3, #0
 8002940:	db3d      	blt.n	80029be <ssd1306_DrawPixel+0x96>
 8002942:	79bb      	ldrb	r3, [r7, #6]
 8002944:	2b3f      	cmp	r3, #63	; 0x3f
 8002946:	d83a      	bhi.n	80029be <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002948:	797b      	ldrb	r3, [r7, #5]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d11a      	bne.n	8002984 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800294e:	79fa      	ldrb	r2, [r7, #7]
 8002950:	79bb      	ldrb	r3, [r7, #6]
 8002952:	08db      	lsrs	r3, r3, #3
 8002954:	b2d8      	uxtb	r0, r3
 8002956:	4603      	mov	r3, r0
 8002958:	01db      	lsls	r3, r3, #7
 800295a:	4413      	add	r3, r2
 800295c:	4a1a      	ldr	r2, [pc, #104]	; (80029c8 <ssd1306_DrawPixel+0xa0>)
 800295e:	5cd3      	ldrb	r3, [r2, r3]
 8002960:	b25a      	sxtb	r2, r3
 8002962:	79bb      	ldrb	r3, [r7, #6]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	2101      	movs	r1, #1
 800296a:	fa01 f303 	lsl.w	r3, r1, r3
 800296e:	b25b      	sxtb	r3, r3
 8002970:	4313      	orrs	r3, r2
 8002972:	b259      	sxtb	r1, r3
 8002974:	79fa      	ldrb	r2, [r7, #7]
 8002976:	4603      	mov	r3, r0
 8002978:	01db      	lsls	r3, r3, #7
 800297a:	4413      	add	r3, r2
 800297c:	b2c9      	uxtb	r1, r1
 800297e:	4a12      	ldr	r2, [pc, #72]	; (80029c8 <ssd1306_DrawPixel+0xa0>)
 8002980:	54d1      	strb	r1, [r2, r3]
 8002982:	e01d      	b.n	80029c0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002984:	79fa      	ldrb	r2, [r7, #7]
 8002986:	79bb      	ldrb	r3, [r7, #6]
 8002988:	08db      	lsrs	r3, r3, #3
 800298a:	b2d8      	uxtb	r0, r3
 800298c:	4603      	mov	r3, r0
 800298e:	01db      	lsls	r3, r3, #7
 8002990:	4413      	add	r3, r2
 8002992:	4a0d      	ldr	r2, [pc, #52]	; (80029c8 <ssd1306_DrawPixel+0xa0>)
 8002994:	5cd3      	ldrb	r3, [r2, r3]
 8002996:	b25a      	sxtb	r2, r3
 8002998:	79bb      	ldrb	r3, [r7, #6]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	2101      	movs	r1, #1
 80029a0:	fa01 f303 	lsl.w	r3, r1, r3
 80029a4:	b25b      	sxtb	r3, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	b25b      	sxtb	r3, r3
 80029aa:	4013      	ands	r3, r2
 80029ac:	b259      	sxtb	r1, r3
 80029ae:	79fa      	ldrb	r2, [r7, #7]
 80029b0:	4603      	mov	r3, r0
 80029b2:	01db      	lsls	r3, r3, #7
 80029b4:	4413      	add	r3, r2
 80029b6:	b2c9      	uxtb	r1, r1
 80029b8:	4a03      	ldr	r2, [pc, #12]	; (80029c8 <ssd1306_DrawPixel+0xa0>)
 80029ba:	54d1      	strb	r1, [r2, r3]
 80029bc:	e000      	b.n	80029c0 <ssd1306_DrawPixel+0x98>
        return;
 80029be:	bf00      	nop
    }
}
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr
 80029c8:	20000388 	.word	0x20000388

080029cc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80029cc:	b590      	push	{r4, r7, lr}
 80029ce:	b089      	sub	sp, #36	; 0x24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4604      	mov	r4, r0
 80029d4:	1d38      	adds	r0, r7, #4
 80029d6:	e880 0006 	stmia.w	r0, {r1, r2}
 80029da:	461a      	mov	r2, r3
 80029dc:	4623      	mov	r3, r4
 80029de:	73fb      	strb	r3, [r7, #15]
 80029e0:	4613      	mov	r3, r2
 80029e2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	2b1f      	cmp	r3, #31
 80029e8:	d902      	bls.n	80029f0 <ssd1306_WriteChar+0x24>
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	2b7e      	cmp	r3, #126	; 0x7e
 80029ee:	d901      	bls.n	80029f4 <ssd1306_WriteChar+0x28>
        return 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	e06d      	b.n	8002ad0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80029f4:	4b38      	ldr	r3, [pc, #224]	; (8002ad8 <ssd1306_WriteChar+0x10c>)
 80029f6:	881b      	ldrh	r3, [r3, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	793b      	ldrb	r3, [r7, #4]
 80029fc:	4413      	add	r3, r2
 80029fe:	2b80      	cmp	r3, #128	; 0x80
 8002a00:	dc06      	bgt.n	8002a10 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002a02:	4b35      	ldr	r3, [pc, #212]	; (8002ad8 <ssd1306_WriteChar+0x10c>)
 8002a04:	885b      	ldrh	r3, [r3, #2]
 8002a06:	461a      	mov	r2, r3
 8002a08:	797b      	ldrb	r3, [r7, #5]
 8002a0a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002a0c:	2b40      	cmp	r3, #64	; 0x40
 8002a0e:	dd01      	ble.n	8002a14 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	e05d      	b.n	8002ad0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002a14:	2300      	movs	r3, #0
 8002a16:	61fb      	str	r3, [r7, #28]
 8002a18:	e04c      	b.n	8002ab4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
 8002a1e:	3b20      	subs	r3, #32
 8002a20:	7979      	ldrb	r1, [r7, #5]
 8002a22:	fb01 f303 	mul.w	r3, r1, r3
 8002a26:	4619      	mov	r1, r3
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	440b      	add	r3, r1
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	4413      	add	r3, r2
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002a34:	2300      	movs	r3, #0
 8002a36:	61bb      	str	r3, [r7, #24]
 8002a38:	e034      	b.n	8002aa4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d012      	beq.n	8002a70 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002a4a:	4b23      	ldr	r3, [pc, #140]	; (8002ad8 <ssd1306_WriteChar+0x10c>)
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	b2d8      	uxtb	r0, r3
 8002a58:	4b1f      	ldr	r3, [pc, #124]	; (8002ad8 <ssd1306_WriteChar+0x10c>)
 8002a5a:	885b      	ldrh	r3, [r3, #2]
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	7bba      	ldrb	r2, [r7, #14]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	f7ff ff5d 	bl	8002928 <ssd1306_DrawPixel>
 8002a6e:	e016      	b.n	8002a9e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002a70:	4b19      	ldr	r3, [pc, #100]	; (8002ad8 <ssd1306_WriteChar+0x10c>)
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	b2d8      	uxtb	r0, r3
 8002a7e:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <ssd1306_WriteChar+0x10c>)
 8002a80:	885b      	ldrh	r3, [r3, #2]
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	4413      	add	r3, r2
 8002a8a:	b2d9      	uxtb	r1, r3
 8002a8c:	7bbb      	ldrb	r3, [r7, #14]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	bf0c      	ite	eq
 8002a92:	2301      	moveq	r3, #1
 8002a94:	2300      	movne	r3, #0
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	461a      	mov	r2, r3
 8002a9a:	f7ff ff45 	bl	8002928 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	61bb      	str	r3, [r7, #24]
 8002aa4:	793b      	ldrb	r3, [r7, #4]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d3c5      	bcc.n	8002a3a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	61fb      	str	r3, [r7, #28]
 8002ab4:	797b      	ldrb	r3, [r7, #5]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d3ad      	bcc.n	8002a1a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002abe:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <ssd1306_WriteChar+0x10c>)
 8002ac0:	881a      	ldrh	r2, [r3, #0]
 8002ac2:	793b      	ldrb	r3, [r7, #4]
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	4b03      	ldr	r3, [pc, #12]	; (8002ad8 <ssd1306_WriteChar+0x10c>)
 8002acc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3724      	adds	r7, #36	; 0x24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd90      	pop	{r4, r7, pc}
 8002ad8:	20000788 	.word	0x20000788

08002adc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	1d38      	adds	r0, r7, #4
 8002ae6:	e880 0006 	stmia.w	r0, {r1, r2}
 8002aea:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8002aec:	e012      	b.n	8002b14 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	7818      	ldrb	r0, [r3, #0]
 8002af2:	78fb      	ldrb	r3, [r7, #3]
 8002af4:	1d3a      	adds	r2, r7, #4
 8002af6:	ca06      	ldmia	r2, {r1, r2}
 8002af8:	f7ff ff68 	bl	80029cc <ssd1306_WriteChar>
 8002afc:	4603      	mov	r3, r0
 8002afe:	461a      	mov	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d002      	beq.n	8002b0e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	e008      	b.n	8002b20 <ssd1306_WriteString+0x44>
        }
        str++;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	3301      	adds	r3, #1
 8002b12:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1e8      	bne.n	8002aee <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	781b      	ldrb	r3, [r3, #0]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	460a      	mov	r2, r1
 8002b32:	71fb      	strb	r3, [r7, #7]
 8002b34:	4613      	mov	r3, r2
 8002b36:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <ssd1306_SetCursor+0x2c>)
 8002b3e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002b40:	79bb      	ldrb	r3, [r7, #6]
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <ssd1306_SetCursor+0x2c>)
 8002b46:	805a      	strh	r2, [r3, #2]
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	20000788 	.word	0x20000788

08002b58 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002b62:	2381      	movs	r3, #129	; 0x81
 8002b64:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fdf7 	bl	800275c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff fdf3 	bl	800275c <ssd1306_WriteCommand>
}
 8002b76:	bf00      	nop
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002b90:	23af      	movs	r3, #175	; 0xaf
 8002b92:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002b94:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <ssd1306_SetDisplayOn+0x38>)
 8002b96:	2201      	movs	r2, #1
 8002b98:	715a      	strb	r2, [r3, #5]
 8002b9a:	e004      	b.n	8002ba6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002b9c:	23ae      	movs	r3, #174	; 0xae
 8002b9e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002ba0:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <ssd1306_SetDisplayOn+0x38>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fdd7 	bl	800275c <ssd1306_WriteCommand>
}
 8002bae:	bf00      	nop
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000788 	.word	0x20000788

08002bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bc0:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <HAL_Init+0x28>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a07      	ldr	r2, [pc, #28]	; (8002be4 <HAL_Init+0x28>)
 8002bc6:	f043 0310 	orr.w	r3, r3, #16
 8002bca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bcc:	2003      	movs	r0, #3
 8002bce:	f000 f947 	bl	8002e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bd2:	200f      	movs	r0, #15
 8002bd4:	f000 f808 	bl	8002be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bd8:	f7ff f94c 	bl	8001e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40022000 	.word	0x40022000

08002be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bf0:	4b12      	ldr	r3, [pc, #72]	; (8002c3c <HAL_InitTick+0x54>)
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <HAL_InitTick+0x58>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 f95f 	bl	8002eca <HAL_SYSTICK_Config>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e00e      	b.n	8002c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b0f      	cmp	r3, #15
 8002c1a:	d80a      	bhi.n	8002c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	f04f 30ff 	mov.w	r0, #4294967295
 8002c24:	f000 f927 	bl	8002e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c28:	4a06      	ldr	r2, [pc, #24]	; (8002c44 <HAL_InitTick+0x5c>)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	e000      	b.n	8002c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20000090 	.word	0x20000090
 8002c40:	200000a0 	.word	0x200000a0
 8002c44:	2000009c 	.word	0x2000009c

08002c48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <HAL_IncTick+0x1c>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <HAL_IncTick+0x20>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4413      	add	r3, r2
 8002c58:	4a03      	ldr	r2, [pc, #12]	; (8002c68 <HAL_IncTick+0x20>)
 8002c5a:	6013      	str	r3, [r2, #0]
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr
 8002c64:	200000a0 	.word	0x200000a0
 8002c68:	20000790 	.word	0x20000790

08002c6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c70:	4b02      	ldr	r3, [pc, #8]	; (8002c7c <HAL_GetTick+0x10>)
 8002c72:	681b      	ldr	r3, [r3, #0]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr
 8002c7c:	20000790 	.word	0x20000790

08002c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c88:	f7ff fff0 	bl	8002c6c <HAL_GetTick>
 8002c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c98:	d005      	beq.n	8002ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c9a:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <HAL_Delay+0x44>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ca6:	bf00      	nop
 8002ca8:	f7ff ffe0 	bl	8002c6c <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d8f7      	bhi.n	8002ca8 <HAL_Delay+0x28>
  {
  }
}
 8002cb8:	bf00      	nop
 8002cba:	bf00      	nop
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	200000a0 	.word	0x200000a0

08002cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <__NVIC_SetPriorityGrouping+0x44>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cfa:	4a04      	ldr	r2, [pc, #16]	; (8002d0c <__NVIC_SetPriorityGrouping+0x44>)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	60d3      	str	r3, [r2, #12]
}
 8002d00:	bf00      	nop
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d14:	4b04      	ldr	r3, [pc, #16]	; (8002d28 <__NVIC_GetPriorityGrouping+0x18>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	0a1b      	lsrs	r3, r3, #8
 8002d1a:	f003 0307 	and.w	r3, r3, #7
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	db0b      	blt.n	8002d56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d3e:	79fb      	ldrb	r3, [r7, #7]
 8002d40:	f003 021f 	and.w	r2, r3, #31
 8002d44:	4906      	ldr	r1, [pc, #24]	; (8002d60 <__NVIC_EnableIRQ+0x34>)
 8002d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4a:	095b      	lsrs	r3, r3, #5
 8002d4c:	2001      	movs	r0, #1
 8002d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr
 8002d60:	e000e100 	.word	0xe000e100

08002d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	6039      	str	r1, [r7, #0]
 8002d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	db0a      	blt.n	8002d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	490c      	ldr	r1, [pc, #48]	; (8002db0 <__NVIC_SetPriority+0x4c>)
 8002d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d82:	0112      	lsls	r2, r2, #4
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	440b      	add	r3, r1
 8002d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d8c:	e00a      	b.n	8002da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	4908      	ldr	r1, [pc, #32]	; (8002db4 <__NVIC_SetPriority+0x50>)
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	3b04      	subs	r3, #4
 8002d9c:	0112      	lsls	r2, r2, #4
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	440b      	add	r3, r1
 8002da2:	761a      	strb	r2, [r3, #24]
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	e000e100 	.word	0xe000e100
 8002db4:	e000ed00 	.word	0xe000ed00

08002db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b089      	sub	sp, #36	; 0x24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f1c3 0307 	rsb	r3, r3, #7
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	bf28      	it	cs
 8002dd6:	2304      	movcs	r3, #4
 8002dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	2b06      	cmp	r3, #6
 8002de0:	d902      	bls.n	8002de8 <NVIC_EncodePriority+0x30>
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3b03      	subs	r3, #3
 8002de6:	e000      	b.n	8002dea <NVIC_EncodePriority+0x32>
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dec:	f04f 32ff 	mov.w	r2, #4294967295
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43da      	mvns	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e00:	f04f 31ff 	mov.w	r1, #4294967295
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0a:	43d9      	mvns	r1, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e10:	4313      	orrs	r3, r2
         );
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3724      	adds	r7, #36	; 0x24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e2c:	d301      	bcc.n	8002e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e00f      	b.n	8002e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e32:	4a0a      	ldr	r2, [pc, #40]	; (8002e5c <SysTick_Config+0x40>)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e3a:	210f      	movs	r1, #15
 8002e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e40:	f7ff ff90 	bl	8002d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <SysTick_Config+0x40>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e4a:	4b04      	ldr	r3, [pc, #16]	; (8002e5c <SysTick_Config+0x40>)
 8002e4c:	2207      	movs	r2, #7
 8002e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	e000e010 	.word	0xe000e010

08002e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7ff ff2d 	bl	8002cc8 <__NVIC_SetPriorityGrouping>
}
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b086      	sub	sp, #24
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	607a      	str	r2, [r7, #4]
 8002e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e88:	f7ff ff42 	bl	8002d10 <__NVIC_GetPriorityGrouping>
 8002e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	68b9      	ldr	r1, [r7, #8]
 8002e92:	6978      	ldr	r0, [r7, #20]
 8002e94:	f7ff ff90 	bl	8002db8 <NVIC_EncodePriority>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff ff5f 	bl	8002d64 <__NVIC_SetPriority>
}
 8002ea6:	bf00      	nop
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ff35 	bl	8002d2c <__NVIC_EnableIRQ>
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7ff ffa2 	bl	8002e1c <SysTick_Config>
 8002ed8:	4603      	mov	r3, r0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b085      	sub	sp, #20
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d008      	beq.n	8002f0c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2204      	movs	r2, #4
 8002efe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e020      	b.n	8002f4e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 020e 	bic.w	r2, r2, #14
 8002f1a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0201 	bic.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f34:	2101      	movs	r1, #1
 8002f36:	fa01 f202 	lsl.w	r2, r1, r2
 8002f3a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr

08002f58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f60:	2300      	movs	r3, #0
 8002f62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d005      	beq.n	8002f7c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2204      	movs	r2, #4
 8002f74:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	73fb      	strb	r3, [r7, #15]
 8002f7a:	e051      	b.n	8003020 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 020e 	bic.w	r2, r2, #14
 8002f8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0201 	bic.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a22      	ldr	r2, [pc, #136]	; (800302c <HAL_DMA_Abort_IT+0xd4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d029      	beq.n	8002ffa <HAL_DMA_Abort_IT+0xa2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a21      	ldr	r2, [pc, #132]	; (8003030 <HAL_DMA_Abort_IT+0xd8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d022      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x9e>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a1f      	ldr	r2, [pc, #124]	; (8003034 <HAL_DMA_Abort_IT+0xdc>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d01a      	beq.n	8002ff0 <HAL_DMA_Abort_IT+0x98>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a1e      	ldr	r2, [pc, #120]	; (8003038 <HAL_DMA_Abort_IT+0xe0>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d012      	beq.n	8002fea <HAL_DMA_Abort_IT+0x92>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a1c      	ldr	r2, [pc, #112]	; (800303c <HAL_DMA_Abort_IT+0xe4>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d00a      	beq.n	8002fe4 <HAL_DMA_Abort_IT+0x8c>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a1b      	ldr	r2, [pc, #108]	; (8003040 <HAL_DMA_Abort_IT+0xe8>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d102      	bne.n	8002fde <HAL_DMA_Abort_IT+0x86>
 8002fd8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002fdc:	e00e      	b.n	8002ffc <HAL_DMA_Abort_IT+0xa4>
 8002fde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fe2:	e00b      	b.n	8002ffc <HAL_DMA_Abort_IT+0xa4>
 8002fe4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fe8:	e008      	b.n	8002ffc <HAL_DMA_Abort_IT+0xa4>
 8002fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fee:	e005      	b.n	8002ffc <HAL_DMA_Abort_IT+0xa4>
 8002ff0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ff4:	e002      	b.n	8002ffc <HAL_DMA_Abort_IT+0xa4>
 8002ff6:	2310      	movs	r3, #16
 8002ff8:	e000      	b.n	8002ffc <HAL_DMA_Abort_IT+0xa4>
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	4a11      	ldr	r2, [pc, #68]	; (8003044 <HAL_DMA_Abort_IT+0xec>)
 8002ffe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	4798      	blx	r3
    } 
  }
  return status;
 8003020:	7bfb      	ldrb	r3, [r7, #15]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40020008 	.word	0x40020008
 8003030:	4002001c 	.word	0x4002001c
 8003034:	40020030 	.word	0x40020030
 8003038:	40020044 	.word	0x40020044
 800303c:	40020058 	.word	0x40020058
 8003040:	4002006c 	.word	0x4002006c
 8003044:	40020000 	.word	0x40020000

08003048 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003048:	b480      	push	{r7}
 800304a:	b08b      	sub	sp, #44	; 0x2c
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003052:	2300      	movs	r3, #0
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003056:	2300      	movs	r3, #0
 8003058:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800305a:	e169      	b.n	8003330 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800305c:	2201      	movs	r2, #1
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	69fa      	ldr	r2, [r7, #28]
 800306c:	4013      	ands	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	429a      	cmp	r2, r3
 8003076:	f040 8158 	bne.w	800332a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	4a9a      	ldr	r2, [pc, #616]	; (80032e8 <HAL_GPIO_Init+0x2a0>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d05e      	beq.n	8003142 <HAL_GPIO_Init+0xfa>
 8003084:	4a98      	ldr	r2, [pc, #608]	; (80032e8 <HAL_GPIO_Init+0x2a0>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d875      	bhi.n	8003176 <HAL_GPIO_Init+0x12e>
 800308a:	4a98      	ldr	r2, [pc, #608]	; (80032ec <HAL_GPIO_Init+0x2a4>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d058      	beq.n	8003142 <HAL_GPIO_Init+0xfa>
 8003090:	4a96      	ldr	r2, [pc, #600]	; (80032ec <HAL_GPIO_Init+0x2a4>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d86f      	bhi.n	8003176 <HAL_GPIO_Init+0x12e>
 8003096:	4a96      	ldr	r2, [pc, #600]	; (80032f0 <HAL_GPIO_Init+0x2a8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d052      	beq.n	8003142 <HAL_GPIO_Init+0xfa>
 800309c:	4a94      	ldr	r2, [pc, #592]	; (80032f0 <HAL_GPIO_Init+0x2a8>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d869      	bhi.n	8003176 <HAL_GPIO_Init+0x12e>
 80030a2:	4a94      	ldr	r2, [pc, #592]	; (80032f4 <HAL_GPIO_Init+0x2ac>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d04c      	beq.n	8003142 <HAL_GPIO_Init+0xfa>
 80030a8:	4a92      	ldr	r2, [pc, #584]	; (80032f4 <HAL_GPIO_Init+0x2ac>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d863      	bhi.n	8003176 <HAL_GPIO_Init+0x12e>
 80030ae:	4a92      	ldr	r2, [pc, #584]	; (80032f8 <HAL_GPIO_Init+0x2b0>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d046      	beq.n	8003142 <HAL_GPIO_Init+0xfa>
 80030b4:	4a90      	ldr	r2, [pc, #576]	; (80032f8 <HAL_GPIO_Init+0x2b0>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d85d      	bhi.n	8003176 <HAL_GPIO_Init+0x12e>
 80030ba:	2b12      	cmp	r3, #18
 80030bc:	d82a      	bhi.n	8003114 <HAL_GPIO_Init+0xcc>
 80030be:	2b12      	cmp	r3, #18
 80030c0:	d859      	bhi.n	8003176 <HAL_GPIO_Init+0x12e>
 80030c2:	a201      	add	r2, pc, #4	; (adr r2, 80030c8 <HAL_GPIO_Init+0x80>)
 80030c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c8:	08003143 	.word	0x08003143
 80030cc:	0800311d 	.word	0x0800311d
 80030d0:	0800312f 	.word	0x0800312f
 80030d4:	08003171 	.word	0x08003171
 80030d8:	08003177 	.word	0x08003177
 80030dc:	08003177 	.word	0x08003177
 80030e0:	08003177 	.word	0x08003177
 80030e4:	08003177 	.word	0x08003177
 80030e8:	08003177 	.word	0x08003177
 80030ec:	08003177 	.word	0x08003177
 80030f0:	08003177 	.word	0x08003177
 80030f4:	08003177 	.word	0x08003177
 80030f8:	08003177 	.word	0x08003177
 80030fc:	08003177 	.word	0x08003177
 8003100:	08003177 	.word	0x08003177
 8003104:	08003177 	.word	0x08003177
 8003108:	08003177 	.word	0x08003177
 800310c:	08003125 	.word	0x08003125
 8003110:	08003139 	.word	0x08003139
 8003114:	4a79      	ldr	r2, [pc, #484]	; (80032fc <HAL_GPIO_Init+0x2b4>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d013      	beq.n	8003142 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800311a:	e02c      	b.n	8003176 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	623b      	str	r3, [r7, #32]
          break;
 8003122:	e029      	b.n	8003178 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	3304      	adds	r3, #4
 800312a:	623b      	str	r3, [r7, #32]
          break;
 800312c:	e024      	b.n	8003178 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	3308      	adds	r3, #8
 8003134:	623b      	str	r3, [r7, #32]
          break;
 8003136:	e01f      	b.n	8003178 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	330c      	adds	r3, #12
 800313e:	623b      	str	r3, [r7, #32]
          break;
 8003140:	e01a      	b.n	8003178 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d102      	bne.n	8003150 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800314a:	2304      	movs	r3, #4
 800314c:	623b      	str	r3, [r7, #32]
          break;
 800314e:	e013      	b.n	8003178 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d105      	bne.n	8003164 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003158:	2308      	movs	r3, #8
 800315a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69fa      	ldr	r2, [r7, #28]
 8003160:	611a      	str	r2, [r3, #16]
          break;
 8003162:	e009      	b.n	8003178 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003164:	2308      	movs	r3, #8
 8003166:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69fa      	ldr	r2, [r7, #28]
 800316c:	615a      	str	r2, [r3, #20]
          break;
 800316e:	e003      	b.n	8003178 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003170:	2300      	movs	r3, #0
 8003172:	623b      	str	r3, [r7, #32]
          break;
 8003174:	e000      	b.n	8003178 <HAL_GPIO_Init+0x130>
          break;
 8003176:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	2bff      	cmp	r3, #255	; 0xff
 800317c:	d801      	bhi.n	8003182 <HAL_GPIO_Init+0x13a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	e001      	b.n	8003186 <HAL_GPIO_Init+0x13e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3304      	adds	r3, #4
 8003186:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	2bff      	cmp	r3, #255	; 0xff
 800318c:	d802      	bhi.n	8003194 <HAL_GPIO_Init+0x14c>
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	e002      	b.n	800319a <HAL_GPIO_Init+0x152>
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	3b08      	subs	r3, #8
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	210f      	movs	r1, #15
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	fa01 f303 	lsl.w	r3, r1, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	401a      	ands	r2, r3
 80031ac:	6a39      	ldr	r1, [r7, #32]
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	fa01 f303 	lsl.w	r3, r1, r3
 80031b4:	431a      	orrs	r2, r3
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 80b1 	beq.w	800332a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031c8:	4b4d      	ldr	r3, [pc, #308]	; (8003300 <HAL_GPIO_Init+0x2b8>)
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	4a4c      	ldr	r2, [pc, #304]	; (8003300 <HAL_GPIO_Init+0x2b8>)
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	6193      	str	r3, [r2, #24]
 80031d4:	4b4a      	ldr	r3, [pc, #296]	; (8003300 <HAL_GPIO_Init+0x2b8>)
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	60bb      	str	r3, [r7, #8]
 80031de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031e0:	4a48      	ldr	r2, [pc, #288]	; (8003304 <HAL_GPIO_Init+0x2bc>)
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	089b      	lsrs	r3, r3, #2
 80031e6:	3302      	adds	r3, #2
 80031e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	f003 0303 	and.w	r3, r3, #3
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	220f      	movs	r2, #15
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4013      	ands	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a40      	ldr	r2, [pc, #256]	; (8003308 <HAL_GPIO_Init+0x2c0>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d013      	beq.n	8003234 <HAL_GPIO_Init+0x1ec>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a3f      	ldr	r2, [pc, #252]	; (800330c <HAL_GPIO_Init+0x2c4>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d00d      	beq.n	8003230 <HAL_GPIO_Init+0x1e8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a3e      	ldr	r2, [pc, #248]	; (8003310 <HAL_GPIO_Init+0x2c8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d007      	beq.n	800322c <HAL_GPIO_Init+0x1e4>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a3d      	ldr	r2, [pc, #244]	; (8003314 <HAL_GPIO_Init+0x2cc>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d101      	bne.n	8003228 <HAL_GPIO_Init+0x1e0>
 8003224:	2303      	movs	r3, #3
 8003226:	e006      	b.n	8003236 <HAL_GPIO_Init+0x1ee>
 8003228:	2304      	movs	r3, #4
 800322a:	e004      	b.n	8003236 <HAL_GPIO_Init+0x1ee>
 800322c:	2302      	movs	r3, #2
 800322e:	e002      	b.n	8003236 <HAL_GPIO_Init+0x1ee>
 8003230:	2301      	movs	r3, #1
 8003232:	e000      	b.n	8003236 <HAL_GPIO_Init+0x1ee>
 8003234:	2300      	movs	r3, #0
 8003236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003238:	f002 0203 	and.w	r2, r2, #3
 800323c:	0092      	lsls	r2, r2, #2
 800323e:	4093      	lsls	r3, r2
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4313      	orrs	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003246:	492f      	ldr	r1, [pc, #188]	; (8003304 <HAL_GPIO_Init+0x2bc>)
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	089b      	lsrs	r3, r3, #2
 800324c:	3302      	adds	r3, #2
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d006      	beq.n	800326e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003260:	4b2d      	ldr	r3, [pc, #180]	; (8003318 <HAL_GPIO_Init+0x2d0>)
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	492c      	ldr	r1, [pc, #176]	; (8003318 <HAL_GPIO_Init+0x2d0>)
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	4313      	orrs	r3, r2
 800326a:	608b      	str	r3, [r1, #8]
 800326c:	e006      	b.n	800327c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800326e:	4b2a      	ldr	r3, [pc, #168]	; (8003318 <HAL_GPIO_Init+0x2d0>)
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	43db      	mvns	r3, r3
 8003276:	4928      	ldr	r1, [pc, #160]	; (8003318 <HAL_GPIO_Init+0x2d0>)
 8003278:	4013      	ands	r3, r2
 800327a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d006      	beq.n	8003296 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003288:	4b23      	ldr	r3, [pc, #140]	; (8003318 <HAL_GPIO_Init+0x2d0>)
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	4922      	ldr	r1, [pc, #136]	; (8003318 <HAL_GPIO_Init+0x2d0>)
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	4313      	orrs	r3, r2
 8003292:	60cb      	str	r3, [r1, #12]
 8003294:	e006      	b.n	80032a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003296:	4b20      	ldr	r3, [pc, #128]	; (8003318 <HAL_GPIO_Init+0x2d0>)
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	43db      	mvns	r3, r3
 800329e:	491e      	ldr	r1, [pc, #120]	; (8003318 <HAL_GPIO_Init+0x2d0>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d006      	beq.n	80032be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032b0:	4b19      	ldr	r3, [pc, #100]	; (8003318 <HAL_GPIO_Init+0x2d0>)
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	4918      	ldr	r1, [pc, #96]	; (8003318 <HAL_GPIO_Init+0x2d0>)
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	604b      	str	r3, [r1, #4]
 80032bc:	e006      	b.n	80032cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032be:	4b16      	ldr	r3, [pc, #88]	; (8003318 <HAL_GPIO_Init+0x2d0>)
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	43db      	mvns	r3, r3
 80032c6:	4914      	ldr	r1, [pc, #80]	; (8003318 <HAL_GPIO_Init+0x2d0>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d021      	beq.n	800331c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80032d8:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <HAL_GPIO_Init+0x2d0>)
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	490e      	ldr	r1, [pc, #56]	; (8003318 <HAL_GPIO_Init+0x2d0>)
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	600b      	str	r3, [r1, #0]
 80032e4:	e021      	b.n	800332a <HAL_GPIO_Init+0x2e2>
 80032e6:	bf00      	nop
 80032e8:	10320000 	.word	0x10320000
 80032ec:	10310000 	.word	0x10310000
 80032f0:	10220000 	.word	0x10220000
 80032f4:	10210000 	.word	0x10210000
 80032f8:	10120000 	.word	0x10120000
 80032fc:	10110000 	.word	0x10110000
 8003300:	40021000 	.word	0x40021000
 8003304:	40010000 	.word	0x40010000
 8003308:	40010800 	.word	0x40010800
 800330c:	40010c00 	.word	0x40010c00
 8003310:	40011000 	.word	0x40011000
 8003314:	40011400 	.word	0x40011400
 8003318:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800331c:	4b0b      	ldr	r3, [pc, #44]	; (800334c <HAL_GPIO_Init+0x304>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	43db      	mvns	r3, r3
 8003324:	4909      	ldr	r1, [pc, #36]	; (800334c <HAL_GPIO_Init+0x304>)
 8003326:	4013      	ands	r3, r2
 8003328:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	3301      	adds	r3, #1
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	fa22 f303 	lsr.w	r3, r2, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	f47f ae8e 	bne.w	800305c <HAL_GPIO_Init+0x14>
  }
}
 8003340:	bf00      	nop
 8003342:	bf00      	nop
 8003344:	372c      	adds	r7, #44	; 0x2c
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr
 800334c:	40010400 	.word	0x40010400

08003350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	807b      	strh	r3, [r7, #2]
 800335c:	4613      	mov	r3, r2
 800335e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003360:	787b      	ldrb	r3, [r7, #1]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003366:	887a      	ldrh	r2, [r7, #2]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800336c:	e003      	b.n	8003376 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800336e:	887b      	ldrh	r3, [r7, #2]
 8003370:	041a      	lsls	r2, r3, #16
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	611a      	str	r2, [r3, #16]
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr

08003380 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003392:	887a      	ldrh	r2, [r7, #2]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4013      	ands	r3, r2
 8003398:	041a      	lsls	r2, r3, #16
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	43d9      	mvns	r1, r3
 800339e:	887b      	ldrh	r3, [r7, #2]
 80033a0:	400b      	ands	r3, r1
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	611a      	str	r2, [r3, #16]
}
 80033a8:	bf00      	nop
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bc80      	pop	{r7}
 80033b0:	4770      	bx	lr
	...

080033b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e12b      	b.n	800361e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fe fbf2 	bl	8001bc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2224      	movs	r2, #36	; 0x24
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0201 	bic.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003406:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003416:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003418:	f001 fbf0 	bl	8004bfc <HAL_RCC_GetPCLK1Freq>
 800341c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	4a81      	ldr	r2, [pc, #516]	; (8003628 <HAL_I2C_Init+0x274>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d807      	bhi.n	8003438 <HAL_I2C_Init+0x84>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4a80      	ldr	r2, [pc, #512]	; (800362c <HAL_I2C_Init+0x278>)
 800342c:	4293      	cmp	r3, r2
 800342e:	bf94      	ite	ls
 8003430:	2301      	movls	r3, #1
 8003432:	2300      	movhi	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	e006      	b.n	8003446 <HAL_I2C_Init+0x92>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4a7d      	ldr	r2, [pc, #500]	; (8003630 <HAL_I2C_Init+0x27c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	bf94      	ite	ls
 8003440:	2301      	movls	r3, #1
 8003442:	2300      	movhi	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e0e7      	b.n	800361e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4a78      	ldr	r2, [pc, #480]	; (8003634 <HAL_I2C_Init+0x280>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	0c9b      	lsrs	r3, r3, #18
 8003458:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	4a6a      	ldr	r2, [pc, #424]	; (8003628 <HAL_I2C_Init+0x274>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d802      	bhi.n	8003488 <HAL_I2C_Init+0xd4>
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	3301      	adds	r3, #1
 8003486:	e009      	b.n	800349c <HAL_I2C_Init+0xe8>
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800348e:	fb02 f303 	mul.w	r3, r2, r3
 8003492:	4a69      	ldr	r2, [pc, #420]	; (8003638 <HAL_I2C_Init+0x284>)
 8003494:	fba2 2303 	umull	r2, r3, r2, r3
 8003498:	099b      	lsrs	r3, r3, #6
 800349a:	3301      	adds	r3, #1
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6812      	ldr	r2, [r2, #0]
 80034a0:	430b      	orrs	r3, r1
 80034a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	495c      	ldr	r1, [pc, #368]	; (8003628 <HAL_I2C_Init+0x274>)
 80034b8:	428b      	cmp	r3, r1
 80034ba:	d819      	bhi.n	80034f0 <HAL_I2C_Init+0x13c>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	1e59      	subs	r1, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80034ca:	1c59      	adds	r1, r3, #1
 80034cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034d0:	400b      	ands	r3, r1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00a      	beq.n	80034ec <HAL_I2C_Init+0x138>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	1e59      	subs	r1, r3, #1
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80034e4:	3301      	adds	r3, #1
 80034e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ea:	e051      	b.n	8003590 <HAL_I2C_Init+0x1dc>
 80034ec:	2304      	movs	r3, #4
 80034ee:	e04f      	b.n	8003590 <HAL_I2C_Init+0x1dc>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d111      	bne.n	800351c <HAL_I2C_Init+0x168>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	1e58      	subs	r0, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6859      	ldr	r1, [r3, #4]
 8003500:	460b      	mov	r3, r1
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	440b      	add	r3, r1
 8003506:	fbb0 f3f3 	udiv	r3, r0, r3
 800350a:	3301      	adds	r3, #1
 800350c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003510:	2b00      	cmp	r3, #0
 8003512:	bf0c      	ite	eq
 8003514:	2301      	moveq	r3, #1
 8003516:	2300      	movne	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	e012      	b.n	8003542 <HAL_I2C_Init+0x18e>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	1e58      	subs	r0, r3, #1
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6859      	ldr	r1, [r3, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	0099      	lsls	r1, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003532:	3301      	adds	r3, #1
 8003534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003538:	2b00      	cmp	r3, #0
 800353a:	bf0c      	ite	eq
 800353c:	2301      	moveq	r3, #1
 800353e:	2300      	movne	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <HAL_I2C_Init+0x196>
 8003546:	2301      	movs	r3, #1
 8003548:	e022      	b.n	8003590 <HAL_I2C_Init+0x1dc>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10e      	bne.n	8003570 <HAL_I2C_Init+0x1bc>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	1e58      	subs	r0, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6859      	ldr	r1, [r3, #4]
 800355a:	460b      	mov	r3, r1
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	440b      	add	r3, r1
 8003560:	fbb0 f3f3 	udiv	r3, r0, r3
 8003564:	3301      	adds	r3, #1
 8003566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800356a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800356e:	e00f      	b.n	8003590 <HAL_I2C_Init+0x1dc>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	1e58      	subs	r0, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6859      	ldr	r1, [r3, #4]
 8003578:	460b      	mov	r3, r1
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	0099      	lsls	r1, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	fbb0 f3f3 	udiv	r3, r0, r3
 8003586:	3301      	adds	r3, #1
 8003588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800358c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	6809      	ldr	r1, [r1, #0]
 8003594:	4313      	orrs	r3, r2
 8003596:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69da      	ldr	r2, [r3, #28]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6911      	ldr	r1, [r2, #16]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68d2      	ldr	r2, [r2, #12]
 80035ca:	4311      	orrs	r1, r2
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	430b      	orrs	r3, r1
 80035d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695a      	ldr	r2, [r3, #20]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0201 	orr.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	000186a0 	.word	0x000186a0
 800362c:	001e847f 	.word	0x001e847f
 8003630:	003d08ff 	.word	0x003d08ff
 8003634:	431bde83 	.word	0x431bde83
 8003638:	10624dd3 	.word	0x10624dd3

0800363c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af02      	add	r7, sp, #8
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	4608      	mov	r0, r1
 8003646:	4611      	mov	r1, r2
 8003648:	461a      	mov	r2, r3
 800364a:	4603      	mov	r3, r0
 800364c:	817b      	strh	r3, [r7, #10]
 800364e:	460b      	mov	r3, r1
 8003650:	813b      	strh	r3, [r7, #8]
 8003652:	4613      	mov	r3, r2
 8003654:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003656:	f7ff fb09 	bl	8002c6c <HAL_GetTick>
 800365a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b20      	cmp	r3, #32
 8003666:	f040 80d9 	bne.w	800381c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	2319      	movs	r3, #25
 8003670:	2201      	movs	r2, #1
 8003672:	496d      	ldr	r1, [pc, #436]	; (8003828 <HAL_I2C_Mem_Write+0x1ec>)
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 fcc1 	bl	8003ffc <I2C_WaitOnFlagUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003680:	2302      	movs	r3, #2
 8003682:	e0cc      	b.n	800381e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800368a:	2b01      	cmp	r3, #1
 800368c:	d101      	bne.n	8003692 <HAL_I2C_Mem_Write+0x56>
 800368e:	2302      	movs	r3, #2
 8003690:	e0c5      	b.n	800381e <HAL_I2C_Mem_Write+0x1e2>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d007      	beq.n	80036b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0201 	orr.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2221      	movs	r2, #33	; 0x21
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2240      	movs	r2, #64	; 0x40
 80036d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a3a      	ldr	r2, [r7, #32]
 80036e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4a4d      	ldr	r2, [pc, #308]	; (800382c <HAL_I2C_Mem_Write+0x1f0>)
 80036f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036fa:	88f8      	ldrh	r0, [r7, #6]
 80036fc:	893a      	ldrh	r2, [r7, #8]
 80036fe:	8979      	ldrh	r1, [r7, #10]
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	9301      	str	r3, [sp, #4]
 8003704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	4603      	mov	r3, r0
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 faf8 	bl	8003d00 <I2C_RequestMemoryWrite>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d052      	beq.n	80037bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e081      	b.n	800381e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 fd86 	bl	8004230 <I2C_WaitOnTXEFlagUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00d      	beq.n	8003746 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	2b04      	cmp	r3, #4
 8003730:	d107      	bne.n	8003742 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003740:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e06b      	b.n	800381e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	781a      	ldrb	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003760:	3b01      	subs	r3, #1
 8003762:	b29a      	uxth	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376c:	b29b      	uxth	r3, r3
 800376e:	3b01      	subs	r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b04      	cmp	r3, #4
 8003782:	d11b      	bne.n	80037bc <HAL_I2C_Mem_Write+0x180>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003788:	2b00      	cmp	r3, #0
 800378a:	d017      	beq.n	80037bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	781a      	ldrb	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1aa      	bne.n	800371a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 fd79 	bl	80042c0 <I2C_WaitOnBTFFlagUntilTimeout>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00d      	beq.n	80037f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d107      	bne.n	80037ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e016      	b.n	800381e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2220      	movs	r2, #32
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003818:	2300      	movs	r3, #0
 800381a:	e000      	b.n	800381e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800381c:	2302      	movs	r3, #2
  }
}
 800381e:	4618      	mov	r0, r3
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	00100002 	.word	0x00100002
 800382c:	ffff0000 	.word	0xffff0000

08003830 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b08c      	sub	sp, #48	; 0x30
 8003834:	af02      	add	r7, sp, #8
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	4608      	mov	r0, r1
 800383a:	4611      	mov	r1, r2
 800383c:	461a      	mov	r2, r3
 800383e:	4603      	mov	r3, r0
 8003840:	817b      	strh	r3, [r7, #10]
 8003842:	460b      	mov	r3, r1
 8003844:	813b      	strh	r3, [r7, #8]
 8003846:	4613      	mov	r3, r2
 8003848:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800384a:	2300      	movs	r3, #0
 800384c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800384e:	f7ff fa0d 	bl	8002c6c <HAL_GetTick>
 8003852:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b20      	cmp	r3, #32
 800385e:	f040 8244 	bne.w	8003cea <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	2319      	movs	r3, #25
 8003868:	2201      	movs	r2, #1
 800386a:	4982      	ldr	r1, [pc, #520]	; (8003a74 <HAL_I2C_Mem_Read+0x244>)
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 fbc5 	bl	8003ffc <I2C_WaitOnFlagUntilTimeout>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003878:	2302      	movs	r3, #2
 800387a:	e237      	b.n	8003cec <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_I2C_Mem_Read+0x5a>
 8003886:	2302      	movs	r3, #2
 8003888:	e230      	b.n	8003cec <HAL_I2C_Mem_Read+0x4bc>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b01      	cmp	r3, #1
 800389e:	d007      	beq.n	80038b0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2222      	movs	r2, #34	; 0x22
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2240      	movs	r2, #64	; 0x40
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80038e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4a62      	ldr	r2, [pc, #392]	; (8003a78 <HAL_I2C_Mem_Read+0x248>)
 80038f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038f2:	88f8      	ldrh	r0, [r7, #6]
 80038f4:	893a      	ldrh	r2, [r7, #8]
 80038f6:	8979      	ldrh	r1, [r7, #10]
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	9301      	str	r3, [sp, #4]
 80038fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	4603      	mov	r3, r0
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 fa92 	bl	8003e2c <I2C_RequestMemoryRead>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e1ec      	b.n	8003cec <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003916:	2b00      	cmp	r3, #0
 8003918:	d113      	bne.n	8003942 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800391a:	2300      	movs	r3, #0
 800391c:	61fb      	str	r3, [r7, #28]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	61fb      	str	r3, [r7, #28]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	61fb      	str	r3, [r7, #28]
 800392e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	e1c0      	b.n	8003cc4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003946:	2b01      	cmp	r3, #1
 8003948:	d11e      	bne.n	8003988 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003958:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800395a:	b672      	cpsid	i
}
 800395c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800395e:	2300      	movs	r3, #0
 8003960:	61bb      	str	r3, [r7, #24]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	61bb      	str	r3, [r7, #24]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	61bb      	str	r3, [r7, #24]
 8003972:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003982:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003984:	b662      	cpsie	i
}
 8003986:	e035      	b.n	80039f4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398c:	2b02      	cmp	r3, #2
 800398e:	d11e      	bne.n	80039ce <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800399e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039a0:	b672      	cpsid	i
}
 80039a2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039a4:	2300      	movs	r3, #0
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80039ca:	b662      	cpsie	i
}
 80039cc:	e012      	b.n	80039f4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039dc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039de:	2300      	movs	r3, #0
 80039e0:	613b      	str	r3, [r7, #16]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	613b      	str	r3, [r7, #16]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	613b      	str	r3, [r7, #16]
 80039f2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80039f4:	e166      	b.n	8003cc4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fa:	2b03      	cmp	r3, #3
 80039fc:	f200 811f 	bhi.w	8003c3e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d123      	bne.n	8003a50 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 fc9f 	bl	8004350 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e167      	b.n	8003cec <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	691a      	ldr	r2, [r3, #16]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a4e:	e139      	b.n	8003cc4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d152      	bne.n	8003afe <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5e:	2200      	movs	r2, #0
 8003a60:	4906      	ldr	r1, [pc, #24]	; (8003a7c <HAL_I2C_Mem_Read+0x24c>)
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 faca 	bl	8003ffc <I2C_WaitOnFlagUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d008      	beq.n	8003a80 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e13c      	b.n	8003cec <HAL_I2C_Mem_Read+0x4bc>
 8003a72:	bf00      	nop
 8003a74:	00100002 	.word	0x00100002
 8003a78:	ffff0000 	.word	0xffff0000
 8003a7c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003a80:	b672      	cpsid	i
}
 8003a82:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	691a      	ldr	r2, [r3, #16]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003ac6:	b662      	cpsie	i
}
 8003ac8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	691a      	ldr	r2, [r3, #16]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003afc:	e0e2      	b.n	8003cc4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b04:	2200      	movs	r2, #0
 8003b06:	497b      	ldr	r1, [pc, #492]	; (8003cf4 <HAL_I2C_Mem_Read+0x4c4>)
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 fa77 	bl	8003ffc <I2C_WaitOnFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0e9      	b.n	8003cec <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b28:	b672      	cpsid	i
}
 8003b2a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691a      	ldr	r2, [r3, #16]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b5e:	4b66      	ldr	r3, [pc, #408]	; (8003cf8 <HAL_I2C_Mem_Read+0x4c8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	08db      	lsrs	r3, r3, #3
 8003b64:	4a65      	ldr	r2, [pc, #404]	; (8003cfc <HAL_I2C_Mem_Read+0x4cc>)
 8003b66:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6a:	0a1a      	lsrs	r2, r3, #8
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	00da      	lsls	r2, r3, #3
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d118      	bne.n	8003bb6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	f043 0220 	orr.w	r2, r3, #32
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003ba6:	b662      	cpsie	i
}
 8003ba8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e09a      	b.n	8003cec <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	d1d9      	bne.n	8003b78 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691a      	ldr	r2, [r3, #16]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003c06:	b662      	cpsie	i
}
 8003c08:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	691a      	ldr	r2, [r3, #16]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	b2d2      	uxtb	r2, r2
 8003c16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c3c:	e042      	b.n	8003cc4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 fb84 	bl	8004350 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e04c      	b.n	8003cec <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	691a      	ldr	r2, [r3, #16]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	1c5a      	adds	r2, r3, #1
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	f003 0304 	and.w	r3, r3, #4
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d118      	bne.n	8003cc4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f47f ae94 	bne.w	80039f6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	e000      	b.n	8003cec <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003cea:	2302      	movs	r3, #2
  }
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3728      	adds	r7, #40	; 0x28
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	00010004 	.word	0x00010004
 8003cf8:	20000090 	.word	0x20000090
 8003cfc:	14f8b589 	.word	0x14f8b589

08003d00 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b088      	sub	sp, #32
 8003d04:	af02      	add	r7, sp, #8
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	4608      	mov	r0, r1
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4603      	mov	r3, r0
 8003d10:	817b      	strh	r3, [r7, #10]
 8003d12:	460b      	mov	r3, r1
 8003d14:	813b      	strh	r3, [r7, #8]
 8003d16:	4613      	mov	r3, r2
 8003d18:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 f960 	bl	8003ffc <I2C_WaitOnFlagUntilTimeout>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00d      	beq.n	8003d5e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d50:	d103      	bne.n	8003d5a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e05f      	b.n	8003e1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d5e:	897b      	ldrh	r3, [r7, #10]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	461a      	mov	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	6a3a      	ldr	r2, [r7, #32]
 8003d72:	492d      	ldr	r1, [pc, #180]	; (8003e28 <I2C_RequestMemoryWrite+0x128>)
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 f9bb 	bl	80040f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e04c      	b.n	8003e1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d84:	2300      	movs	r3, #0
 8003d86:	617b      	str	r3, [r7, #20]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9c:	6a39      	ldr	r1, [r7, #32]
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 fa46 	bl	8004230 <I2C_WaitOnTXEFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00d      	beq.n	8003dc6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d107      	bne.n	8003dc2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e02b      	b.n	8003e1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dc6:	88fb      	ldrh	r3, [r7, #6]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d105      	bne.n	8003dd8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dcc:	893b      	ldrh	r3, [r7, #8]
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	611a      	str	r2, [r3, #16]
 8003dd6:	e021      	b.n	8003e1c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003dd8:	893b      	ldrh	r3, [r7, #8]
 8003dda:	0a1b      	lsrs	r3, r3, #8
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de8:	6a39      	ldr	r1, [r7, #32]
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 fa20 	bl	8004230 <I2C_WaitOnTXEFlagUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00d      	beq.n	8003e12 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d107      	bne.n	8003e0e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e005      	b.n	8003e1e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e12:	893b      	ldrh	r3, [r7, #8]
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	00010002 	.word	0x00010002

08003e2c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b088      	sub	sp, #32
 8003e30:	af02      	add	r7, sp, #8
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	4608      	mov	r0, r1
 8003e36:	4611      	mov	r1, r2
 8003e38:	461a      	mov	r2, r3
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	817b      	strh	r3, [r7, #10]
 8003e3e:	460b      	mov	r3, r1
 8003e40:	813b      	strh	r3, [r7, #8]
 8003e42:	4613      	mov	r3, r2
 8003e44:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e54:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 f8c2 	bl	8003ffc <I2C_WaitOnFlagUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00d      	beq.n	8003e9a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e8c:	d103      	bne.n	8003e96 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e0aa      	b.n	8003ff0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e9a:	897b      	ldrh	r3, [r7, #10]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ea8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	6a3a      	ldr	r2, [r7, #32]
 8003eae:	4952      	ldr	r1, [pc, #328]	; (8003ff8 <I2C_RequestMemoryRead+0x1cc>)
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 f91d 	bl	80040f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e097      	b.n	8003ff0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed8:	6a39      	ldr	r1, [r7, #32]
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 f9a8 	bl	8004230 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00d      	beq.n	8003f02 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d107      	bne.n	8003efe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003efc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e076      	b.n	8003ff0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f02:	88fb      	ldrh	r3, [r7, #6]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d105      	bne.n	8003f14 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f08:	893b      	ldrh	r3, [r7, #8]
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	611a      	str	r2, [r3, #16]
 8003f12:	e021      	b.n	8003f58 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f14:	893b      	ldrh	r3, [r7, #8]
 8003f16:	0a1b      	lsrs	r3, r3, #8
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f24:	6a39      	ldr	r1, [r7, #32]
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 f982 	bl	8004230 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00d      	beq.n	8003f4e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d107      	bne.n	8003f4a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e050      	b.n	8003ff0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f4e:	893b      	ldrh	r3, [r7, #8]
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f5a:	6a39      	ldr	r1, [r7, #32]
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f000 f967 	bl	8004230 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00d      	beq.n	8003f84 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d107      	bne.n	8003f80 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f7e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e035      	b.n	8003ff0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f92:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 f82b 	bl	8003ffc <I2C_WaitOnFlagUntilTimeout>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00d      	beq.n	8003fc8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fba:	d103      	bne.n	8003fc4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e013      	b.n	8003ff0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fc8:	897b      	ldrh	r3, [r7, #10]
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	f043 0301 	orr.w	r3, r3, #1
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	6a3a      	ldr	r2, [r7, #32]
 8003fdc:	4906      	ldr	r1, [pc, #24]	; (8003ff8 <I2C_RequestMemoryRead+0x1cc>)
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 f886 	bl	80040f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	00010002 	.word	0x00010002

08003ffc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	4613      	mov	r3, r2
 800400a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800400c:	e048      	b.n	80040a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004014:	d044      	beq.n	80040a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004016:	f7fe fe29 	bl	8002c6c <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	429a      	cmp	r2, r3
 8004024:	d302      	bcc.n	800402c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d139      	bne.n	80040a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	0c1b      	lsrs	r3, r3, #16
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b01      	cmp	r3, #1
 8004034:	d10d      	bne.n	8004052 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	43da      	mvns	r2, r3
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	4013      	ands	r3, r2
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	bf0c      	ite	eq
 8004048:	2301      	moveq	r3, #1
 800404a:	2300      	movne	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	461a      	mov	r2, r3
 8004050:	e00c      	b.n	800406c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	43da      	mvns	r2, r3
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	4013      	ands	r3, r2
 800405e:	b29b      	uxth	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	bf0c      	ite	eq
 8004064:	2301      	moveq	r3, #1
 8004066:	2300      	movne	r3, #0
 8004068:	b2db      	uxtb	r3, r3
 800406a:	461a      	mov	r2, r3
 800406c:	79fb      	ldrb	r3, [r7, #7]
 800406e:	429a      	cmp	r2, r3
 8004070:	d116      	bne.n	80040a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	f043 0220 	orr.w	r2, r3, #32
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e023      	b.n	80040e8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	0c1b      	lsrs	r3, r3, #16
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d10d      	bne.n	80040c6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	43da      	mvns	r2, r3
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	4013      	ands	r3, r2
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	bf0c      	ite	eq
 80040bc:	2301      	moveq	r3, #1
 80040be:	2300      	movne	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	461a      	mov	r2, r3
 80040c4:	e00c      	b.n	80040e0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	43da      	mvns	r2, r3
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	4013      	ands	r3, r2
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	bf0c      	ite	eq
 80040d8:	2301      	moveq	r3, #1
 80040da:	2300      	movne	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	461a      	mov	r2, r3
 80040e0:	79fb      	ldrb	r3, [r7, #7]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d093      	beq.n	800400e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
 80040fc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040fe:	e071      	b.n	80041e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800410e:	d123      	bne.n	8004158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800411e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004128:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2220      	movs	r2, #32
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004144:	f043 0204 	orr.w	r2, r3, #4
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e067      	b.n	8004228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415e:	d041      	beq.n	80041e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004160:	f7fe fd84 	bl	8002c6c <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	429a      	cmp	r2, r3
 800416e:	d302      	bcc.n	8004176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d136      	bne.n	80041e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	0c1b      	lsrs	r3, r3, #16
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b01      	cmp	r3, #1
 800417e:	d10c      	bne.n	800419a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	43da      	mvns	r2, r3
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	4013      	ands	r3, r2
 800418c:	b29b      	uxth	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	bf14      	ite	ne
 8004192:	2301      	movne	r3, #1
 8004194:	2300      	moveq	r3, #0
 8004196:	b2db      	uxtb	r3, r3
 8004198:	e00b      	b.n	80041b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	43da      	mvns	r2, r3
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	4013      	ands	r3, r2
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	bf14      	ite	ne
 80041ac:	2301      	movne	r3, #1
 80041ae:	2300      	moveq	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d016      	beq.n	80041e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	f043 0220 	orr.w	r2, r3, #32
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e021      	b.n	8004228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	0c1b      	lsrs	r3, r3, #16
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d10c      	bne.n	8004208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	43da      	mvns	r2, r3
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	4013      	ands	r3, r2
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	bf14      	ite	ne
 8004200:	2301      	movne	r3, #1
 8004202:	2300      	moveq	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	e00b      	b.n	8004220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	43da      	mvns	r2, r3
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	4013      	ands	r3, r2
 8004214:	b29b      	uxth	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	bf14      	ite	ne
 800421a:	2301      	movne	r3, #1
 800421c:	2300      	moveq	r3, #0
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	f47f af6d 	bne.w	8004100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800423c:	e034      	b.n	80042a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 f8e3 	bl	800440a <I2C_IsAcknowledgeFailed>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e034      	b.n	80042b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004254:	d028      	beq.n	80042a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004256:	f7fe fd09 	bl	8002c6c <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	429a      	cmp	r2, r3
 8004264:	d302      	bcc.n	800426c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d11d      	bne.n	80042a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004276:	2b80      	cmp	r3, #128	; 0x80
 8004278:	d016      	beq.n	80042a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004294:	f043 0220 	orr.w	r2, r3, #32
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e007      	b.n	80042b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b2:	2b80      	cmp	r3, #128	; 0x80
 80042b4:	d1c3      	bne.n	800423e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042cc:	e034      	b.n	8004338 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 f89b 	bl	800440a <I2C_IsAcknowledgeFailed>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e034      	b.n	8004348 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e4:	d028      	beq.n	8004338 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042e6:	f7fe fcc1 	bl	8002c6c <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d302      	bcc.n	80042fc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d11d      	bne.n	8004338 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	f003 0304 	and.w	r3, r3, #4
 8004306:	2b04      	cmp	r3, #4
 8004308:	d016      	beq.n	8004338 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	f043 0220 	orr.w	r2, r3, #32
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e007      	b.n	8004348 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	f003 0304 	and.w	r3, r3, #4
 8004342:	2b04      	cmp	r3, #4
 8004344:	d1c3      	bne.n	80042ce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800435c:	e049      	b.n	80043f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	2b10      	cmp	r3, #16
 800436a:	d119      	bne.n	80043a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0210 	mvn.w	r2, #16
 8004374:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e030      	b.n	8004402 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a0:	f7fe fc64 	bl	8002c6c <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d302      	bcc.n	80043b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d11d      	bne.n	80043f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c0:	2b40      	cmp	r3, #64	; 0x40
 80043c2:	d016      	beq.n	80043f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	f043 0220 	orr.w	r2, r3, #32
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e007      	b.n	8004402 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fc:	2b40      	cmp	r3, #64	; 0x40
 80043fe:	d1ae      	bne.n	800435e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800441c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004420:	d11b      	bne.n	800445a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800442a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2220      	movs	r2, #32
 8004436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	f043 0204 	orr.w	r2, r3, #4
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	bc80      	pop	{r7}
 8004464:	4770      	bx	lr
	...

08004468 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e272      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 8087 	beq.w	8004596 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004488:	4b92      	ldr	r3, [pc, #584]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f003 030c 	and.w	r3, r3, #12
 8004490:	2b04      	cmp	r3, #4
 8004492:	d00c      	beq.n	80044ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004494:	4b8f      	ldr	r3, [pc, #572]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f003 030c 	and.w	r3, r3, #12
 800449c:	2b08      	cmp	r3, #8
 800449e:	d112      	bne.n	80044c6 <HAL_RCC_OscConfig+0x5e>
 80044a0:	4b8c      	ldr	r3, [pc, #560]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ac:	d10b      	bne.n	80044c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ae:	4b89      	ldr	r3, [pc, #548]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d06c      	beq.n	8004594 <HAL_RCC_OscConfig+0x12c>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d168      	bne.n	8004594 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e24c      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ce:	d106      	bne.n	80044de <HAL_RCC_OscConfig+0x76>
 80044d0:	4b80      	ldr	r3, [pc, #512]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a7f      	ldr	r2, [pc, #508]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	e02e      	b.n	800453c <HAL_RCC_OscConfig+0xd4>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10c      	bne.n	8004500 <HAL_RCC_OscConfig+0x98>
 80044e6:	4b7b      	ldr	r3, [pc, #492]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a7a      	ldr	r2, [pc, #488]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	4b78      	ldr	r3, [pc, #480]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a77      	ldr	r2, [pc, #476]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	e01d      	b.n	800453c <HAL_RCC_OscConfig+0xd4>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004508:	d10c      	bne.n	8004524 <HAL_RCC_OscConfig+0xbc>
 800450a:	4b72      	ldr	r3, [pc, #456]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a71      	ldr	r2, [pc, #452]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	4b6f      	ldr	r3, [pc, #444]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a6e      	ldr	r2, [pc, #440]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 800451c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	e00b      	b.n	800453c <HAL_RCC_OscConfig+0xd4>
 8004524:	4b6b      	ldr	r3, [pc, #428]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a6a      	ldr	r2, [pc, #424]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 800452a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	4b68      	ldr	r3, [pc, #416]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a67      	ldr	r2, [pc, #412]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800453a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d013      	beq.n	800456c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004544:	f7fe fb92 	bl	8002c6c <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800454c:	f7fe fb8e 	bl	8002c6c <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b64      	cmp	r3, #100	; 0x64
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e200      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455e:	4b5d      	ldr	r3, [pc, #372]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0xe4>
 800456a:	e014      	b.n	8004596 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456c:	f7fe fb7e 	bl	8002c6c <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004574:	f7fe fb7a 	bl	8002c6c <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b64      	cmp	r3, #100	; 0x64
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e1ec      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004586:	4b53      	ldr	r3, [pc, #332]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1f0      	bne.n	8004574 <HAL_RCC_OscConfig+0x10c>
 8004592:	e000      	b.n	8004596 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d063      	beq.n	800466a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045a2:	4b4c      	ldr	r3, [pc, #304]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f003 030c 	and.w	r3, r3, #12
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00b      	beq.n	80045c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045ae:	4b49      	ldr	r3, [pc, #292]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f003 030c 	and.w	r3, r3, #12
 80045b6:	2b08      	cmp	r3, #8
 80045b8:	d11c      	bne.n	80045f4 <HAL_RCC_OscConfig+0x18c>
 80045ba:	4b46      	ldr	r3, [pc, #280]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d116      	bne.n	80045f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045c6:	4b43      	ldr	r3, [pc, #268]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <HAL_RCC_OscConfig+0x176>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d001      	beq.n	80045de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e1c0      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045de:	4b3d      	ldr	r3, [pc, #244]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	4939      	ldr	r1, [pc, #228]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045f2:	e03a      	b.n	800466a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d020      	beq.n	800463e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045fc:	4b36      	ldr	r3, [pc, #216]	; (80046d8 <HAL_RCC_OscConfig+0x270>)
 80045fe:	2201      	movs	r2, #1
 8004600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004602:	f7fe fb33 	bl	8002c6c <HAL_GetTick>
 8004606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004608:	e008      	b.n	800461c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800460a:	f7fe fb2f 	bl	8002c6c <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e1a1      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800461c:	4b2d      	ldr	r3, [pc, #180]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0f0      	beq.n	800460a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004628:	4b2a      	ldr	r3, [pc, #168]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	00db      	lsls	r3, r3, #3
 8004636:	4927      	ldr	r1, [pc, #156]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004638:	4313      	orrs	r3, r2
 800463a:	600b      	str	r3, [r1, #0]
 800463c:	e015      	b.n	800466a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800463e:	4b26      	ldr	r3, [pc, #152]	; (80046d8 <HAL_RCC_OscConfig+0x270>)
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004644:	f7fe fb12 	bl	8002c6c <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800464c:	f7fe fb0e 	bl	8002c6c <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e180      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800465e:	4b1d      	ldr	r3, [pc, #116]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d03a      	beq.n	80046ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d019      	beq.n	80046b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800467e:	4b17      	ldr	r3, [pc, #92]	; (80046dc <HAL_RCC_OscConfig+0x274>)
 8004680:	2201      	movs	r2, #1
 8004682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004684:	f7fe faf2 	bl	8002c6c <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800468c:	f7fe faee 	bl	8002c6c <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e160      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800469e:	4b0d      	ldr	r3, [pc, #52]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0f0      	beq.n	800468c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80046aa:	2001      	movs	r0, #1
 80046ac:	f000 face 	bl	8004c4c <RCC_Delay>
 80046b0:	e01c      	b.n	80046ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046b2:	4b0a      	ldr	r3, [pc, #40]	; (80046dc <HAL_RCC_OscConfig+0x274>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b8:	f7fe fad8 	bl	8002c6c <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046be:	e00f      	b.n	80046e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c0:	f7fe fad4 	bl	8002c6c <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d908      	bls.n	80046e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e146      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
 80046d2:	bf00      	nop
 80046d4:	40021000 	.word	0x40021000
 80046d8:	42420000 	.word	0x42420000
 80046dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e0:	4b92      	ldr	r3, [pc, #584]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1e9      	bne.n	80046c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 80a6 	beq.w	8004846 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046fa:	2300      	movs	r3, #0
 80046fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046fe:	4b8b      	ldr	r3, [pc, #556]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10d      	bne.n	8004726 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800470a:	4b88      	ldr	r3, [pc, #544]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	4a87      	ldr	r2, [pc, #540]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004714:	61d3      	str	r3, [r2, #28]
 8004716:	4b85      	ldr	r3, [pc, #532]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471e:	60bb      	str	r3, [r7, #8]
 8004720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004722:	2301      	movs	r3, #1
 8004724:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004726:	4b82      	ldr	r3, [pc, #520]	; (8004930 <HAL_RCC_OscConfig+0x4c8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472e:	2b00      	cmp	r3, #0
 8004730:	d118      	bne.n	8004764 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004732:	4b7f      	ldr	r3, [pc, #508]	; (8004930 <HAL_RCC_OscConfig+0x4c8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a7e      	ldr	r2, [pc, #504]	; (8004930 <HAL_RCC_OscConfig+0x4c8>)
 8004738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800473c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800473e:	f7fe fa95 	bl	8002c6c <HAL_GetTick>
 8004742:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004744:	e008      	b.n	8004758 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004746:	f7fe fa91 	bl	8002c6c <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b64      	cmp	r3, #100	; 0x64
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e103      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004758:	4b75      	ldr	r3, [pc, #468]	; (8004930 <HAL_RCC_OscConfig+0x4c8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0f0      	beq.n	8004746 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d106      	bne.n	800477a <HAL_RCC_OscConfig+0x312>
 800476c:	4b6f      	ldr	r3, [pc, #444]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	4a6e      	ldr	r2, [pc, #440]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004772:	f043 0301 	orr.w	r3, r3, #1
 8004776:	6213      	str	r3, [r2, #32]
 8004778:	e02d      	b.n	80047d6 <HAL_RCC_OscConfig+0x36e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10c      	bne.n	800479c <HAL_RCC_OscConfig+0x334>
 8004782:	4b6a      	ldr	r3, [pc, #424]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	4a69      	ldr	r2, [pc, #420]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004788:	f023 0301 	bic.w	r3, r3, #1
 800478c:	6213      	str	r3, [r2, #32]
 800478e:	4b67      	ldr	r3, [pc, #412]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	4a66      	ldr	r2, [pc, #408]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004794:	f023 0304 	bic.w	r3, r3, #4
 8004798:	6213      	str	r3, [r2, #32]
 800479a:	e01c      	b.n	80047d6 <HAL_RCC_OscConfig+0x36e>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	2b05      	cmp	r3, #5
 80047a2:	d10c      	bne.n	80047be <HAL_RCC_OscConfig+0x356>
 80047a4:	4b61      	ldr	r3, [pc, #388]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	4a60      	ldr	r2, [pc, #384]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047aa:	f043 0304 	orr.w	r3, r3, #4
 80047ae:	6213      	str	r3, [r2, #32]
 80047b0:	4b5e      	ldr	r3, [pc, #376]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	4a5d      	ldr	r2, [pc, #372]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	6213      	str	r3, [r2, #32]
 80047bc:	e00b      	b.n	80047d6 <HAL_RCC_OscConfig+0x36e>
 80047be:	4b5b      	ldr	r3, [pc, #364]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	4a5a      	ldr	r2, [pc, #360]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047c4:	f023 0301 	bic.w	r3, r3, #1
 80047c8:	6213      	str	r3, [r2, #32]
 80047ca:	4b58      	ldr	r3, [pc, #352]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	4a57      	ldr	r2, [pc, #348]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047d0:	f023 0304 	bic.w	r3, r3, #4
 80047d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d015      	beq.n	800480a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047de:	f7fe fa45 	bl	8002c6c <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e4:	e00a      	b.n	80047fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e6:	f7fe fa41 	bl	8002c6c <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e0b1      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fc:	4b4b      	ldr	r3, [pc, #300]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0ee      	beq.n	80047e6 <HAL_RCC_OscConfig+0x37e>
 8004808:	e014      	b.n	8004834 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480a:	f7fe fa2f 	bl	8002c6c <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004810:	e00a      	b.n	8004828 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004812:	f7fe fa2b 	bl	8002c6c <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004820:	4293      	cmp	r3, r2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e09b      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004828:	4b40      	ldr	r3, [pc, #256]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1ee      	bne.n	8004812 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004834:	7dfb      	ldrb	r3, [r7, #23]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d105      	bne.n	8004846 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800483a:	4b3c      	ldr	r3, [pc, #240]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	4a3b      	ldr	r2, [pc, #236]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004844:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 8087 	beq.w	800495e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004850:	4b36      	ldr	r3, [pc, #216]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f003 030c 	and.w	r3, r3, #12
 8004858:	2b08      	cmp	r3, #8
 800485a:	d061      	beq.n	8004920 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	2b02      	cmp	r3, #2
 8004862:	d146      	bne.n	80048f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004864:	4b33      	ldr	r3, [pc, #204]	; (8004934 <HAL_RCC_OscConfig+0x4cc>)
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486a:	f7fe f9ff 	bl	8002c6c <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004870:	e008      	b.n	8004884 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004872:	f7fe f9fb 	bl	8002c6c <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e06d      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004884:	4b29      	ldr	r3, [pc, #164]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1f0      	bne.n	8004872 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004898:	d108      	bne.n	80048ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800489a:	4b24      	ldr	r3, [pc, #144]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	4921      	ldr	r1, [pc, #132]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048ac:	4b1f      	ldr	r3, [pc, #124]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a19      	ldr	r1, [r3, #32]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	430b      	orrs	r3, r1
 80048be:	491b      	ldr	r1, [pc, #108]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048c4:	4b1b      	ldr	r3, [pc, #108]	; (8004934 <HAL_RCC_OscConfig+0x4cc>)
 80048c6:	2201      	movs	r2, #1
 80048c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ca:	f7fe f9cf 	bl	8002c6c <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048d0:	e008      	b.n	80048e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d2:	f7fe f9cb 	bl	8002c6c <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e03d      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048e4:	4b11      	ldr	r3, [pc, #68]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0f0      	beq.n	80048d2 <HAL_RCC_OscConfig+0x46a>
 80048f0:	e035      	b.n	800495e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f2:	4b10      	ldr	r3, [pc, #64]	; (8004934 <HAL_RCC_OscConfig+0x4cc>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f8:	f7fe f9b8 	bl	8002c6c <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004900:	f7fe f9b4 	bl	8002c6c <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e026      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004912:	4b06      	ldr	r3, [pc, #24]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1f0      	bne.n	8004900 <HAL_RCC_OscConfig+0x498>
 800491e:	e01e      	b.n	800495e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d107      	bne.n	8004938 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e019      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
 800492c:	40021000 	.word	0x40021000
 8004930:	40007000 	.word	0x40007000
 8004934:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004938:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <HAL_RCC_OscConfig+0x500>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	429a      	cmp	r2, r3
 800494a:	d106      	bne.n	800495a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004956:	429a      	cmp	r2, r3
 8004958:	d001      	beq.n	800495e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e000      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	40021000 	.word	0x40021000

0800496c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e0d0      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004980:	4b6a      	ldr	r3, [pc, #424]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d910      	bls.n	80049b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498e:	4b67      	ldr	r3, [pc, #412]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f023 0207 	bic.w	r2, r3, #7
 8004996:	4965      	ldr	r1, [pc, #404]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	4313      	orrs	r3, r2
 800499c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800499e:	4b63      	ldr	r3, [pc, #396]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0307 	and.w	r3, r3, #7
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d001      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e0b8      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d020      	beq.n	80049fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049c8:	4b59      	ldr	r3, [pc, #356]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	4a58      	ldr	r2, [pc, #352]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 80049ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0308 	and.w	r3, r3, #8
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d005      	beq.n	80049ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049e0:	4b53      	ldr	r3, [pc, #332]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	4a52      	ldr	r2, [pc, #328]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 80049e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80049ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ec:	4b50      	ldr	r3, [pc, #320]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	494d      	ldr	r1, [pc, #308]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d040      	beq.n	8004a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d107      	bne.n	8004a22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a12:	4b47      	ldr	r3, [pc, #284]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d115      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e07f      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d107      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a2a:	4b41      	ldr	r3, [pc, #260]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d109      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e073      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3a:	4b3d      	ldr	r3, [pc, #244]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e06b      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a4a:	4b39      	ldr	r3, [pc, #228]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f023 0203 	bic.w	r2, r3, #3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	4936      	ldr	r1, [pc, #216]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a5c:	f7fe f906 	bl	8002c6c <HAL_GetTick>
 8004a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a62:	e00a      	b.n	8004a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a64:	f7fe f902 	bl	8002c6c <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e053      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7a:	4b2d      	ldr	r3, [pc, #180]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f003 020c 	and.w	r2, r3, #12
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d1eb      	bne.n	8004a64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a8c:	4b27      	ldr	r3, [pc, #156]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d210      	bcs.n	8004abc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a9a:	4b24      	ldr	r3, [pc, #144]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f023 0207 	bic.w	r2, r3, #7
 8004aa2:	4922      	ldr	r1, [pc, #136]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aaa:	4b20      	ldr	r3, [pc, #128]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d001      	beq.n	8004abc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e032      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ac8:	4b19      	ldr	r3, [pc, #100]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	4916      	ldr	r1, [pc, #88]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d009      	beq.n	8004afa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ae6:	4b12      	ldr	r3, [pc, #72]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	490e      	ldr	r1, [pc, #56]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004afa:	f000 f821 	bl	8004b40 <HAL_RCC_GetSysClockFreq>
 8004afe:	4602      	mov	r2, r0
 8004b00:	4b0b      	ldr	r3, [pc, #44]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	091b      	lsrs	r3, r3, #4
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	490a      	ldr	r1, [pc, #40]	; (8004b34 <HAL_RCC_ClockConfig+0x1c8>)
 8004b0c:	5ccb      	ldrb	r3, [r1, r3]
 8004b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b12:	4a09      	ldr	r2, [pc, #36]	; (8004b38 <HAL_RCC_ClockConfig+0x1cc>)
 8004b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b16:	4b09      	ldr	r3, [pc, #36]	; (8004b3c <HAL_RCC_ClockConfig+0x1d0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fe f864 	bl	8002be8 <HAL_InitTick>

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40022000 	.word	0x40022000
 8004b30:	40021000 	.word	0x40021000
 8004b34:	0800764c 	.word	0x0800764c
 8004b38:	20000090 	.word	0x20000090
 8004b3c:	2000009c 	.word	0x2000009c

08004b40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60bb      	str	r3, [r7, #8]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	617b      	str	r3, [r7, #20]
 8004b52:	2300      	movs	r3, #0
 8004b54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b5a:	4b1e      	ldr	r3, [pc, #120]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f003 030c 	and.w	r3, r3, #12
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d002      	beq.n	8004b70 <HAL_RCC_GetSysClockFreq+0x30>
 8004b6a:	2b08      	cmp	r3, #8
 8004b6c:	d003      	beq.n	8004b76 <HAL_RCC_GetSysClockFreq+0x36>
 8004b6e:	e027      	b.n	8004bc0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b70:	4b19      	ldr	r3, [pc, #100]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b72:	613b      	str	r3, [r7, #16]
      break;
 8004b74:	e027      	b.n	8004bc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	0c9b      	lsrs	r3, r3, #18
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	4a17      	ldr	r2, [pc, #92]	; (8004bdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b80:	5cd3      	ldrb	r3, [r2, r3]
 8004b82:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d010      	beq.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b8e:	4b11      	ldr	r3, [pc, #68]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	0c5b      	lsrs	r3, r3, #17
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	4a11      	ldr	r2, [pc, #68]	; (8004be0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b9a:	5cd3      	ldrb	r3, [r2, r3]
 8004b9c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a0d      	ldr	r2, [pc, #52]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004ba2:	fb03 f202 	mul.w	r2, r3, r2
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	e004      	b.n	8004bba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a0c      	ldr	r2, [pc, #48]	; (8004be4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004bb4:	fb02 f303 	mul.w	r3, r2, r3
 8004bb8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	613b      	str	r3, [r7, #16]
      break;
 8004bbe:	e002      	b.n	8004bc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bc0:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004bc2:	613b      	str	r3, [r7, #16]
      break;
 8004bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bc6:	693b      	ldr	r3, [r7, #16]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bc80      	pop	{r7}
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	007a1200 	.word	0x007a1200
 8004bdc:	08007dd0 	.word	0x08007dd0
 8004be0:	08007de0 	.word	0x08007de0
 8004be4:	003d0900 	.word	0x003d0900

08004be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bec:	4b02      	ldr	r3, [pc, #8]	; (8004bf8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004bee:	681b      	ldr	r3, [r3, #0]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bc80      	pop	{r7}
 8004bf6:	4770      	bx	lr
 8004bf8:	20000090 	.word	0x20000090

08004bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c00:	f7ff fff2 	bl	8004be8 <HAL_RCC_GetHCLKFreq>
 8004c04:	4602      	mov	r2, r0
 8004c06:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	0a1b      	lsrs	r3, r3, #8
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	4903      	ldr	r1, [pc, #12]	; (8004c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c12:	5ccb      	ldrb	r3, [r1, r3]
 8004c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	0800765c 	.word	0x0800765c

08004c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c28:	f7ff ffde 	bl	8004be8 <HAL_RCC_GetHCLKFreq>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	0adb      	lsrs	r3, r3, #11
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	4903      	ldr	r1, [pc, #12]	; (8004c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c3a:	5ccb      	ldrb	r3, [r1, r3]
 8004c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	40021000 	.word	0x40021000
 8004c48:	0800765c 	.word	0x0800765c

08004c4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c54:	4b0a      	ldr	r3, [pc, #40]	; (8004c80 <RCC_Delay+0x34>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a0a      	ldr	r2, [pc, #40]	; (8004c84 <RCC_Delay+0x38>)
 8004c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5e:	0a5b      	lsrs	r3, r3, #9
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	fb02 f303 	mul.w	r3, r2, r3
 8004c66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c68:	bf00      	nop
  }
  while (Delay --);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	1e5a      	subs	r2, r3, #1
 8004c6e:	60fa      	str	r2, [r7, #12]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1f9      	bne.n	8004c68 <RCC_Delay+0x1c>
}
 8004c74:	bf00      	nop
 8004c76:	bf00      	nop
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr
 8004c80:	20000090 	.word	0x20000090
 8004c84:	10624dd3 	.word	0x10624dd3

08004c88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e041      	b.n	8004d1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7fd fbf2 	bl	8002498 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3304      	adds	r3, #4
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	f000 fb06 	bl	80052d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b082      	sub	sp, #8
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e041      	b.n	8004dbc <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d106      	bne.n	8004d52 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f839 	bl	8004dc4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2202      	movs	r2, #2
 8004d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	3304      	adds	r3, #4
 8004d62:	4619      	mov	r1, r3
 8004d64:	4610      	mov	r0, r2
 8004d66:	f000 fab7 	bl	80052d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bc80      	pop	{r7}
 8004dd4:	4770      	bx	lr

08004dd6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b082      	sub	sp, #8
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e041      	b.n	8004e6c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d106      	bne.n	8004e02 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f839 	bl	8004e74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2202      	movs	r2, #2
 8004e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	3304      	adds	r3, #4
 8004e12:	4619      	mov	r1, r3
 8004e14:	4610      	mov	r0, r2
 8004e16:	f000 fa5f 	bl	80052d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bc80      	pop	{r7}
 8004e84:	4770      	bx	lr
	...

08004e88 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e94:	2300      	movs	r3, #0
 8004e96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d101      	bne.n	8004ea6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e048      	b.n	8004f38 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b0c      	cmp	r3, #12
 8004eb2:	d839      	bhi.n	8004f28 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004eb4:	a201      	add	r2, pc, #4	; (adr r2, 8004ebc <HAL_TIM_OC_ConfigChannel+0x34>)
 8004eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eba:	bf00      	nop
 8004ebc:	08004ef1 	.word	0x08004ef1
 8004ec0:	08004f29 	.word	0x08004f29
 8004ec4:	08004f29 	.word	0x08004f29
 8004ec8:	08004f29 	.word	0x08004f29
 8004ecc:	08004eff 	.word	0x08004eff
 8004ed0:	08004f29 	.word	0x08004f29
 8004ed4:	08004f29 	.word	0x08004f29
 8004ed8:	08004f29 	.word	0x08004f29
 8004edc:	08004f0d 	.word	0x08004f0d
 8004ee0:	08004f29 	.word	0x08004f29
 8004ee4:	08004f29 	.word	0x08004f29
 8004ee8:	08004f29 	.word	0x08004f29
 8004eec:	08004f1b 	.word	0x08004f1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68b9      	ldr	r1, [r7, #8]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 fa50 	bl	800539c <TIM_OC1_SetConfig>
      break;
 8004efc:	e017      	b.n	8004f2e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68b9      	ldr	r1, [r7, #8]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 faaf 	bl	8005468 <TIM_OC2_SetConfig>
      break;
 8004f0a:	e010      	b.n	8004f2e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68b9      	ldr	r1, [r7, #8]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 fb12 	bl	800553c <TIM_OC3_SetConfig>
      break;
 8004f18:	e009      	b.n	8004f2e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68b9      	ldr	r1, [r7, #8]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 fb75 	bl	8005610 <TIM_OC4_SetConfig>
      break;
 8004f26:	e002      	b.n	8004f2e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3718      	adds	r7, #24
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d101      	bne.n	8004f5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	e0ae      	b.n	80050bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b0c      	cmp	r3, #12
 8004f6a:	f200 809f 	bhi.w	80050ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f6e:	a201      	add	r2, pc, #4	; (adr r2, 8004f74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f74:	08004fa9 	.word	0x08004fa9
 8004f78:	080050ad 	.word	0x080050ad
 8004f7c:	080050ad 	.word	0x080050ad
 8004f80:	080050ad 	.word	0x080050ad
 8004f84:	08004fe9 	.word	0x08004fe9
 8004f88:	080050ad 	.word	0x080050ad
 8004f8c:	080050ad 	.word	0x080050ad
 8004f90:	080050ad 	.word	0x080050ad
 8004f94:	0800502b 	.word	0x0800502b
 8004f98:	080050ad 	.word	0x080050ad
 8004f9c:	080050ad 	.word	0x080050ad
 8004fa0:	080050ad 	.word	0x080050ad
 8004fa4:	0800506b 	.word	0x0800506b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68b9      	ldr	r1, [r7, #8]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 f9f4 	bl	800539c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699a      	ldr	r2, [r3, #24]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0208 	orr.w	r2, r2, #8
 8004fc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699a      	ldr	r2, [r3, #24]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0204 	bic.w	r2, r2, #4
 8004fd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6999      	ldr	r1, [r3, #24]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	691a      	ldr	r2, [r3, #16]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	619a      	str	r2, [r3, #24]
      break;
 8004fe6:	e064      	b.n	80050b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68b9      	ldr	r1, [r7, #8]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fa3a 	bl	8005468 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	699a      	ldr	r2, [r3, #24]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005002:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699a      	ldr	r2, [r3, #24]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005012:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6999      	ldr	r1, [r3, #24]
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	021a      	lsls	r2, r3, #8
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	619a      	str	r2, [r3, #24]
      break;
 8005028:	e043      	b.n	80050b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	4618      	mov	r0, r3
 8005032:	f000 fa83 	bl	800553c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	69da      	ldr	r2, [r3, #28]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f042 0208 	orr.w	r2, r2, #8
 8005044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	69da      	ldr	r2, [r3, #28]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0204 	bic.w	r2, r2, #4
 8005054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	69d9      	ldr	r1, [r3, #28]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	691a      	ldr	r2, [r3, #16]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	61da      	str	r2, [r3, #28]
      break;
 8005068:	e023      	b.n	80050b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68b9      	ldr	r1, [r7, #8]
 8005070:	4618      	mov	r0, r3
 8005072:	f000 facd 	bl	8005610 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69da      	ldr	r2, [r3, #28]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005084:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69da      	ldr	r2, [r3, #28]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	69d9      	ldr	r1, [r3, #28]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	021a      	lsls	r2, r3, #8
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	61da      	str	r2, [r3, #28]
      break;
 80050aa:	e002      	b.n	80050b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	75fb      	strb	r3, [r7, #23]
      break;
 80050b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3718      	adds	r7, #24
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d101      	bne.n	80050e0 <HAL_TIM_ConfigClockSource+0x1c>
 80050dc:	2302      	movs	r3, #2
 80050de:	e0b4      	b.n	800524a <HAL_TIM_ConfigClockSource+0x186>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2202      	movs	r2, #2
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005106:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005118:	d03e      	beq.n	8005198 <HAL_TIM_ConfigClockSource+0xd4>
 800511a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800511e:	f200 8087 	bhi.w	8005230 <HAL_TIM_ConfigClockSource+0x16c>
 8005122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005126:	f000 8086 	beq.w	8005236 <HAL_TIM_ConfigClockSource+0x172>
 800512a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512e:	d87f      	bhi.n	8005230 <HAL_TIM_ConfigClockSource+0x16c>
 8005130:	2b70      	cmp	r3, #112	; 0x70
 8005132:	d01a      	beq.n	800516a <HAL_TIM_ConfigClockSource+0xa6>
 8005134:	2b70      	cmp	r3, #112	; 0x70
 8005136:	d87b      	bhi.n	8005230 <HAL_TIM_ConfigClockSource+0x16c>
 8005138:	2b60      	cmp	r3, #96	; 0x60
 800513a:	d050      	beq.n	80051de <HAL_TIM_ConfigClockSource+0x11a>
 800513c:	2b60      	cmp	r3, #96	; 0x60
 800513e:	d877      	bhi.n	8005230 <HAL_TIM_ConfigClockSource+0x16c>
 8005140:	2b50      	cmp	r3, #80	; 0x50
 8005142:	d03c      	beq.n	80051be <HAL_TIM_ConfigClockSource+0xfa>
 8005144:	2b50      	cmp	r3, #80	; 0x50
 8005146:	d873      	bhi.n	8005230 <HAL_TIM_ConfigClockSource+0x16c>
 8005148:	2b40      	cmp	r3, #64	; 0x40
 800514a:	d058      	beq.n	80051fe <HAL_TIM_ConfigClockSource+0x13a>
 800514c:	2b40      	cmp	r3, #64	; 0x40
 800514e:	d86f      	bhi.n	8005230 <HAL_TIM_ConfigClockSource+0x16c>
 8005150:	2b30      	cmp	r3, #48	; 0x30
 8005152:	d064      	beq.n	800521e <HAL_TIM_ConfigClockSource+0x15a>
 8005154:	2b30      	cmp	r3, #48	; 0x30
 8005156:	d86b      	bhi.n	8005230 <HAL_TIM_ConfigClockSource+0x16c>
 8005158:	2b20      	cmp	r3, #32
 800515a:	d060      	beq.n	800521e <HAL_TIM_ConfigClockSource+0x15a>
 800515c:	2b20      	cmp	r3, #32
 800515e:	d867      	bhi.n	8005230 <HAL_TIM_ConfigClockSource+0x16c>
 8005160:	2b00      	cmp	r3, #0
 8005162:	d05c      	beq.n	800521e <HAL_TIM_ConfigClockSource+0x15a>
 8005164:	2b10      	cmp	r3, #16
 8005166:	d05a      	beq.n	800521e <HAL_TIM_ConfigClockSource+0x15a>
 8005168:	e062      	b.n	8005230 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6818      	ldr	r0, [r3, #0]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	6899      	ldr	r1, [r3, #8]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	f000 fb9f 	bl	80058bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800518c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	609a      	str	r2, [r3, #8]
      break;
 8005196:	e04f      	b.n	8005238 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6818      	ldr	r0, [r3, #0]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	6899      	ldr	r1, [r3, #8]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	f000 fb88 	bl	80058bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689a      	ldr	r2, [r3, #8]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051ba:	609a      	str	r2, [r3, #8]
      break;
 80051bc:	e03c      	b.n	8005238 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6818      	ldr	r0, [r3, #0]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	6859      	ldr	r1, [r3, #4]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	461a      	mov	r2, r3
 80051cc:	f000 faff 	bl	80057ce <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2150      	movs	r1, #80	; 0x50
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 fb56 	bl	8005888 <TIM_ITRx_SetConfig>
      break;
 80051dc:	e02c      	b.n	8005238 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	6859      	ldr	r1, [r3, #4]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	461a      	mov	r2, r3
 80051ec:	f000 fb1d 	bl	800582a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2160      	movs	r1, #96	; 0x60
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 fb46 	bl	8005888 <TIM_ITRx_SetConfig>
      break;
 80051fc:	e01c      	b.n	8005238 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	6859      	ldr	r1, [r3, #4]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	461a      	mov	r2, r3
 800520c:	f000 fadf 	bl	80057ce <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2140      	movs	r1, #64	; 0x40
 8005216:	4618      	mov	r0, r3
 8005218:	f000 fb36 	bl	8005888 <TIM_ITRx_SetConfig>
      break;
 800521c:	e00c      	b.n	8005238 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4619      	mov	r1, r3
 8005228:	4610      	mov	r0, r2
 800522a:	f000 fb2d 	bl	8005888 <TIM_ITRx_SetConfig>
      break;
 800522e:	e003      	b.n	8005238 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	73fb      	strb	r3, [r7, #15]
      break;
 8005234:	e000      	b.n	8005238 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005236:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005248:	7bfb      	ldrb	r3, [r7, #15]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b082      	sub	sp, #8
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005262:	2b01      	cmp	r3, #1
 8005264:	d101      	bne.n	800526a <HAL_TIM_SlaveConfigSynchro+0x18>
 8005266:	2302      	movs	r3, #2
 8005268:	e031      	b.n	80052ce <HAL_TIM_SlaveConfigSynchro+0x7c>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2202      	movs	r2, #2
 8005276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800527a:	6839      	ldr	r1, [r7, #0]
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 fa15 	bl	80056ac <TIM_SlaveTimer_SetConfig>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d009      	beq.n	800529c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e018      	b.n	80052ce <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68da      	ldr	r2, [r3, #12]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052aa:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80052ba:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a29      	ldr	r2, [pc, #164]	; (8005390 <TIM_Base_SetConfig+0xb8>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d00b      	beq.n	8005308 <TIM_Base_SetConfig+0x30>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f6:	d007      	beq.n	8005308 <TIM_Base_SetConfig+0x30>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a26      	ldr	r2, [pc, #152]	; (8005394 <TIM_Base_SetConfig+0xbc>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d003      	beq.n	8005308 <TIM_Base_SetConfig+0x30>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a25      	ldr	r2, [pc, #148]	; (8005398 <TIM_Base_SetConfig+0xc0>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d108      	bne.n	800531a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a1c      	ldr	r2, [pc, #112]	; (8005390 <TIM_Base_SetConfig+0xb8>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d00b      	beq.n	800533a <TIM_Base_SetConfig+0x62>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005328:	d007      	beq.n	800533a <TIM_Base_SetConfig+0x62>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a19      	ldr	r2, [pc, #100]	; (8005394 <TIM_Base_SetConfig+0xbc>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d003      	beq.n	800533a <TIM_Base_SetConfig+0x62>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a18      	ldr	r2, [pc, #96]	; (8005398 <TIM_Base_SetConfig+0xc0>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d108      	bne.n	800534c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4313      	orrs	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	4313      	orrs	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a07      	ldr	r2, [pc, #28]	; (8005390 <TIM_Base_SetConfig+0xb8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d103      	bne.n	8005380 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	615a      	str	r2, [r3, #20]
}
 8005386:	bf00      	nop
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	bc80      	pop	{r7}
 800538e:	4770      	bx	lr
 8005390:	40012c00 	.word	0x40012c00
 8005394:	40000400 	.word	0x40000400
 8005398:	40000800 	.word	0x40000800

0800539c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	f023 0201 	bic.w	r2, r3, #1
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f023 0303 	bic.w	r3, r3, #3
 80053d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	4313      	orrs	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f023 0302 	bic.w	r3, r3, #2
 80053e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a1c      	ldr	r2, [pc, #112]	; (8005464 <TIM_OC1_SetConfig+0xc8>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d10c      	bne.n	8005412 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f023 0308 	bic.w	r3, r3, #8
 80053fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	4313      	orrs	r3, r2
 8005408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f023 0304 	bic.w	r3, r3, #4
 8005410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a13      	ldr	r2, [pc, #76]	; (8005464 <TIM_OC1_SetConfig+0xc8>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d111      	bne.n	800543e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	4313      	orrs	r3, r2
 8005432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	4313      	orrs	r3, r2
 800543c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	621a      	str	r2, [r3, #32]
}
 8005458:	bf00      	nop
 800545a:	371c      	adds	r7, #28
 800545c:	46bd      	mov	sp, r7
 800545e:	bc80      	pop	{r7}
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	40012c00 	.word	0x40012c00

08005468 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a1b      	ldr	r3, [r3, #32]
 800547c:	f023 0210 	bic.w	r2, r3, #16
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800549e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	021b      	lsls	r3, r3, #8
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f023 0320 	bic.w	r3, r3, #32
 80054b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	011b      	lsls	r3, r3, #4
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	4313      	orrs	r3, r2
 80054be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a1d      	ldr	r2, [pc, #116]	; (8005538 <TIM_OC2_SetConfig+0xd0>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d10d      	bne.n	80054e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	011b      	lsls	r3, r3, #4
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	4313      	orrs	r3, r2
 80054da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a14      	ldr	r2, [pc, #80]	; (8005538 <TIM_OC2_SetConfig+0xd0>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d113      	bne.n	8005514 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	4313      	orrs	r3, r2
 8005512:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	621a      	str	r2, [r3, #32]
}
 800552e:	bf00      	nop
 8005530:	371c      	adds	r7, #28
 8005532:	46bd      	mov	sp, r7
 8005534:	bc80      	pop	{r7}
 8005536:	4770      	bx	lr
 8005538:	40012c00 	.word	0x40012c00

0800553c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 0303 	bic.w	r3, r3, #3
 8005572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	021b      	lsls	r3, r3, #8
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	4313      	orrs	r3, r2
 8005590:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a1d      	ldr	r2, [pc, #116]	; (800560c <TIM_OC3_SetConfig+0xd0>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d10d      	bne.n	80055b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	021b      	lsls	r3, r3, #8
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a14      	ldr	r2, [pc, #80]	; (800560c <TIM_OC3_SetConfig+0xd0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d113      	bne.n	80055e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	011b      	lsls	r3, r3, #4
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	011b      	lsls	r3, r3, #4
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	621a      	str	r2, [r3, #32]
}
 8005600:	bf00      	nop
 8005602:	371c      	adds	r7, #28
 8005604:	46bd      	mov	sp, r7
 8005606:	bc80      	pop	{r7}
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	40012c00 	.word	0x40012c00

08005610 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005610:	b480      	push	{r7}
 8005612:	b087      	sub	sp, #28
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a1b      	ldr	r3, [r3, #32]
 8005624:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800563e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	021b      	lsls	r3, r3, #8
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	4313      	orrs	r3, r2
 8005652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800565a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	031b      	lsls	r3, r3, #12
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	4313      	orrs	r3, r2
 8005666:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a0f      	ldr	r2, [pc, #60]	; (80056a8 <TIM_OC4_SetConfig+0x98>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d109      	bne.n	8005684 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005676:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	019b      	lsls	r3, r3, #6
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	4313      	orrs	r3, r2
 8005682:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	621a      	str	r2, [r3, #32]
}
 800569e:	bf00      	nop
 80056a0:	371c      	adds	r7, #28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bc80      	pop	{r7}
 80056a6:	4770      	bx	lr
 80056a8:	40012c00 	.word	0x40012c00

080056ac <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056b6:	2300      	movs	r3, #0
 80056b8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f023 0307 	bic.w	r3, r3, #7
 80056da:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	2b70      	cmp	r3, #112	; 0x70
 80056f4:	d01a      	beq.n	800572c <TIM_SlaveTimer_SetConfig+0x80>
 80056f6:	2b70      	cmp	r3, #112	; 0x70
 80056f8:	d860      	bhi.n	80057bc <TIM_SlaveTimer_SetConfig+0x110>
 80056fa:	2b60      	cmp	r3, #96	; 0x60
 80056fc:	d054      	beq.n	80057a8 <TIM_SlaveTimer_SetConfig+0xfc>
 80056fe:	2b60      	cmp	r3, #96	; 0x60
 8005700:	d85c      	bhi.n	80057bc <TIM_SlaveTimer_SetConfig+0x110>
 8005702:	2b50      	cmp	r3, #80	; 0x50
 8005704:	d046      	beq.n	8005794 <TIM_SlaveTimer_SetConfig+0xe8>
 8005706:	2b50      	cmp	r3, #80	; 0x50
 8005708:	d858      	bhi.n	80057bc <TIM_SlaveTimer_SetConfig+0x110>
 800570a:	2b40      	cmp	r3, #64	; 0x40
 800570c:	d019      	beq.n	8005742 <TIM_SlaveTimer_SetConfig+0x96>
 800570e:	2b40      	cmp	r3, #64	; 0x40
 8005710:	d854      	bhi.n	80057bc <TIM_SlaveTimer_SetConfig+0x110>
 8005712:	2b30      	cmp	r3, #48	; 0x30
 8005714:	d055      	beq.n	80057c2 <TIM_SlaveTimer_SetConfig+0x116>
 8005716:	2b30      	cmp	r3, #48	; 0x30
 8005718:	d850      	bhi.n	80057bc <TIM_SlaveTimer_SetConfig+0x110>
 800571a:	2b20      	cmp	r3, #32
 800571c:	d051      	beq.n	80057c2 <TIM_SlaveTimer_SetConfig+0x116>
 800571e:	2b20      	cmp	r3, #32
 8005720:	d84c      	bhi.n	80057bc <TIM_SlaveTimer_SetConfig+0x110>
 8005722:	2b00      	cmp	r3, #0
 8005724:	d04d      	beq.n	80057c2 <TIM_SlaveTimer_SetConfig+0x116>
 8005726:	2b10      	cmp	r3, #16
 8005728:	d04b      	beq.n	80057c2 <TIM_SlaveTimer_SetConfig+0x116>
 800572a:	e047      	b.n	80057bc <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6818      	ldr	r0, [r3, #0]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	68d9      	ldr	r1, [r3, #12]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	f000 f8be 	bl	80058bc <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005740:	e040      	b.n	80057c4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b05      	cmp	r3, #5
 8005748:	d101      	bne.n	800574e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e03b      	b.n	80057c6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6a1a      	ldr	r2, [r3, #32]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 0201 	bic.w	r2, r2, #1
 8005764:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005774:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	011b      	lsls	r3, r3, #4
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	4313      	orrs	r3, r2
 8005780:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	621a      	str	r2, [r3, #32]
      break;
 8005792:	e017      	b.n	80057c4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6818      	ldr	r0, [r3, #0]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	6899      	ldr	r1, [r3, #8]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	461a      	mov	r2, r3
 80057a2:	f000 f814 	bl	80057ce <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80057a6:	e00d      	b.n	80057c4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6818      	ldr	r0, [r3, #0]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	6899      	ldr	r1, [r3, #8]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	461a      	mov	r2, r3
 80057b6:	f000 f838 	bl	800582a <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80057ba:	e003      	b.n	80057c4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	75fb      	strb	r3, [r7, #23]
      break;
 80057c0:	e000      	b.n	80057c4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80057c2:	bf00      	nop
  }

  return status;
 80057c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3718      	adds	r7, #24
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b087      	sub	sp, #28
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	60f8      	str	r0, [r7, #12]
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	f023 0201 	bic.w	r2, r3, #1
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	011b      	lsls	r3, r3, #4
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	4313      	orrs	r3, r2
 8005802:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f023 030a 	bic.w	r3, r3, #10
 800580a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	4313      	orrs	r3, r2
 8005812:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	621a      	str	r2, [r3, #32]
}
 8005820:	bf00      	nop
 8005822:	371c      	adds	r7, #28
 8005824:	46bd      	mov	sp, r7
 8005826:	bc80      	pop	{r7}
 8005828:	4770      	bx	lr

0800582a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800582a:	b480      	push	{r7}
 800582c:	b087      	sub	sp, #28
 800582e:	af00      	add	r7, sp, #0
 8005830:	60f8      	str	r0, [r7, #12]
 8005832:	60b9      	str	r1, [r7, #8]
 8005834:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	f023 0210 	bic.w	r2, r3, #16
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005854:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	031b      	lsls	r3, r3, #12
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005866:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	011b      	lsls	r3, r3, #4
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	4313      	orrs	r3, r2
 8005870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	621a      	str	r2, [r3, #32]
}
 800587e:	bf00      	nop
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	bc80      	pop	{r7}
 8005886:	4770      	bx	lr

08005888 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	f043 0307 	orr.w	r3, r3, #7
 80058aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	609a      	str	r2, [r3, #8]
}
 80058b2:	bf00      	nop
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bc80      	pop	{r7}
 80058ba:	4770      	bx	lr

080058bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058bc:	b480      	push	{r7}
 80058be:	b087      	sub	sp, #28
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
 80058c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	021a      	lsls	r2, r3, #8
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	431a      	orrs	r2, r3
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	609a      	str	r2, [r3, #8]
}
 80058f0:	bf00      	nop
 80058f2:	371c      	adds	r7, #28
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bc80      	pop	{r7}
 80058f8:	4770      	bx	lr
	...

080058fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800590c:	2b01      	cmp	r3, #1
 800590e:	d101      	bne.n	8005914 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005910:	2302      	movs	r3, #2
 8005912:	e046      	b.n	80059a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a16      	ldr	r2, [pc, #88]	; (80059ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d00e      	beq.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005960:	d009      	beq.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a12      	ldr	r2, [pc, #72]	; (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d004      	beq.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a10      	ldr	r2, [pc, #64]	; (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d10c      	bne.n	8005990 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800597c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	4313      	orrs	r3, r2
 8005986:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bc80      	pop	{r7}
 80059aa:	4770      	bx	lr
 80059ac:	40012c00 	.word	0x40012c00
 80059b0:	40000400 	.word	0x40000400
 80059b4:	40000800 	.word	0x40000800

080059b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d101      	bne.n	80059d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059d0:	2302      	movs	r3, #2
 80059d2:	e03d      	b.n	8005a50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3714      	adds	r7, #20
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bc80      	pop	{r7}
 8005a58:	4770      	bx	lr

08005a5a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b082      	sub	sp, #8
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e042      	b.n	8005af2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d106      	bne.n	8005a86 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7fc fddd 	bl	8002640 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2224      	movs	r2, #36	; 0x24
 8005a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68da      	ldr	r2, [r3, #12]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a9c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 fcd4 	bl	800644c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	691a      	ldr	r2, [r3, #16]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ab2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	695a      	ldr	r2, [r3, #20]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ac2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68da      	ldr	r2, [r3, #12]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ad2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b084      	sub	sp, #16
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	60f8      	str	r0, [r7, #12]
 8005b02:	60b9      	str	r1, [r7, #8]
 8005b04:	4613      	mov	r3, r2
 8005b06:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b20      	cmp	r3, #32
 8005b12:	d112      	bne.n	8005b3a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d002      	beq.n	8005b20 <HAL_UART_Receive_IT+0x26>
 8005b1a:	88fb      	ldrh	r3, [r7, #6]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e00b      	b.n	8005b3c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b2a:	88fb      	ldrh	r3, [r7, #6]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	68b9      	ldr	r1, [r7, #8]
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f000 fab6 	bl	80060a2 <UART_Start_Receive_IT>
 8005b36:	4603      	mov	r3, r0
 8005b38:	e000      	b.n	8005b3c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005b3a:	2302      	movs	r3, #2
  }
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b0ba      	sub	sp, #232	; 0xe8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005b82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10f      	bne.n	8005baa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b8e:	f003 0320 	and.w	r3, r3, #32
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d009      	beq.n	8005baa <HAL_UART_IRQHandler+0x66>
 8005b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b9a:	f003 0320 	and.w	r3, r3, #32
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fb93 	bl	80062ce <UART_Receive_IT>
      return;
 8005ba8:	e25b      	b.n	8006062 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005baa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f000 80de 	beq.w	8005d70 <HAL_UART_IRQHandler+0x22c>
 8005bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d106      	bne.n	8005bce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bc4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 80d1 	beq.w	8005d70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00b      	beq.n	8005bf2 <HAL_UART_IRQHandler+0xae>
 8005bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d005      	beq.n	8005bf2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bea:	f043 0201 	orr.w	r2, r3, #1
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf6:	f003 0304 	and.w	r3, r3, #4
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00b      	beq.n	8005c16 <HAL_UART_IRQHandler+0xd2>
 8005bfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d005      	beq.n	8005c16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c0e:	f043 0202 	orr.w	r2, r3, #2
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00b      	beq.n	8005c3a <HAL_UART_IRQHandler+0xf6>
 8005c22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d005      	beq.n	8005c3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c32:	f043 0204 	orr.w	r2, r3, #4
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c3e:	f003 0308 	and.w	r3, r3, #8
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d011      	beq.n	8005c6a <HAL_UART_IRQHandler+0x126>
 8005c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c4a:	f003 0320 	and.w	r3, r3, #32
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d105      	bne.n	8005c5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d005      	beq.n	8005c6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c62:	f043 0208 	orr.w	r2, r3, #8
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 81f2 	beq.w	8006058 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c78:	f003 0320 	and.w	r3, r3, #32
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d008      	beq.n	8005c92 <HAL_UART_IRQHandler+0x14e>
 8005c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c84:	f003 0320 	and.w	r3, r3, #32
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 fb1e 	bl	80062ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	bf14      	ite	ne
 8005ca0:	2301      	movne	r3, #1
 8005ca2:	2300      	moveq	r3, #0
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cae:	f003 0308 	and.w	r3, r3, #8
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d103      	bne.n	8005cbe <HAL_UART_IRQHandler+0x17a>
 8005cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d04f      	beq.n	8005d5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fa28 	bl	8006114 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d041      	beq.n	8005d56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3314      	adds	r3, #20
 8005cd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ce0:	e853 3f00 	ldrex	r3, [r3]
 8005ce4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ce8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3314      	adds	r3, #20
 8005cfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005cfe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d0e:	e841 2300 	strex	r3, r2, [r1]
 8005d12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1d9      	bne.n	8005cd2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d013      	beq.n	8005d4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2a:	4a7e      	ldr	r2, [pc, #504]	; (8005f24 <HAL_UART_IRQHandler+0x3e0>)
 8005d2c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fd f910 	bl	8002f58 <HAL_DMA_Abort_IT>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d016      	beq.n	8005d6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d48:	4610      	mov	r0, r2
 8005d4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d4c:	e00e      	b.n	8005d6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f993 	bl	800607a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d54:	e00a      	b.n	8005d6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f98f 	bl	800607a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d5c:	e006      	b.n	8005d6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 f98b 	bl	800607a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005d6a:	e175      	b.n	8006058 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d6c:	bf00      	nop
    return;
 8005d6e:	e173      	b.n	8006058 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	f040 814f 	bne.w	8006018 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d7e:	f003 0310 	and.w	r3, r3, #16
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f000 8148 	beq.w	8006018 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d8c:	f003 0310 	and.w	r3, r3, #16
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 8141 	beq.w	8006018 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d96:	2300      	movs	r3, #0
 8005d98:	60bb      	str	r3, [r7, #8]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	60bb      	str	r3, [r7, #8]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	60bb      	str	r3, [r7, #8]
 8005daa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f000 80b6 	beq.w	8005f28 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005dc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 8145 	beq.w	800605c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005dd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	f080 813e 	bcs.w	800605c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005de6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	2b20      	cmp	r3, #32
 8005df0:	f000 8088 	beq.w	8005f04 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	330c      	adds	r3, #12
 8005dfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e02:	e853 3f00 	ldrex	r3, [r3]
 8005e06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	330c      	adds	r3, #12
 8005e1c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e20:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e28:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e30:	e841 2300 	strex	r3, r2, [r1]
 8005e34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1d9      	bne.n	8005df4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3314      	adds	r3, #20
 8005e46:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e4a:	e853 3f00 	ldrex	r3, [r3]
 8005e4e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e52:	f023 0301 	bic.w	r3, r3, #1
 8005e56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3314      	adds	r3, #20
 8005e60:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e64:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e68:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e70:	e841 2300 	strex	r3, r2, [r1]
 8005e74:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1e1      	bne.n	8005e40 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	3314      	adds	r3, #20
 8005e82:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e86:	e853 3f00 	ldrex	r3, [r3]
 8005e8a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3314      	adds	r3, #20
 8005e9c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ea0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ea2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ea6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ea8:	e841 2300 	strex	r3, r2, [r1]
 8005eac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005eae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1e3      	bne.n	8005e7c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	330c      	adds	r3, #12
 8005ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ecc:	e853 3f00 	ldrex	r3, [r3]
 8005ed0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ed4:	f023 0310 	bic.w	r3, r3, #16
 8005ed8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	330c      	adds	r3, #12
 8005ee2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005ee6:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ee8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005eec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005eee:	e841 2300 	strex	r3, r2, [r1]
 8005ef2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1e3      	bne.n	8005ec2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fc ffef 	bl	8002ee2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2202      	movs	r2, #2
 8005f08:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	4619      	mov	r1, r3
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f8b6 	bl	800608c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f20:	e09c      	b.n	800605c <HAL_UART_IRQHandler+0x518>
 8005f22:	bf00      	nop
 8005f24:	080061d9 	.word	0x080061d9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f000 808e 	beq.w	8006060 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005f44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 8089 	beq.w	8006060 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	330c      	adds	r3, #12
 8005f54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f58:	e853 3f00 	ldrex	r3, [r3]
 8005f5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	330c      	adds	r3, #12
 8005f6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005f72:	647a      	str	r2, [r7, #68]	; 0x44
 8005f74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f7a:	e841 2300 	strex	r3, r2, [r1]
 8005f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1e3      	bne.n	8005f4e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3314      	adds	r3, #20
 8005f8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	e853 3f00 	ldrex	r3, [r3]
 8005f94:	623b      	str	r3, [r7, #32]
   return(result);
 8005f96:	6a3b      	ldr	r3, [r7, #32]
 8005f98:	f023 0301 	bic.w	r3, r3, #1
 8005f9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3314      	adds	r3, #20
 8005fa6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005faa:	633a      	str	r2, [r7, #48]	; 0x30
 8005fac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fb2:	e841 2300 	strex	r3, r2, [r1]
 8005fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1e3      	bne.n	8005f86 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	330c      	adds	r3, #12
 8005fd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	e853 3f00 	ldrex	r3, [r3]
 8005fda:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0310 	bic.w	r3, r3, #16
 8005fe2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	330c      	adds	r3, #12
 8005fec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005ff0:	61fa      	str	r2, [r7, #28]
 8005ff2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff4:	69b9      	ldr	r1, [r7, #24]
 8005ff6:	69fa      	ldr	r2, [r7, #28]
 8005ff8:	e841 2300 	strex	r3, r2, [r1]
 8005ffc:	617b      	str	r3, [r7, #20]
   return(result);
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1e3      	bne.n	8005fcc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800600a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800600e:	4619      	mov	r1, r3
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 f83b 	bl	800608c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006016:	e023      	b.n	8006060 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800601c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006020:	2b00      	cmp	r3, #0
 8006022:	d009      	beq.n	8006038 <HAL_UART_IRQHandler+0x4f4>
 8006024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800602c:	2b00      	cmp	r3, #0
 800602e:	d003      	beq.n	8006038 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 f8e5 	bl	8006200 <UART_Transmit_IT>
    return;
 8006036:	e014      	b.n	8006062 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800603c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00e      	beq.n	8006062 <HAL_UART_IRQHandler+0x51e>
 8006044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604c:	2b00      	cmp	r3, #0
 800604e:	d008      	beq.n	8006062 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f924 	bl	800629e <UART_EndTransmit_IT>
    return;
 8006056:	e004      	b.n	8006062 <HAL_UART_IRQHandler+0x51e>
    return;
 8006058:	bf00      	nop
 800605a:	e002      	b.n	8006062 <HAL_UART_IRQHandler+0x51e>
      return;
 800605c:	bf00      	nop
 800605e:	e000      	b.n	8006062 <HAL_UART_IRQHandler+0x51e>
      return;
 8006060:	bf00      	nop
  }
}
 8006062:	37e8      	adds	r7, #232	; 0xe8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	bc80      	pop	{r7}
 8006078:	4770      	bx	lr

0800607a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800607a:	b480      	push	{r7}
 800607c:	b083      	sub	sp, #12
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006082:	bf00      	nop
 8006084:	370c      	adds	r7, #12
 8006086:	46bd      	mov	sp, r7
 8006088:	bc80      	pop	{r7}
 800608a:	4770      	bx	lr

0800608c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	460b      	mov	r3, r1
 8006096:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	bc80      	pop	{r7}
 80060a0:	4770      	bx	lr

080060a2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b085      	sub	sp, #20
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	60f8      	str	r0, [r7, #12]
 80060aa:	60b9      	str	r1, [r7, #8]
 80060ac:	4613      	mov	r3, r2
 80060ae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	88fa      	ldrh	r2, [r7, #6]
 80060ba:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	88fa      	ldrh	r2, [r7, #6]
 80060c0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2222      	movs	r2, #34	; 0x22
 80060cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d007      	beq.n	80060e8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060e6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	695a      	ldr	r2, [r3, #20]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f042 0201 	orr.w	r2, r2, #1
 80060f6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f042 0220 	orr.w	r2, r2, #32
 8006106:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	bc80      	pop	{r7}
 8006112:	4770      	bx	lr

08006114 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006114:	b480      	push	{r7}
 8006116:	b095      	sub	sp, #84	; 0x54
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	330c      	adds	r3, #12
 8006122:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006126:	e853 3f00 	ldrex	r3, [r3]
 800612a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800612c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006132:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	330c      	adds	r3, #12
 800613a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800613c:	643a      	str	r2, [r7, #64]	; 0x40
 800613e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006140:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006142:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006144:	e841 2300 	strex	r3, r2, [r1]
 8006148:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800614a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1e5      	bne.n	800611c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3314      	adds	r3, #20
 8006156:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	e853 3f00 	ldrex	r3, [r3]
 800615e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	f023 0301 	bic.w	r3, r3, #1
 8006166:	64bb      	str	r3, [r7, #72]	; 0x48
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3314      	adds	r3, #20
 800616e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006170:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006172:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006174:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006178:	e841 2300 	strex	r3, r2, [r1]
 800617c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1e5      	bne.n	8006150 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006188:	2b01      	cmp	r3, #1
 800618a:	d119      	bne.n	80061c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	330c      	adds	r3, #12
 8006192:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	e853 3f00 	ldrex	r3, [r3]
 800619a:	60bb      	str	r3, [r7, #8]
   return(result);
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	f023 0310 	bic.w	r3, r3, #16
 80061a2:	647b      	str	r3, [r7, #68]	; 0x44
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	330c      	adds	r3, #12
 80061aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061ac:	61ba      	str	r2, [r7, #24]
 80061ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b0:	6979      	ldr	r1, [r7, #20]
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	e841 2300 	strex	r3, r2, [r1]
 80061b8:	613b      	str	r3, [r7, #16]
   return(result);
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1e5      	bne.n	800618c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2220      	movs	r2, #32
 80061c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80061ce:	bf00      	nop
 80061d0:	3754      	adds	r7, #84	; 0x54
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bc80      	pop	{r7}
 80061d6:	4770      	bx	lr

080061d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f7ff ff41 	bl	800607a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061f8:	bf00      	nop
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800620e:	b2db      	uxtb	r3, r3
 8006210:	2b21      	cmp	r3, #33	; 0x21
 8006212:	d13e      	bne.n	8006292 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800621c:	d114      	bne.n	8006248 <UART_Transmit_IT+0x48>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d110      	bne.n	8006248 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	461a      	mov	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800623a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a1b      	ldr	r3, [r3, #32]
 8006240:	1c9a      	adds	r2, r3, #2
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	621a      	str	r2, [r3, #32]
 8006246:	e008      	b.n	800625a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	1c59      	adds	r1, r3, #1
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	6211      	str	r1, [r2, #32]
 8006252:	781a      	ldrb	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800625e:	b29b      	uxth	r3, r3
 8006260:	3b01      	subs	r3, #1
 8006262:	b29b      	uxth	r3, r3
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	4619      	mov	r1, r3
 8006268:	84d1      	strh	r1, [r2, #38]	; 0x26
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10f      	bne.n	800628e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68da      	ldr	r2, [r3, #12]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800627c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68da      	ldr	r2, [r3, #12]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800628c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800628e:	2300      	movs	r3, #0
 8006290:	e000      	b.n	8006294 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006292:	2302      	movs	r3, #2
  }
}
 8006294:	4618      	mov	r0, r3
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	bc80      	pop	{r7}
 800629c:	4770      	bx	lr

0800629e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b082      	sub	sp, #8
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68da      	ldr	r2, [r3, #12]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2220      	movs	r2, #32
 80062ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7ff fed2 	bl	8006068 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b08c      	sub	sp, #48	; 0x30
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b22      	cmp	r3, #34	; 0x22
 80062e0:	f040 80ae 	bne.w	8006440 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ec:	d117      	bne.n	800631e <UART_Receive_IT+0x50>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d113      	bne.n	800631e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80062f6:	2300      	movs	r3, #0
 80062f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	b29b      	uxth	r3, r3
 8006308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800630c:	b29a      	uxth	r2, r3
 800630e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006310:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006316:	1c9a      	adds	r2, r3, #2
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	629a      	str	r2, [r3, #40]	; 0x28
 800631c:	e026      	b.n	800636c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006322:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006324:	2300      	movs	r3, #0
 8006326:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006330:	d007      	beq.n	8006342 <UART_Receive_IT+0x74>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10a      	bne.n	8006350 <UART_Receive_IT+0x82>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d106      	bne.n	8006350 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	b2da      	uxtb	r2, r3
 800634a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634c:	701a      	strb	r2, [r3, #0]
 800634e:	e008      	b.n	8006362 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	b2db      	uxtb	r3, r3
 8006358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800635c:	b2da      	uxtb	r2, r3
 800635e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006360:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006366:	1c5a      	adds	r2, r3, #1
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006370:	b29b      	uxth	r3, r3
 8006372:	3b01      	subs	r3, #1
 8006374:	b29b      	uxth	r3, r3
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	4619      	mov	r1, r3
 800637a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800637c:	2b00      	cmp	r3, #0
 800637e:	d15d      	bne.n	800643c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68da      	ldr	r2, [r3, #12]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f022 0220 	bic.w	r2, r2, #32
 800638e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800639e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	695a      	ldr	r2, [r3, #20]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 0201 	bic.w	r2, r2, #1
 80063ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2220      	movs	r2, #32
 80063b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d135      	bne.n	8006432 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	330c      	adds	r3, #12
 80063d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	e853 3f00 	ldrex	r3, [r3]
 80063da:	613b      	str	r3, [r7, #16]
   return(result);
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	f023 0310 	bic.w	r3, r3, #16
 80063e2:	627b      	str	r3, [r7, #36]	; 0x24
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	330c      	adds	r3, #12
 80063ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ec:	623a      	str	r2, [r7, #32]
 80063ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f0:	69f9      	ldr	r1, [r7, #28]
 80063f2:	6a3a      	ldr	r2, [r7, #32]
 80063f4:	e841 2300 	strex	r3, r2, [r1]
 80063f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1e5      	bne.n	80063cc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0310 	and.w	r3, r3, #16
 800640a:	2b10      	cmp	r3, #16
 800640c:	d10a      	bne.n	8006424 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800640e:	2300      	movs	r3, #0
 8006410:	60fb      	str	r3, [r7, #12]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	60fb      	str	r3, [r7, #12]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	60fb      	str	r3, [r7, #12]
 8006422:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006428:	4619      	mov	r1, r3
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7ff fe2e 	bl	800608c <HAL_UARTEx_RxEventCallback>
 8006430:	e002      	b.n	8006438 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7fa fe14 	bl	8001060 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006438:	2300      	movs	r3, #0
 800643a:	e002      	b.n	8006442 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800643c:	2300      	movs	r3, #0
 800643e:	e000      	b.n	8006442 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006440:	2302      	movs	r3, #2
  }
}
 8006442:	4618      	mov	r0, r3
 8006444:	3730      	adds	r7, #48	; 0x30
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
	...

0800644c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68da      	ldr	r2, [r3, #12]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	430a      	orrs	r2, r1
 8006468:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	689a      	ldr	r2, [r3, #8]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	431a      	orrs	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	4313      	orrs	r3, r2
 800647a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006486:	f023 030c 	bic.w	r3, r3, #12
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	6812      	ldr	r2, [r2, #0]
 800648e:	68b9      	ldr	r1, [r7, #8]
 8006490:	430b      	orrs	r3, r1
 8006492:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	699a      	ldr	r2, [r3, #24]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a2c      	ldr	r2, [pc, #176]	; (8006560 <UART_SetConfig+0x114>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d103      	bne.n	80064bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80064b4:	f7fe fbb6 	bl	8004c24 <HAL_RCC_GetPCLK2Freq>
 80064b8:	60f8      	str	r0, [r7, #12]
 80064ba:	e002      	b.n	80064c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80064bc:	f7fe fb9e 	bl	8004bfc <HAL_RCC_GetPCLK1Freq>
 80064c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	009a      	lsls	r2, r3, #2
 80064cc:	441a      	add	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d8:	4a22      	ldr	r2, [pc, #136]	; (8006564 <UART_SetConfig+0x118>)
 80064da:	fba2 2303 	umull	r2, r3, r2, r3
 80064de:	095b      	lsrs	r3, r3, #5
 80064e0:	0119      	lsls	r1, r3, #4
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	4613      	mov	r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4413      	add	r3, r2
 80064ea:	009a      	lsls	r2, r3, #2
 80064ec:	441a      	add	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80064f8:	4b1a      	ldr	r3, [pc, #104]	; (8006564 <UART_SetConfig+0x118>)
 80064fa:	fba3 0302 	umull	r0, r3, r3, r2
 80064fe:	095b      	lsrs	r3, r3, #5
 8006500:	2064      	movs	r0, #100	; 0x64
 8006502:	fb00 f303 	mul.w	r3, r0, r3
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	011b      	lsls	r3, r3, #4
 800650a:	3332      	adds	r3, #50	; 0x32
 800650c:	4a15      	ldr	r2, [pc, #84]	; (8006564 <UART_SetConfig+0x118>)
 800650e:	fba2 2303 	umull	r2, r3, r2, r3
 8006512:	095b      	lsrs	r3, r3, #5
 8006514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006518:	4419      	add	r1, r3
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	4613      	mov	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	009a      	lsls	r2, r3, #2
 8006524:	441a      	add	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006530:	4b0c      	ldr	r3, [pc, #48]	; (8006564 <UART_SetConfig+0x118>)
 8006532:	fba3 0302 	umull	r0, r3, r3, r2
 8006536:	095b      	lsrs	r3, r3, #5
 8006538:	2064      	movs	r0, #100	; 0x64
 800653a:	fb00 f303 	mul.w	r3, r0, r3
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	011b      	lsls	r3, r3, #4
 8006542:	3332      	adds	r3, #50	; 0x32
 8006544:	4a07      	ldr	r2, [pc, #28]	; (8006564 <UART_SetConfig+0x118>)
 8006546:	fba2 2303 	umull	r2, r3, r2, r3
 800654a:	095b      	lsrs	r3, r3, #5
 800654c:	f003 020f 	and.w	r2, r3, #15
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	440a      	add	r2, r1
 8006556:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006558:	bf00      	nop
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	40013800 	.word	0x40013800
 8006564:	51eb851f 	.word	0x51eb851f

08006568 <_ZdlPvj>:
 8006568:	f000 b811 	b.w	800658e <_ZdlPv>

0800656c <_Znwj>:
 800656c:	2801      	cmp	r0, #1
 800656e:	bf38      	it	cc
 8006570:	2001      	movcc	r0, #1
 8006572:	b510      	push	{r4, lr}
 8006574:	4604      	mov	r4, r0
 8006576:	4620      	mov	r0, r4
 8006578:	f000 fb7e 	bl	8006c78 <malloc>
 800657c:	b930      	cbnz	r0, 800658c <_Znwj+0x20>
 800657e:	f000 f809 	bl	8006594 <_ZSt15get_new_handlerv>
 8006582:	b908      	cbnz	r0, 8006588 <_Znwj+0x1c>
 8006584:	f000 fb46 	bl	8006c14 <abort>
 8006588:	4780      	blx	r0
 800658a:	e7f4      	b.n	8006576 <_Znwj+0xa>
 800658c:	bd10      	pop	{r4, pc}

0800658e <_ZdlPv>:
 800658e:	f000 bb7b 	b.w	8006c88 <free>
	...

08006594 <_ZSt15get_new_handlerv>:
 8006594:	4b02      	ldr	r3, [pc, #8]	; (80065a0 <_ZSt15get_new_handlerv+0xc>)
 8006596:	6818      	ldr	r0, [r3, #0]
 8006598:	f3bf 8f5b 	dmb	ish
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	20000794 	.word	0x20000794
 80065a4:	00000000 	.word	0x00000000

080065a8 <atan>:
 80065a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ac:	4bb6      	ldr	r3, [pc, #728]	; (8006888 <atan+0x2e0>)
 80065ae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80065b2:	429e      	cmp	r6, r3
 80065b4:	4604      	mov	r4, r0
 80065b6:	460d      	mov	r5, r1
 80065b8:	468b      	mov	fp, r1
 80065ba:	dd17      	ble.n	80065ec <atan+0x44>
 80065bc:	4bb3      	ldr	r3, [pc, #716]	; (800688c <atan+0x2e4>)
 80065be:	429e      	cmp	r6, r3
 80065c0:	dc01      	bgt.n	80065c6 <atan+0x1e>
 80065c2:	d109      	bne.n	80065d8 <atan+0x30>
 80065c4:	b140      	cbz	r0, 80065d8 <atan+0x30>
 80065c6:	4622      	mov	r2, r4
 80065c8:	462b      	mov	r3, r5
 80065ca:	4620      	mov	r0, r4
 80065cc:	4629      	mov	r1, r5
 80065ce:	f7f9 fdc5 	bl	800015c <__adddf3>
 80065d2:	4604      	mov	r4, r0
 80065d4:	460d      	mov	r5, r1
 80065d6:	e005      	b.n	80065e4 <atan+0x3c>
 80065d8:	f1bb 0f00 	cmp.w	fp, #0
 80065dc:	4cac      	ldr	r4, [pc, #688]	; (8006890 <atan+0x2e8>)
 80065de:	f300 8121 	bgt.w	8006824 <atan+0x27c>
 80065e2:	4dac      	ldr	r5, [pc, #688]	; (8006894 <atan+0x2ec>)
 80065e4:	4620      	mov	r0, r4
 80065e6:	4629      	mov	r1, r5
 80065e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ec:	4baa      	ldr	r3, [pc, #680]	; (8006898 <atan+0x2f0>)
 80065ee:	429e      	cmp	r6, r3
 80065f0:	dc11      	bgt.n	8006616 <atan+0x6e>
 80065f2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80065f6:	429e      	cmp	r6, r3
 80065f8:	dc0a      	bgt.n	8006610 <atan+0x68>
 80065fa:	a38b      	add	r3, pc, #556	; (adr r3, 8006828 <atan+0x280>)
 80065fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006600:	f7f9 fdac 	bl	800015c <__adddf3>
 8006604:	2200      	movs	r2, #0
 8006606:	4ba5      	ldr	r3, [pc, #660]	; (800689c <atan+0x2f4>)
 8006608:	f7fa f9ee 	bl	80009e8 <__aeabi_dcmpgt>
 800660c:	2800      	cmp	r0, #0
 800660e:	d1e9      	bne.n	80065e4 <atan+0x3c>
 8006610:	f04f 3aff 	mov.w	sl, #4294967295
 8006614:	e027      	b.n	8006666 <atan+0xbe>
 8006616:	f000 f951 	bl	80068bc <fabs>
 800661a:	4ba1      	ldr	r3, [pc, #644]	; (80068a0 <atan+0x2f8>)
 800661c:	4604      	mov	r4, r0
 800661e:	429e      	cmp	r6, r3
 8006620:	460d      	mov	r5, r1
 8006622:	f300 80b8 	bgt.w	8006796 <atan+0x1ee>
 8006626:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800662a:	429e      	cmp	r6, r3
 800662c:	f300 809c 	bgt.w	8006768 <atan+0x1c0>
 8006630:	4602      	mov	r2, r0
 8006632:	460b      	mov	r3, r1
 8006634:	f7f9 fd92 	bl	800015c <__adddf3>
 8006638:	2200      	movs	r2, #0
 800663a:	4b98      	ldr	r3, [pc, #608]	; (800689c <atan+0x2f4>)
 800663c:	f7f9 fd8c 	bl	8000158 <__aeabi_dsub>
 8006640:	2200      	movs	r2, #0
 8006642:	4606      	mov	r6, r0
 8006644:	460f      	mov	r7, r1
 8006646:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800664a:	4620      	mov	r0, r4
 800664c:	4629      	mov	r1, r5
 800664e:	f7f9 fd85 	bl	800015c <__adddf3>
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	4630      	mov	r0, r6
 8006658:	4639      	mov	r1, r7
 800665a:	f7fa f85f 	bl	800071c <__aeabi_ddiv>
 800665e:	f04f 0a00 	mov.w	sl, #0
 8006662:	4604      	mov	r4, r0
 8006664:	460d      	mov	r5, r1
 8006666:	4622      	mov	r2, r4
 8006668:	462b      	mov	r3, r5
 800666a:	4620      	mov	r0, r4
 800666c:	4629      	mov	r1, r5
 800666e:	f7f9 ff2b 	bl	80004c8 <__aeabi_dmul>
 8006672:	4602      	mov	r2, r0
 8006674:	460b      	mov	r3, r1
 8006676:	4680      	mov	r8, r0
 8006678:	4689      	mov	r9, r1
 800667a:	f7f9 ff25 	bl	80004c8 <__aeabi_dmul>
 800667e:	a36c      	add	r3, pc, #432	; (adr r3, 8006830 <atan+0x288>)
 8006680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006684:	4606      	mov	r6, r0
 8006686:	460f      	mov	r7, r1
 8006688:	f7f9 ff1e 	bl	80004c8 <__aeabi_dmul>
 800668c:	a36a      	add	r3, pc, #424	; (adr r3, 8006838 <atan+0x290>)
 800668e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006692:	f7f9 fd63 	bl	800015c <__adddf3>
 8006696:	4632      	mov	r2, r6
 8006698:	463b      	mov	r3, r7
 800669a:	f7f9 ff15 	bl	80004c8 <__aeabi_dmul>
 800669e:	a368      	add	r3, pc, #416	; (adr r3, 8006840 <atan+0x298>)
 80066a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a4:	f7f9 fd5a 	bl	800015c <__adddf3>
 80066a8:	4632      	mov	r2, r6
 80066aa:	463b      	mov	r3, r7
 80066ac:	f7f9 ff0c 	bl	80004c8 <__aeabi_dmul>
 80066b0:	a365      	add	r3, pc, #404	; (adr r3, 8006848 <atan+0x2a0>)
 80066b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b6:	f7f9 fd51 	bl	800015c <__adddf3>
 80066ba:	4632      	mov	r2, r6
 80066bc:	463b      	mov	r3, r7
 80066be:	f7f9 ff03 	bl	80004c8 <__aeabi_dmul>
 80066c2:	a363      	add	r3, pc, #396	; (adr r3, 8006850 <atan+0x2a8>)
 80066c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c8:	f7f9 fd48 	bl	800015c <__adddf3>
 80066cc:	4632      	mov	r2, r6
 80066ce:	463b      	mov	r3, r7
 80066d0:	f7f9 fefa 	bl	80004c8 <__aeabi_dmul>
 80066d4:	a360      	add	r3, pc, #384	; (adr r3, 8006858 <atan+0x2b0>)
 80066d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066da:	f7f9 fd3f 	bl	800015c <__adddf3>
 80066de:	4642      	mov	r2, r8
 80066e0:	464b      	mov	r3, r9
 80066e2:	f7f9 fef1 	bl	80004c8 <__aeabi_dmul>
 80066e6:	a35e      	add	r3, pc, #376	; (adr r3, 8006860 <atan+0x2b8>)
 80066e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ec:	4680      	mov	r8, r0
 80066ee:	4689      	mov	r9, r1
 80066f0:	4630      	mov	r0, r6
 80066f2:	4639      	mov	r1, r7
 80066f4:	f7f9 fee8 	bl	80004c8 <__aeabi_dmul>
 80066f8:	a35b      	add	r3, pc, #364	; (adr r3, 8006868 <atan+0x2c0>)
 80066fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fe:	f7f9 fd2b 	bl	8000158 <__aeabi_dsub>
 8006702:	4632      	mov	r2, r6
 8006704:	463b      	mov	r3, r7
 8006706:	f7f9 fedf 	bl	80004c8 <__aeabi_dmul>
 800670a:	a359      	add	r3, pc, #356	; (adr r3, 8006870 <atan+0x2c8>)
 800670c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006710:	f7f9 fd22 	bl	8000158 <__aeabi_dsub>
 8006714:	4632      	mov	r2, r6
 8006716:	463b      	mov	r3, r7
 8006718:	f7f9 fed6 	bl	80004c8 <__aeabi_dmul>
 800671c:	a356      	add	r3, pc, #344	; (adr r3, 8006878 <atan+0x2d0>)
 800671e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006722:	f7f9 fd19 	bl	8000158 <__aeabi_dsub>
 8006726:	4632      	mov	r2, r6
 8006728:	463b      	mov	r3, r7
 800672a:	f7f9 fecd 	bl	80004c8 <__aeabi_dmul>
 800672e:	a354      	add	r3, pc, #336	; (adr r3, 8006880 <atan+0x2d8>)
 8006730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006734:	f7f9 fd10 	bl	8000158 <__aeabi_dsub>
 8006738:	4632      	mov	r2, r6
 800673a:	463b      	mov	r3, r7
 800673c:	f7f9 fec4 	bl	80004c8 <__aeabi_dmul>
 8006740:	4602      	mov	r2, r0
 8006742:	460b      	mov	r3, r1
 8006744:	4640      	mov	r0, r8
 8006746:	4649      	mov	r1, r9
 8006748:	f7f9 fd08 	bl	800015c <__adddf3>
 800674c:	4622      	mov	r2, r4
 800674e:	462b      	mov	r3, r5
 8006750:	f7f9 feba 	bl	80004c8 <__aeabi_dmul>
 8006754:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006758:	4602      	mov	r2, r0
 800675a:	460b      	mov	r3, r1
 800675c:	d144      	bne.n	80067e8 <atan+0x240>
 800675e:	4620      	mov	r0, r4
 8006760:	4629      	mov	r1, r5
 8006762:	f7f9 fcf9 	bl	8000158 <__aeabi_dsub>
 8006766:	e734      	b.n	80065d2 <atan+0x2a>
 8006768:	2200      	movs	r2, #0
 800676a:	4b4c      	ldr	r3, [pc, #304]	; (800689c <atan+0x2f4>)
 800676c:	f7f9 fcf4 	bl	8000158 <__aeabi_dsub>
 8006770:	2200      	movs	r2, #0
 8006772:	4606      	mov	r6, r0
 8006774:	460f      	mov	r7, r1
 8006776:	4620      	mov	r0, r4
 8006778:	4629      	mov	r1, r5
 800677a:	4b48      	ldr	r3, [pc, #288]	; (800689c <atan+0x2f4>)
 800677c:	f7f9 fcee 	bl	800015c <__adddf3>
 8006780:	4602      	mov	r2, r0
 8006782:	460b      	mov	r3, r1
 8006784:	4630      	mov	r0, r6
 8006786:	4639      	mov	r1, r7
 8006788:	f7f9 ffc8 	bl	800071c <__aeabi_ddiv>
 800678c:	f04f 0a01 	mov.w	sl, #1
 8006790:	4604      	mov	r4, r0
 8006792:	460d      	mov	r5, r1
 8006794:	e767      	b.n	8006666 <atan+0xbe>
 8006796:	4b43      	ldr	r3, [pc, #268]	; (80068a4 <atan+0x2fc>)
 8006798:	429e      	cmp	r6, r3
 800679a:	da1a      	bge.n	80067d2 <atan+0x22a>
 800679c:	2200      	movs	r2, #0
 800679e:	4b42      	ldr	r3, [pc, #264]	; (80068a8 <atan+0x300>)
 80067a0:	f7f9 fcda 	bl	8000158 <__aeabi_dsub>
 80067a4:	2200      	movs	r2, #0
 80067a6:	4606      	mov	r6, r0
 80067a8:	460f      	mov	r7, r1
 80067aa:	4620      	mov	r0, r4
 80067ac:	4629      	mov	r1, r5
 80067ae:	4b3e      	ldr	r3, [pc, #248]	; (80068a8 <atan+0x300>)
 80067b0:	f7f9 fe8a 	bl	80004c8 <__aeabi_dmul>
 80067b4:	2200      	movs	r2, #0
 80067b6:	4b39      	ldr	r3, [pc, #228]	; (800689c <atan+0x2f4>)
 80067b8:	f7f9 fcd0 	bl	800015c <__adddf3>
 80067bc:	4602      	mov	r2, r0
 80067be:	460b      	mov	r3, r1
 80067c0:	4630      	mov	r0, r6
 80067c2:	4639      	mov	r1, r7
 80067c4:	f7f9 ffaa 	bl	800071c <__aeabi_ddiv>
 80067c8:	f04f 0a02 	mov.w	sl, #2
 80067cc:	4604      	mov	r4, r0
 80067ce:	460d      	mov	r5, r1
 80067d0:	e749      	b.n	8006666 <atan+0xbe>
 80067d2:	4602      	mov	r2, r0
 80067d4:	460b      	mov	r3, r1
 80067d6:	2000      	movs	r0, #0
 80067d8:	4934      	ldr	r1, [pc, #208]	; (80068ac <atan+0x304>)
 80067da:	f7f9 ff9f 	bl	800071c <__aeabi_ddiv>
 80067de:	f04f 0a03 	mov.w	sl, #3
 80067e2:	4604      	mov	r4, r0
 80067e4:	460d      	mov	r5, r1
 80067e6:	e73e      	b.n	8006666 <atan+0xbe>
 80067e8:	4b31      	ldr	r3, [pc, #196]	; (80068b0 <atan+0x308>)
 80067ea:	4e32      	ldr	r6, [pc, #200]	; (80068b4 <atan+0x30c>)
 80067ec:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80067f0:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80067f4:	e9da 2300 	ldrd	r2, r3, [sl]
 80067f8:	f7f9 fcae 	bl	8000158 <__aeabi_dsub>
 80067fc:	4622      	mov	r2, r4
 80067fe:	462b      	mov	r3, r5
 8006800:	f7f9 fcaa 	bl	8000158 <__aeabi_dsub>
 8006804:	4602      	mov	r2, r0
 8006806:	460b      	mov	r3, r1
 8006808:	e9d6 0100 	ldrd	r0, r1, [r6]
 800680c:	f7f9 fca4 	bl	8000158 <__aeabi_dsub>
 8006810:	f1bb 0f00 	cmp.w	fp, #0
 8006814:	4604      	mov	r4, r0
 8006816:	460d      	mov	r5, r1
 8006818:	f6bf aee4 	bge.w	80065e4 <atan+0x3c>
 800681c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006820:	461d      	mov	r5, r3
 8006822:	e6df      	b.n	80065e4 <atan+0x3c>
 8006824:	4d24      	ldr	r5, [pc, #144]	; (80068b8 <atan+0x310>)
 8006826:	e6dd      	b.n	80065e4 <atan+0x3c>
 8006828:	8800759c 	.word	0x8800759c
 800682c:	7e37e43c 	.word	0x7e37e43c
 8006830:	e322da11 	.word	0xe322da11
 8006834:	3f90ad3a 	.word	0x3f90ad3a
 8006838:	24760deb 	.word	0x24760deb
 800683c:	3fa97b4b 	.word	0x3fa97b4b
 8006840:	a0d03d51 	.word	0xa0d03d51
 8006844:	3fb10d66 	.word	0x3fb10d66
 8006848:	c54c206e 	.word	0xc54c206e
 800684c:	3fb745cd 	.word	0x3fb745cd
 8006850:	920083ff 	.word	0x920083ff
 8006854:	3fc24924 	.word	0x3fc24924
 8006858:	5555550d 	.word	0x5555550d
 800685c:	3fd55555 	.word	0x3fd55555
 8006860:	2c6a6c2f 	.word	0x2c6a6c2f
 8006864:	bfa2b444 	.word	0xbfa2b444
 8006868:	52defd9a 	.word	0x52defd9a
 800686c:	3fadde2d 	.word	0x3fadde2d
 8006870:	af749a6d 	.word	0xaf749a6d
 8006874:	3fb3b0f2 	.word	0x3fb3b0f2
 8006878:	fe231671 	.word	0xfe231671
 800687c:	3fbc71c6 	.word	0x3fbc71c6
 8006880:	9998ebc4 	.word	0x9998ebc4
 8006884:	3fc99999 	.word	0x3fc99999
 8006888:	440fffff 	.word	0x440fffff
 800688c:	7ff00000 	.word	0x7ff00000
 8006890:	54442d18 	.word	0x54442d18
 8006894:	bff921fb 	.word	0xbff921fb
 8006898:	3fdbffff 	.word	0x3fdbffff
 800689c:	3ff00000 	.word	0x3ff00000
 80068a0:	3ff2ffff 	.word	0x3ff2ffff
 80068a4:	40038000 	.word	0x40038000
 80068a8:	3ff80000 	.word	0x3ff80000
 80068ac:	bff00000 	.word	0xbff00000
 80068b0:	08007e08 	.word	0x08007e08
 80068b4:	08007de8 	.word	0x08007de8
 80068b8:	3ff921fb 	.word	0x3ff921fb

080068bc <fabs>:
 80068bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80068c0:	4770      	bx	lr

080068c2 <atan2>:
 80068c2:	f000 b825 	b.w	8006910 <__ieee754_atan2>

080068c6 <sqrt>:
 80068c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c8:	4606      	mov	r6, r0
 80068ca:	460f      	mov	r7, r1
 80068cc:	f000 f8f2 	bl	8006ab4 <__ieee754_sqrt>
 80068d0:	4632      	mov	r2, r6
 80068d2:	4604      	mov	r4, r0
 80068d4:	460d      	mov	r5, r1
 80068d6:	463b      	mov	r3, r7
 80068d8:	4630      	mov	r0, r6
 80068da:	4639      	mov	r1, r7
 80068dc:	f7fa f88e 	bl	80009fc <__aeabi_dcmpun>
 80068e0:	b990      	cbnz	r0, 8006908 <sqrt+0x42>
 80068e2:	2200      	movs	r2, #0
 80068e4:	2300      	movs	r3, #0
 80068e6:	4630      	mov	r0, r6
 80068e8:	4639      	mov	r1, r7
 80068ea:	f7fa f85f 	bl	80009ac <__aeabi_dcmplt>
 80068ee:	b158      	cbz	r0, 8006908 <sqrt+0x42>
 80068f0:	f000 f998 	bl	8006c24 <__errno>
 80068f4:	2321      	movs	r3, #33	; 0x21
 80068f6:	2200      	movs	r2, #0
 80068f8:	6003      	str	r3, [r0, #0]
 80068fa:	2300      	movs	r3, #0
 80068fc:	4610      	mov	r0, r2
 80068fe:	4619      	mov	r1, r3
 8006900:	f7f9 ff0c 	bl	800071c <__aeabi_ddiv>
 8006904:	4604      	mov	r4, r0
 8006906:	460d      	mov	r5, r1
 8006908:	4620      	mov	r0, r4
 800690a:	4629      	mov	r1, r5
 800690c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006910 <__ieee754_atan2>:
 8006910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006914:	4692      	mov	sl, r2
 8006916:	4699      	mov	r9, r3
 8006918:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800691c:	461f      	mov	r7, r3
 800691e:	f1ca 0300 	rsb	r3, sl, #0
 8006922:	f8df e184 	ldr.w	lr, [pc, #388]	; 8006aa8 <__ieee754_atan2+0x198>
 8006926:	ea43 030a 	orr.w	r3, r3, sl
 800692a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800692e:	4573      	cmp	r3, lr
 8006930:	4604      	mov	r4, r0
 8006932:	460d      	mov	r5, r1
 8006934:	d808      	bhi.n	8006948 <__ieee754_atan2+0x38>
 8006936:	4246      	negs	r6, r0
 8006938:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800693c:	4306      	orrs	r6, r0
 800693e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8006942:	4576      	cmp	r6, lr
 8006944:	468c      	mov	ip, r1
 8006946:	d908      	bls.n	800695a <__ieee754_atan2+0x4a>
 8006948:	4652      	mov	r2, sl
 800694a:	464b      	mov	r3, r9
 800694c:	4620      	mov	r0, r4
 800694e:	4629      	mov	r1, r5
 8006950:	f7f9 fc04 	bl	800015c <__adddf3>
 8006954:	4604      	mov	r4, r0
 8006956:	460d      	mov	r5, r1
 8006958:	e019      	b.n	800698e <__ieee754_atan2+0x7e>
 800695a:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800695e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8006962:	ea56 060a 	orrs.w	r6, r6, sl
 8006966:	d103      	bne.n	8006970 <__ieee754_atan2+0x60>
 8006968:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800696c:	f7ff be1c 	b.w	80065a8 <atan>
 8006970:	17be      	asrs	r6, r7, #30
 8006972:	f006 0602 	and.w	r6, r6, #2
 8006976:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800697a:	ea53 0100 	orrs.w	r1, r3, r0
 800697e:	d10a      	bne.n	8006996 <__ieee754_atan2+0x86>
 8006980:	2e02      	cmp	r6, #2
 8006982:	d067      	beq.n	8006a54 <__ieee754_atan2+0x144>
 8006984:	2e03      	cmp	r6, #3
 8006986:	d102      	bne.n	800698e <__ieee754_atan2+0x7e>
 8006988:	a53b      	add	r5, pc, #236	; (adr r5, 8006a78 <__ieee754_atan2+0x168>)
 800698a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800698e:	4620      	mov	r0, r4
 8006990:	4629      	mov	r1, r5
 8006992:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006996:	ea52 010a 	orrs.w	r1, r2, sl
 800699a:	d106      	bne.n	80069aa <__ieee754_atan2+0x9a>
 800699c:	f1bc 0f00 	cmp.w	ip, #0
 80069a0:	da63      	bge.n	8006a6a <__ieee754_atan2+0x15a>
 80069a2:	a537      	add	r5, pc, #220	; (adr r5, 8006a80 <__ieee754_atan2+0x170>)
 80069a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80069a8:	e7f1      	b.n	800698e <__ieee754_atan2+0x7e>
 80069aa:	4572      	cmp	r2, lr
 80069ac:	d10f      	bne.n	80069ce <__ieee754_atan2+0xbe>
 80069ae:	4293      	cmp	r3, r2
 80069b0:	f106 36ff 	add.w	r6, r6, #4294967295
 80069b4:	d107      	bne.n	80069c6 <__ieee754_atan2+0xb6>
 80069b6:	2e02      	cmp	r6, #2
 80069b8:	d850      	bhi.n	8006a5c <__ieee754_atan2+0x14c>
 80069ba:	4b3c      	ldr	r3, [pc, #240]	; (8006aac <__ieee754_atan2+0x19c>)
 80069bc:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80069c0:	e9d6 4500 	ldrd	r4, r5, [r6]
 80069c4:	e7e3      	b.n	800698e <__ieee754_atan2+0x7e>
 80069c6:	2e02      	cmp	r6, #2
 80069c8:	d84c      	bhi.n	8006a64 <__ieee754_atan2+0x154>
 80069ca:	4b39      	ldr	r3, [pc, #228]	; (8006ab0 <__ieee754_atan2+0x1a0>)
 80069cc:	e7f6      	b.n	80069bc <__ieee754_atan2+0xac>
 80069ce:	4573      	cmp	r3, lr
 80069d0:	d0e4      	beq.n	800699c <__ieee754_atan2+0x8c>
 80069d2:	1a9b      	subs	r3, r3, r2
 80069d4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80069d8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80069dc:	da20      	bge.n	8006a20 <__ieee754_atan2+0x110>
 80069de:	2f00      	cmp	r7, #0
 80069e0:	da01      	bge.n	80069e6 <__ieee754_atan2+0xd6>
 80069e2:	323c      	adds	r2, #60	; 0x3c
 80069e4:	db20      	blt.n	8006a28 <__ieee754_atan2+0x118>
 80069e6:	4652      	mov	r2, sl
 80069e8:	464b      	mov	r3, r9
 80069ea:	4620      	mov	r0, r4
 80069ec:	4629      	mov	r1, r5
 80069ee:	f7f9 fe95 	bl	800071c <__aeabi_ddiv>
 80069f2:	f7ff ff63 	bl	80068bc <fabs>
 80069f6:	f7ff fdd7 	bl	80065a8 <atan>
 80069fa:	4604      	mov	r4, r0
 80069fc:	460d      	mov	r5, r1
 80069fe:	2e01      	cmp	r6, #1
 8006a00:	d015      	beq.n	8006a2e <__ieee754_atan2+0x11e>
 8006a02:	2e02      	cmp	r6, #2
 8006a04:	d017      	beq.n	8006a36 <__ieee754_atan2+0x126>
 8006a06:	2e00      	cmp	r6, #0
 8006a08:	d0c1      	beq.n	800698e <__ieee754_atan2+0x7e>
 8006a0a:	a31f      	add	r3, pc, #124	; (adr r3, 8006a88 <__ieee754_atan2+0x178>)
 8006a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a10:	4620      	mov	r0, r4
 8006a12:	4629      	mov	r1, r5
 8006a14:	f7f9 fba0 	bl	8000158 <__aeabi_dsub>
 8006a18:	a31d      	add	r3, pc, #116	; (adr r3, 8006a90 <__ieee754_atan2+0x180>)
 8006a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1e:	e016      	b.n	8006a4e <__ieee754_atan2+0x13e>
 8006a20:	a51d      	add	r5, pc, #116	; (adr r5, 8006a98 <__ieee754_atan2+0x188>)
 8006a22:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006a26:	e7ea      	b.n	80069fe <__ieee754_atan2+0xee>
 8006a28:	2400      	movs	r4, #0
 8006a2a:	2500      	movs	r5, #0
 8006a2c:	e7e7      	b.n	80069fe <__ieee754_atan2+0xee>
 8006a2e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006a32:	461d      	mov	r5, r3
 8006a34:	e7ab      	b.n	800698e <__ieee754_atan2+0x7e>
 8006a36:	a314      	add	r3, pc, #80	; (adr r3, 8006a88 <__ieee754_atan2+0x178>)
 8006a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	4629      	mov	r1, r5
 8006a40:	f7f9 fb8a 	bl	8000158 <__aeabi_dsub>
 8006a44:	4602      	mov	r2, r0
 8006a46:	460b      	mov	r3, r1
 8006a48:	a111      	add	r1, pc, #68	; (adr r1, 8006a90 <__ieee754_atan2+0x180>)
 8006a4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a4e:	f7f9 fb83 	bl	8000158 <__aeabi_dsub>
 8006a52:	e77f      	b.n	8006954 <__ieee754_atan2+0x44>
 8006a54:	a50e      	add	r5, pc, #56	; (adr r5, 8006a90 <__ieee754_atan2+0x180>)
 8006a56:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006a5a:	e798      	b.n	800698e <__ieee754_atan2+0x7e>
 8006a5c:	a510      	add	r5, pc, #64	; (adr r5, 8006aa0 <__ieee754_atan2+0x190>)
 8006a5e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006a62:	e794      	b.n	800698e <__ieee754_atan2+0x7e>
 8006a64:	2400      	movs	r4, #0
 8006a66:	2500      	movs	r5, #0
 8006a68:	e791      	b.n	800698e <__ieee754_atan2+0x7e>
 8006a6a:	a50b      	add	r5, pc, #44	; (adr r5, 8006a98 <__ieee754_atan2+0x188>)
 8006a6c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006a70:	e78d      	b.n	800698e <__ieee754_atan2+0x7e>
 8006a72:	bf00      	nop
 8006a74:	f3af 8000 	nop.w
 8006a78:	54442d18 	.word	0x54442d18
 8006a7c:	c00921fb 	.word	0xc00921fb
 8006a80:	54442d18 	.word	0x54442d18
 8006a84:	bff921fb 	.word	0xbff921fb
 8006a88:	33145c07 	.word	0x33145c07
 8006a8c:	3ca1a626 	.word	0x3ca1a626
 8006a90:	54442d18 	.word	0x54442d18
 8006a94:	400921fb 	.word	0x400921fb
 8006a98:	54442d18 	.word	0x54442d18
 8006a9c:	3ff921fb 	.word	0x3ff921fb
 8006aa0:	54442d18 	.word	0x54442d18
 8006aa4:	3fe921fb 	.word	0x3fe921fb
 8006aa8:	7ff00000 	.word	0x7ff00000
 8006aac:	08007e28 	.word	0x08007e28
 8006ab0:	08007e40 	.word	0x08007e40

08006ab4 <__ieee754_sqrt>:
 8006ab4:	f8df c158 	ldr.w	ip, [pc, #344]	; 8006c10 <__ieee754_sqrt+0x15c>
 8006ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006abc:	ea3c 0c01 	bics.w	ip, ip, r1
 8006ac0:	4606      	mov	r6, r0
 8006ac2:	460d      	mov	r5, r1
 8006ac4:	460c      	mov	r4, r1
 8006ac6:	460a      	mov	r2, r1
 8006ac8:	4607      	mov	r7, r0
 8006aca:	4603      	mov	r3, r0
 8006acc:	d10f      	bne.n	8006aee <__ieee754_sqrt+0x3a>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	f7f9 fcf9 	bl	80004c8 <__aeabi_dmul>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	460b      	mov	r3, r1
 8006ada:	4630      	mov	r0, r6
 8006adc:	4629      	mov	r1, r5
 8006ade:	f7f9 fb3d 	bl	800015c <__adddf3>
 8006ae2:	4606      	mov	r6, r0
 8006ae4:	460d      	mov	r5, r1
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	4629      	mov	r1, r5
 8006aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aee:	2900      	cmp	r1, #0
 8006af0:	dc0e      	bgt.n	8006b10 <__ieee754_sqrt+0x5c>
 8006af2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006af6:	ea5c 0707 	orrs.w	r7, ip, r7
 8006afa:	d0f4      	beq.n	8006ae6 <__ieee754_sqrt+0x32>
 8006afc:	b141      	cbz	r1, 8006b10 <__ieee754_sqrt+0x5c>
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	f7f9 fb29 	bl	8000158 <__aeabi_dsub>
 8006b06:	4602      	mov	r2, r0
 8006b08:	460b      	mov	r3, r1
 8006b0a:	f7f9 fe07 	bl	800071c <__aeabi_ddiv>
 8006b0e:	e7e8      	b.n	8006ae2 <__ieee754_sqrt+0x2e>
 8006b10:	1521      	asrs	r1, r4, #20
 8006b12:	d075      	beq.n	8006c00 <__ieee754_sqrt+0x14c>
 8006b14:	07cc      	lsls	r4, r1, #31
 8006b16:	f04f 0400 	mov.w	r4, #0
 8006b1a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006b1e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8006b22:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006b26:	bf5e      	ittt	pl
 8006b28:	0fd9      	lsrpl	r1, r3, #31
 8006b2a:	005b      	lslpl	r3, r3, #1
 8006b2c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8006b30:	0fd9      	lsrs	r1, r3, #31
 8006b32:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8006b36:	2516      	movs	r5, #22
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b3e:	107f      	asrs	r7, r7, #1
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	1846      	adds	r6, r0, r1
 8006b44:	4296      	cmp	r6, r2
 8006b46:	bfde      	ittt	le
 8006b48:	1b92      	suble	r2, r2, r6
 8006b4a:	1870      	addle	r0, r6, r1
 8006b4c:	1864      	addle	r4, r4, r1
 8006b4e:	0052      	lsls	r2, r2, #1
 8006b50:	3d01      	subs	r5, #1
 8006b52:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006b56:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006b5a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006b5e:	d1f0      	bne.n	8006b42 <__ieee754_sqrt+0x8e>
 8006b60:	4629      	mov	r1, r5
 8006b62:	f04f 0e20 	mov.w	lr, #32
 8006b66:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006b6a:	4282      	cmp	r2, r0
 8006b6c:	eb06 0c05 	add.w	ip, r6, r5
 8006b70:	dc02      	bgt.n	8006b78 <__ieee754_sqrt+0xc4>
 8006b72:	d113      	bne.n	8006b9c <__ieee754_sqrt+0xe8>
 8006b74:	459c      	cmp	ip, r3
 8006b76:	d811      	bhi.n	8006b9c <__ieee754_sqrt+0xe8>
 8006b78:	f1bc 0f00 	cmp.w	ip, #0
 8006b7c:	eb0c 0506 	add.w	r5, ip, r6
 8006b80:	da43      	bge.n	8006c0a <__ieee754_sqrt+0x156>
 8006b82:	2d00      	cmp	r5, #0
 8006b84:	db41      	blt.n	8006c0a <__ieee754_sqrt+0x156>
 8006b86:	f100 0801 	add.w	r8, r0, #1
 8006b8a:	1a12      	subs	r2, r2, r0
 8006b8c:	4640      	mov	r0, r8
 8006b8e:	459c      	cmp	ip, r3
 8006b90:	bf88      	it	hi
 8006b92:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006b96:	eba3 030c 	sub.w	r3, r3, ip
 8006b9a:	4431      	add	r1, r6
 8006b9c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006ba0:	f1be 0e01 	subs.w	lr, lr, #1
 8006ba4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8006ba8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006bac:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006bb0:	d1db      	bne.n	8006b6a <__ieee754_sqrt+0xb6>
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	d006      	beq.n	8006bc4 <__ieee754_sqrt+0x110>
 8006bb6:	1c48      	adds	r0, r1, #1
 8006bb8:	bf0b      	itete	eq
 8006bba:	4671      	moveq	r1, lr
 8006bbc:	3101      	addne	r1, #1
 8006bbe:	3401      	addeq	r4, #1
 8006bc0:	f021 0101 	bicne.w	r1, r1, #1
 8006bc4:	1063      	asrs	r3, r4, #1
 8006bc6:	0849      	lsrs	r1, r1, #1
 8006bc8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006bcc:	07e2      	lsls	r2, r4, #31
 8006bce:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006bd2:	bf48      	it	mi
 8006bd4:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8006bd8:	460e      	mov	r6, r1
 8006bda:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006bde:	e782      	b.n	8006ae6 <__ieee754_sqrt+0x32>
 8006be0:	0ada      	lsrs	r2, r3, #11
 8006be2:	3815      	subs	r0, #21
 8006be4:	055b      	lsls	r3, r3, #21
 8006be6:	2a00      	cmp	r2, #0
 8006be8:	d0fa      	beq.n	8006be0 <__ieee754_sqrt+0x12c>
 8006bea:	02d5      	lsls	r5, r2, #11
 8006bec:	d50a      	bpl.n	8006c04 <__ieee754_sqrt+0x150>
 8006bee:	f1c1 0420 	rsb	r4, r1, #32
 8006bf2:	fa23 f404 	lsr.w	r4, r3, r4
 8006bf6:	1e4d      	subs	r5, r1, #1
 8006bf8:	408b      	lsls	r3, r1
 8006bfa:	4322      	orrs	r2, r4
 8006bfc:	1b41      	subs	r1, r0, r5
 8006bfe:	e789      	b.n	8006b14 <__ieee754_sqrt+0x60>
 8006c00:	4608      	mov	r0, r1
 8006c02:	e7f0      	b.n	8006be6 <__ieee754_sqrt+0x132>
 8006c04:	0052      	lsls	r2, r2, #1
 8006c06:	3101      	adds	r1, #1
 8006c08:	e7ef      	b.n	8006bea <__ieee754_sqrt+0x136>
 8006c0a:	4680      	mov	r8, r0
 8006c0c:	e7bd      	b.n	8006b8a <__ieee754_sqrt+0xd6>
 8006c0e:	bf00      	nop
 8006c10:	7ff00000 	.word	0x7ff00000

08006c14 <abort>:
 8006c14:	2006      	movs	r0, #6
 8006c16:	b508      	push	{r3, lr}
 8006c18:	f000 f982 	bl	8006f20 <raise>
 8006c1c:	2001      	movs	r0, #1
 8006c1e:	f7fb f9a4 	bl	8001f6a <_exit>
	...

08006c24 <__errno>:
 8006c24:	4b01      	ldr	r3, [pc, #4]	; (8006c2c <__errno+0x8>)
 8006c26:	6818      	ldr	r0, [r3, #0]
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	200000a4 	.word	0x200000a4

08006c30 <__libc_init_array>:
 8006c30:	b570      	push	{r4, r5, r6, lr}
 8006c32:	2600      	movs	r6, #0
 8006c34:	4d0c      	ldr	r5, [pc, #48]	; (8006c68 <__libc_init_array+0x38>)
 8006c36:	4c0d      	ldr	r4, [pc, #52]	; (8006c6c <__libc_init_array+0x3c>)
 8006c38:	1b64      	subs	r4, r4, r5
 8006c3a:	10a4      	asrs	r4, r4, #2
 8006c3c:	42a6      	cmp	r6, r4
 8006c3e:	d109      	bne.n	8006c54 <__libc_init_array+0x24>
 8006c40:	f000 fcf0 	bl	8007624 <_init>
 8006c44:	2600      	movs	r6, #0
 8006c46:	4d0a      	ldr	r5, [pc, #40]	; (8006c70 <__libc_init_array+0x40>)
 8006c48:	4c0a      	ldr	r4, [pc, #40]	; (8006c74 <__libc_init_array+0x44>)
 8006c4a:	1b64      	subs	r4, r4, r5
 8006c4c:	10a4      	asrs	r4, r4, #2
 8006c4e:	42a6      	cmp	r6, r4
 8006c50:	d105      	bne.n	8006c5e <__libc_init_array+0x2e>
 8006c52:	bd70      	pop	{r4, r5, r6, pc}
 8006c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c58:	4798      	blx	r3
 8006c5a:	3601      	adds	r6, #1
 8006c5c:	e7ee      	b.n	8006c3c <__libc_init_array+0xc>
 8006c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c62:	4798      	blx	r3
 8006c64:	3601      	adds	r6, #1
 8006c66:	e7f2      	b.n	8006c4e <__libc_init_array+0x1e>
 8006c68:	08007e8c 	.word	0x08007e8c
 8006c6c:	08007e8c 	.word	0x08007e8c
 8006c70:	08007e8c 	.word	0x08007e8c
 8006c74:	08007e94 	.word	0x08007e94

08006c78 <malloc>:
 8006c78:	4b02      	ldr	r3, [pc, #8]	; (8006c84 <malloc+0xc>)
 8006c7a:	4601      	mov	r1, r0
 8006c7c:	6818      	ldr	r0, [r3, #0]
 8006c7e:	f000 b8a3 	b.w	8006dc8 <_malloc_r>
 8006c82:	bf00      	nop
 8006c84:	200000a4 	.word	0x200000a4

08006c88 <free>:
 8006c88:	4b02      	ldr	r3, [pc, #8]	; (8006c94 <free+0xc>)
 8006c8a:	4601      	mov	r1, r0
 8006c8c:	6818      	ldr	r0, [r3, #0]
 8006c8e:	f000 b833 	b.w	8006cf8 <_free_r>
 8006c92:	bf00      	nop
 8006c94:	200000a4 	.word	0x200000a4

08006c98 <memcpy>:
 8006c98:	440a      	add	r2, r1
 8006c9a:	4291      	cmp	r1, r2
 8006c9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ca0:	d100      	bne.n	8006ca4 <memcpy+0xc>
 8006ca2:	4770      	bx	lr
 8006ca4:	b510      	push	{r4, lr}
 8006ca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006caa:	4291      	cmp	r1, r2
 8006cac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cb0:	d1f9      	bne.n	8006ca6 <memcpy+0xe>
 8006cb2:	bd10      	pop	{r4, pc}

08006cb4 <memmove>:
 8006cb4:	4288      	cmp	r0, r1
 8006cb6:	b510      	push	{r4, lr}
 8006cb8:	eb01 0402 	add.w	r4, r1, r2
 8006cbc:	d902      	bls.n	8006cc4 <memmove+0x10>
 8006cbe:	4284      	cmp	r4, r0
 8006cc0:	4623      	mov	r3, r4
 8006cc2:	d807      	bhi.n	8006cd4 <memmove+0x20>
 8006cc4:	1e43      	subs	r3, r0, #1
 8006cc6:	42a1      	cmp	r1, r4
 8006cc8:	d008      	beq.n	8006cdc <memmove+0x28>
 8006cca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006cd2:	e7f8      	b.n	8006cc6 <memmove+0x12>
 8006cd4:	4601      	mov	r1, r0
 8006cd6:	4402      	add	r2, r0
 8006cd8:	428a      	cmp	r2, r1
 8006cda:	d100      	bne.n	8006cde <memmove+0x2a>
 8006cdc:	bd10      	pop	{r4, pc}
 8006cde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ce2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ce6:	e7f7      	b.n	8006cd8 <memmove+0x24>

08006ce8 <memset>:
 8006ce8:	4603      	mov	r3, r0
 8006cea:	4402      	add	r2, r0
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d100      	bne.n	8006cf2 <memset+0xa>
 8006cf0:	4770      	bx	lr
 8006cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8006cf6:	e7f9      	b.n	8006cec <memset+0x4>

08006cf8 <_free_r>:
 8006cf8:	b538      	push	{r3, r4, r5, lr}
 8006cfa:	4605      	mov	r5, r0
 8006cfc:	2900      	cmp	r1, #0
 8006cfe:	d040      	beq.n	8006d82 <_free_r+0x8a>
 8006d00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d04:	1f0c      	subs	r4, r1, #4
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	bfb8      	it	lt
 8006d0a:	18e4      	addlt	r4, r4, r3
 8006d0c:	f000 f944 	bl	8006f98 <__malloc_lock>
 8006d10:	4a1c      	ldr	r2, [pc, #112]	; (8006d84 <_free_r+0x8c>)
 8006d12:	6813      	ldr	r3, [r2, #0]
 8006d14:	b933      	cbnz	r3, 8006d24 <_free_r+0x2c>
 8006d16:	6063      	str	r3, [r4, #4]
 8006d18:	6014      	str	r4, [r2, #0]
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d20:	f000 b940 	b.w	8006fa4 <__malloc_unlock>
 8006d24:	42a3      	cmp	r3, r4
 8006d26:	d908      	bls.n	8006d3a <_free_r+0x42>
 8006d28:	6820      	ldr	r0, [r4, #0]
 8006d2a:	1821      	adds	r1, r4, r0
 8006d2c:	428b      	cmp	r3, r1
 8006d2e:	bf01      	itttt	eq
 8006d30:	6819      	ldreq	r1, [r3, #0]
 8006d32:	685b      	ldreq	r3, [r3, #4]
 8006d34:	1809      	addeq	r1, r1, r0
 8006d36:	6021      	streq	r1, [r4, #0]
 8006d38:	e7ed      	b.n	8006d16 <_free_r+0x1e>
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	b10b      	cbz	r3, 8006d44 <_free_r+0x4c>
 8006d40:	42a3      	cmp	r3, r4
 8006d42:	d9fa      	bls.n	8006d3a <_free_r+0x42>
 8006d44:	6811      	ldr	r1, [r2, #0]
 8006d46:	1850      	adds	r0, r2, r1
 8006d48:	42a0      	cmp	r0, r4
 8006d4a:	d10b      	bne.n	8006d64 <_free_r+0x6c>
 8006d4c:	6820      	ldr	r0, [r4, #0]
 8006d4e:	4401      	add	r1, r0
 8006d50:	1850      	adds	r0, r2, r1
 8006d52:	4283      	cmp	r3, r0
 8006d54:	6011      	str	r1, [r2, #0]
 8006d56:	d1e0      	bne.n	8006d1a <_free_r+0x22>
 8006d58:	6818      	ldr	r0, [r3, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	4401      	add	r1, r0
 8006d5e:	6011      	str	r1, [r2, #0]
 8006d60:	6053      	str	r3, [r2, #4]
 8006d62:	e7da      	b.n	8006d1a <_free_r+0x22>
 8006d64:	d902      	bls.n	8006d6c <_free_r+0x74>
 8006d66:	230c      	movs	r3, #12
 8006d68:	602b      	str	r3, [r5, #0]
 8006d6a:	e7d6      	b.n	8006d1a <_free_r+0x22>
 8006d6c:	6820      	ldr	r0, [r4, #0]
 8006d6e:	1821      	adds	r1, r4, r0
 8006d70:	428b      	cmp	r3, r1
 8006d72:	bf01      	itttt	eq
 8006d74:	6819      	ldreq	r1, [r3, #0]
 8006d76:	685b      	ldreq	r3, [r3, #4]
 8006d78:	1809      	addeq	r1, r1, r0
 8006d7a:	6021      	streq	r1, [r4, #0]
 8006d7c:	6063      	str	r3, [r4, #4]
 8006d7e:	6054      	str	r4, [r2, #4]
 8006d80:	e7cb      	b.n	8006d1a <_free_r+0x22>
 8006d82:	bd38      	pop	{r3, r4, r5, pc}
 8006d84:	20000798 	.word	0x20000798

08006d88 <sbrk_aligned>:
 8006d88:	b570      	push	{r4, r5, r6, lr}
 8006d8a:	4e0e      	ldr	r6, [pc, #56]	; (8006dc4 <sbrk_aligned+0x3c>)
 8006d8c:	460c      	mov	r4, r1
 8006d8e:	6831      	ldr	r1, [r6, #0]
 8006d90:	4605      	mov	r5, r0
 8006d92:	b911      	cbnz	r1, 8006d9a <sbrk_aligned+0x12>
 8006d94:	f000 f88c 	bl	8006eb0 <_sbrk_r>
 8006d98:	6030      	str	r0, [r6, #0]
 8006d9a:	4621      	mov	r1, r4
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	f000 f887 	bl	8006eb0 <_sbrk_r>
 8006da2:	1c43      	adds	r3, r0, #1
 8006da4:	d00a      	beq.n	8006dbc <sbrk_aligned+0x34>
 8006da6:	1cc4      	adds	r4, r0, #3
 8006da8:	f024 0403 	bic.w	r4, r4, #3
 8006dac:	42a0      	cmp	r0, r4
 8006dae:	d007      	beq.n	8006dc0 <sbrk_aligned+0x38>
 8006db0:	1a21      	subs	r1, r4, r0
 8006db2:	4628      	mov	r0, r5
 8006db4:	f000 f87c 	bl	8006eb0 <_sbrk_r>
 8006db8:	3001      	adds	r0, #1
 8006dba:	d101      	bne.n	8006dc0 <sbrk_aligned+0x38>
 8006dbc:	f04f 34ff 	mov.w	r4, #4294967295
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	bd70      	pop	{r4, r5, r6, pc}
 8006dc4:	2000079c 	.word	0x2000079c

08006dc8 <_malloc_r>:
 8006dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dcc:	1ccd      	adds	r5, r1, #3
 8006dce:	f025 0503 	bic.w	r5, r5, #3
 8006dd2:	3508      	adds	r5, #8
 8006dd4:	2d0c      	cmp	r5, #12
 8006dd6:	bf38      	it	cc
 8006dd8:	250c      	movcc	r5, #12
 8006dda:	2d00      	cmp	r5, #0
 8006ddc:	4607      	mov	r7, r0
 8006dde:	db01      	blt.n	8006de4 <_malloc_r+0x1c>
 8006de0:	42a9      	cmp	r1, r5
 8006de2:	d905      	bls.n	8006df0 <_malloc_r+0x28>
 8006de4:	230c      	movs	r3, #12
 8006de6:	2600      	movs	r6, #0
 8006de8:	603b      	str	r3, [r7, #0]
 8006dea:	4630      	mov	r0, r6
 8006dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006df0:	4e2e      	ldr	r6, [pc, #184]	; (8006eac <_malloc_r+0xe4>)
 8006df2:	f000 f8d1 	bl	8006f98 <__malloc_lock>
 8006df6:	6833      	ldr	r3, [r6, #0]
 8006df8:	461c      	mov	r4, r3
 8006dfa:	bb34      	cbnz	r4, 8006e4a <_malloc_r+0x82>
 8006dfc:	4629      	mov	r1, r5
 8006dfe:	4638      	mov	r0, r7
 8006e00:	f7ff ffc2 	bl	8006d88 <sbrk_aligned>
 8006e04:	1c43      	adds	r3, r0, #1
 8006e06:	4604      	mov	r4, r0
 8006e08:	d14d      	bne.n	8006ea6 <_malloc_r+0xde>
 8006e0a:	6834      	ldr	r4, [r6, #0]
 8006e0c:	4626      	mov	r6, r4
 8006e0e:	2e00      	cmp	r6, #0
 8006e10:	d140      	bne.n	8006e94 <_malloc_r+0xcc>
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	4631      	mov	r1, r6
 8006e16:	4638      	mov	r0, r7
 8006e18:	eb04 0803 	add.w	r8, r4, r3
 8006e1c:	f000 f848 	bl	8006eb0 <_sbrk_r>
 8006e20:	4580      	cmp	r8, r0
 8006e22:	d13a      	bne.n	8006e9a <_malloc_r+0xd2>
 8006e24:	6821      	ldr	r1, [r4, #0]
 8006e26:	3503      	adds	r5, #3
 8006e28:	1a6d      	subs	r5, r5, r1
 8006e2a:	f025 0503 	bic.w	r5, r5, #3
 8006e2e:	3508      	adds	r5, #8
 8006e30:	2d0c      	cmp	r5, #12
 8006e32:	bf38      	it	cc
 8006e34:	250c      	movcc	r5, #12
 8006e36:	4638      	mov	r0, r7
 8006e38:	4629      	mov	r1, r5
 8006e3a:	f7ff ffa5 	bl	8006d88 <sbrk_aligned>
 8006e3e:	3001      	adds	r0, #1
 8006e40:	d02b      	beq.n	8006e9a <_malloc_r+0xd2>
 8006e42:	6823      	ldr	r3, [r4, #0]
 8006e44:	442b      	add	r3, r5
 8006e46:	6023      	str	r3, [r4, #0]
 8006e48:	e00e      	b.n	8006e68 <_malloc_r+0xa0>
 8006e4a:	6822      	ldr	r2, [r4, #0]
 8006e4c:	1b52      	subs	r2, r2, r5
 8006e4e:	d41e      	bmi.n	8006e8e <_malloc_r+0xc6>
 8006e50:	2a0b      	cmp	r2, #11
 8006e52:	d916      	bls.n	8006e82 <_malloc_r+0xba>
 8006e54:	1961      	adds	r1, r4, r5
 8006e56:	42a3      	cmp	r3, r4
 8006e58:	6025      	str	r5, [r4, #0]
 8006e5a:	bf18      	it	ne
 8006e5c:	6059      	strne	r1, [r3, #4]
 8006e5e:	6863      	ldr	r3, [r4, #4]
 8006e60:	bf08      	it	eq
 8006e62:	6031      	streq	r1, [r6, #0]
 8006e64:	5162      	str	r2, [r4, r5]
 8006e66:	604b      	str	r3, [r1, #4]
 8006e68:	4638      	mov	r0, r7
 8006e6a:	f104 060b 	add.w	r6, r4, #11
 8006e6e:	f000 f899 	bl	8006fa4 <__malloc_unlock>
 8006e72:	f026 0607 	bic.w	r6, r6, #7
 8006e76:	1d23      	adds	r3, r4, #4
 8006e78:	1af2      	subs	r2, r6, r3
 8006e7a:	d0b6      	beq.n	8006dea <_malloc_r+0x22>
 8006e7c:	1b9b      	subs	r3, r3, r6
 8006e7e:	50a3      	str	r3, [r4, r2]
 8006e80:	e7b3      	b.n	8006dea <_malloc_r+0x22>
 8006e82:	6862      	ldr	r2, [r4, #4]
 8006e84:	42a3      	cmp	r3, r4
 8006e86:	bf0c      	ite	eq
 8006e88:	6032      	streq	r2, [r6, #0]
 8006e8a:	605a      	strne	r2, [r3, #4]
 8006e8c:	e7ec      	b.n	8006e68 <_malloc_r+0xa0>
 8006e8e:	4623      	mov	r3, r4
 8006e90:	6864      	ldr	r4, [r4, #4]
 8006e92:	e7b2      	b.n	8006dfa <_malloc_r+0x32>
 8006e94:	4634      	mov	r4, r6
 8006e96:	6876      	ldr	r6, [r6, #4]
 8006e98:	e7b9      	b.n	8006e0e <_malloc_r+0x46>
 8006e9a:	230c      	movs	r3, #12
 8006e9c:	4638      	mov	r0, r7
 8006e9e:	603b      	str	r3, [r7, #0]
 8006ea0:	f000 f880 	bl	8006fa4 <__malloc_unlock>
 8006ea4:	e7a1      	b.n	8006dea <_malloc_r+0x22>
 8006ea6:	6025      	str	r5, [r4, #0]
 8006ea8:	e7de      	b.n	8006e68 <_malloc_r+0xa0>
 8006eaa:	bf00      	nop
 8006eac:	20000798 	.word	0x20000798

08006eb0 <_sbrk_r>:
 8006eb0:	b538      	push	{r3, r4, r5, lr}
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	4d05      	ldr	r5, [pc, #20]	; (8006ecc <_sbrk_r+0x1c>)
 8006eb6:	4604      	mov	r4, r0
 8006eb8:	4608      	mov	r0, r1
 8006eba:	602b      	str	r3, [r5, #0]
 8006ebc:	f7fb f860 	bl	8001f80 <_sbrk>
 8006ec0:	1c43      	adds	r3, r0, #1
 8006ec2:	d102      	bne.n	8006eca <_sbrk_r+0x1a>
 8006ec4:	682b      	ldr	r3, [r5, #0]
 8006ec6:	b103      	cbz	r3, 8006eca <_sbrk_r+0x1a>
 8006ec8:	6023      	str	r3, [r4, #0]
 8006eca:	bd38      	pop	{r3, r4, r5, pc}
 8006ecc:	200007a0 	.word	0x200007a0

08006ed0 <_raise_r>:
 8006ed0:	291f      	cmp	r1, #31
 8006ed2:	b538      	push	{r3, r4, r5, lr}
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	460d      	mov	r5, r1
 8006ed8:	d904      	bls.n	8006ee4 <_raise_r+0x14>
 8006eda:	2316      	movs	r3, #22
 8006edc:	6003      	str	r3, [r0, #0]
 8006ede:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee2:	bd38      	pop	{r3, r4, r5, pc}
 8006ee4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006ee6:	b112      	cbz	r2, 8006eee <_raise_r+0x1e>
 8006ee8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006eec:	b94b      	cbnz	r3, 8006f02 <_raise_r+0x32>
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f000 f830 	bl	8006f54 <_getpid_r>
 8006ef4:	462a      	mov	r2, r5
 8006ef6:	4601      	mov	r1, r0
 8006ef8:	4620      	mov	r0, r4
 8006efa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006efe:	f000 b817 	b.w	8006f30 <_kill_r>
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d00a      	beq.n	8006f1c <_raise_r+0x4c>
 8006f06:	1c59      	adds	r1, r3, #1
 8006f08:	d103      	bne.n	8006f12 <_raise_r+0x42>
 8006f0a:	2316      	movs	r3, #22
 8006f0c:	6003      	str	r3, [r0, #0]
 8006f0e:	2001      	movs	r0, #1
 8006f10:	e7e7      	b.n	8006ee2 <_raise_r+0x12>
 8006f12:	2400      	movs	r4, #0
 8006f14:	4628      	mov	r0, r5
 8006f16:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f1a:	4798      	blx	r3
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	e7e0      	b.n	8006ee2 <_raise_r+0x12>

08006f20 <raise>:
 8006f20:	4b02      	ldr	r3, [pc, #8]	; (8006f2c <raise+0xc>)
 8006f22:	4601      	mov	r1, r0
 8006f24:	6818      	ldr	r0, [r3, #0]
 8006f26:	f7ff bfd3 	b.w	8006ed0 <_raise_r>
 8006f2a:	bf00      	nop
 8006f2c:	200000a4 	.word	0x200000a4

08006f30 <_kill_r>:
 8006f30:	b538      	push	{r3, r4, r5, lr}
 8006f32:	2300      	movs	r3, #0
 8006f34:	4d06      	ldr	r5, [pc, #24]	; (8006f50 <_kill_r+0x20>)
 8006f36:	4604      	mov	r4, r0
 8006f38:	4608      	mov	r0, r1
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	602b      	str	r3, [r5, #0]
 8006f3e:	f7fb f804 	bl	8001f4a <_kill>
 8006f42:	1c43      	adds	r3, r0, #1
 8006f44:	d102      	bne.n	8006f4c <_kill_r+0x1c>
 8006f46:	682b      	ldr	r3, [r5, #0]
 8006f48:	b103      	cbz	r3, 8006f4c <_kill_r+0x1c>
 8006f4a:	6023      	str	r3, [r4, #0]
 8006f4c:	bd38      	pop	{r3, r4, r5, pc}
 8006f4e:	bf00      	nop
 8006f50:	200007a0 	.word	0x200007a0

08006f54 <_getpid_r>:
 8006f54:	f7fa bff2 	b.w	8001f3c <_getpid>

08006f58 <siprintf>:
 8006f58:	b40e      	push	{r1, r2, r3}
 8006f5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f5e:	b500      	push	{lr}
 8006f60:	b09c      	sub	sp, #112	; 0x70
 8006f62:	ab1d      	add	r3, sp, #116	; 0x74
 8006f64:	9002      	str	r0, [sp, #8]
 8006f66:	9006      	str	r0, [sp, #24]
 8006f68:	9107      	str	r1, [sp, #28]
 8006f6a:	9104      	str	r1, [sp, #16]
 8006f6c:	4808      	ldr	r0, [pc, #32]	; (8006f90 <siprintf+0x38>)
 8006f6e:	4909      	ldr	r1, [pc, #36]	; (8006f94 <siprintf+0x3c>)
 8006f70:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f74:	9105      	str	r1, [sp, #20]
 8006f76:	6800      	ldr	r0, [r0, #0]
 8006f78:	a902      	add	r1, sp, #8
 8006f7a:	9301      	str	r3, [sp, #4]
 8006f7c:	f000 f874 	bl	8007068 <_svfiprintf_r>
 8006f80:	2200      	movs	r2, #0
 8006f82:	9b02      	ldr	r3, [sp, #8]
 8006f84:	701a      	strb	r2, [r3, #0]
 8006f86:	b01c      	add	sp, #112	; 0x70
 8006f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f8c:	b003      	add	sp, #12
 8006f8e:	4770      	bx	lr
 8006f90:	200000a4 	.word	0x200000a4
 8006f94:	ffff0208 	.word	0xffff0208

08006f98 <__malloc_lock>:
 8006f98:	4801      	ldr	r0, [pc, #4]	; (8006fa0 <__malloc_lock+0x8>)
 8006f9a:	f000 bafb 	b.w	8007594 <__retarget_lock_acquire_recursive>
 8006f9e:	bf00      	nop
 8006fa0:	200007a4 	.word	0x200007a4

08006fa4 <__malloc_unlock>:
 8006fa4:	4801      	ldr	r0, [pc, #4]	; (8006fac <__malloc_unlock+0x8>)
 8006fa6:	f000 baf6 	b.w	8007596 <__retarget_lock_release_recursive>
 8006faa:	bf00      	nop
 8006fac:	200007a4 	.word	0x200007a4

08006fb0 <__ssputs_r>:
 8006fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb4:	688e      	ldr	r6, [r1, #8]
 8006fb6:	4682      	mov	sl, r0
 8006fb8:	429e      	cmp	r6, r3
 8006fba:	460c      	mov	r4, r1
 8006fbc:	4690      	mov	r8, r2
 8006fbe:	461f      	mov	r7, r3
 8006fc0:	d838      	bhi.n	8007034 <__ssputs_r+0x84>
 8006fc2:	898a      	ldrh	r2, [r1, #12]
 8006fc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006fc8:	d032      	beq.n	8007030 <__ssputs_r+0x80>
 8006fca:	6825      	ldr	r5, [r4, #0]
 8006fcc:	6909      	ldr	r1, [r1, #16]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	eba5 0901 	sub.w	r9, r5, r1
 8006fd4:	6965      	ldr	r5, [r4, #20]
 8006fd6:	444b      	add	r3, r9
 8006fd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fe0:	106d      	asrs	r5, r5, #1
 8006fe2:	429d      	cmp	r5, r3
 8006fe4:	bf38      	it	cc
 8006fe6:	461d      	movcc	r5, r3
 8006fe8:	0553      	lsls	r3, r2, #21
 8006fea:	d531      	bpl.n	8007050 <__ssputs_r+0xa0>
 8006fec:	4629      	mov	r1, r5
 8006fee:	f7ff feeb 	bl	8006dc8 <_malloc_r>
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	b950      	cbnz	r0, 800700c <__ssputs_r+0x5c>
 8006ff6:	230c      	movs	r3, #12
 8006ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ffc:	f8ca 3000 	str.w	r3, [sl]
 8007000:	89a3      	ldrh	r3, [r4, #12]
 8007002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007006:	81a3      	strh	r3, [r4, #12]
 8007008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800700c:	464a      	mov	r2, r9
 800700e:	6921      	ldr	r1, [r4, #16]
 8007010:	f7ff fe42 	bl	8006c98 <memcpy>
 8007014:	89a3      	ldrh	r3, [r4, #12]
 8007016:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800701a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800701e:	81a3      	strh	r3, [r4, #12]
 8007020:	6126      	str	r6, [r4, #16]
 8007022:	444e      	add	r6, r9
 8007024:	6026      	str	r6, [r4, #0]
 8007026:	463e      	mov	r6, r7
 8007028:	6165      	str	r5, [r4, #20]
 800702a:	eba5 0509 	sub.w	r5, r5, r9
 800702e:	60a5      	str	r5, [r4, #8]
 8007030:	42be      	cmp	r6, r7
 8007032:	d900      	bls.n	8007036 <__ssputs_r+0x86>
 8007034:	463e      	mov	r6, r7
 8007036:	4632      	mov	r2, r6
 8007038:	4641      	mov	r1, r8
 800703a:	6820      	ldr	r0, [r4, #0]
 800703c:	f7ff fe3a 	bl	8006cb4 <memmove>
 8007040:	68a3      	ldr	r3, [r4, #8]
 8007042:	2000      	movs	r0, #0
 8007044:	1b9b      	subs	r3, r3, r6
 8007046:	60a3      	str	r3, [r4, #8]
 8007048:	6823      	ldr	r3, [r4, #0]
 800704a:	4433      	add	r3, r6
 800704c:	6023      	str	r3, [r4, #0]
 800704e:	e7db      	b.n	8007008 <__ssputs_r+0x58>
 8007050:	462a      	mov	r2, r5
 8007052:	f000 faaf 	bl	80075b4 <_realloc_r>
 8007056:	4606      	mov	r6, r0
 8007058:	2800      	cmp	r0, #0
 800705a:	d1e1      	bne.n	8007020 <__ssputs_r+0x70>
 800705c:	4650      	mov	r0, sl
 800705e:	6921      	ldr	r1, [r4, #16]
 8007060:	f7ff fe4a 	bl	8006cf8 <_free_r>
 8007064:	e7c7      	b.n	8006ff6 <__ssputs_r+0x46>
	...

08007068 <_svfiprintf_r>:
 8007068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800706c:	4698      	mov	r8, r3
 800706e:	898b      	ldrh	r3, [r1, #12]
 8007070:	4607      	mov	r7, r0
 8007072:	061b      	lsls	r3, r3, #24
 8007074:	460d      	mov	r5, r1
 8007076:	4614      	mov	r4, r2
 8007078:	b09d      	sub	sp, #116	; 0x74
 800707a:	d50e      	bpl.n	800709a <_svfiprintf_r+0x32>
 800707c:	690b      	ldr	r3, [r1, #16]
 800707e:	b963      	cbnz	r3, 800709a <_svfiprintf_r+0x32>
 8007080:	2140      	movs	r1, #64	; 0x40
 8007082:	f7ff fea1 	bl	8006dc8 <_malloc_r>
 8007086:	6028      	str	r0, [r5, #0]
 8007088:	6128      	str	r0, [r5, #16]
 800708a:	b920      	cbnz	r0, 8007096 <_svfiprintf_r+0x2e>
 800708c:	230c      	movs	r3, #12
 800708e:	603b      	str	r3, [r7, #0]
 8007090:	f04f 30ff 	mov.w	r0, #4294967295
 8007094:	e0d1      	b.n	800723a <_svfiprintf_r+0x1d2>
 8007096:	2340      	movs	r3, #64	; 0x40
 8007098:	616b      	str	r3, [r5, #20]
 800709a:	2300      	movs	r3, #0
 800709c:	9309      	str	r3, [sp, #36]	; 0x24
 800709e:	2320      	movs	r3, #32
 80070a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070a4:	2330      	movs	r3, #48	; 0x30
 80070a6:	f04f 0901 	mov.w	r9, #1
 80070aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80070ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007254 <_svfiprintf_r+0x1ec>
 80070b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070b6:	4623      	mov	r3, r4
 80070b8:	469a      	mov	sl, r3
 80070ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070be:	b10a      	cbz	r2, 80070c4 <_svfiprintf_r+0x5c>
 80070c0:	2a25      	cmp	r2, #37	; 0x25
 80070c2:	d1f9      	bne.n	80070b8 <_svfiprintf_r+0x50>
 80070c4:	ebba 0b04 	subs.w	fp, sl, r4
 80070c8:	d00b      	beq.n	80070e2 <_svfiprintf_r+0x7a>
 80070ca:	465b      	mov	r3, fp
 80070cc:	4622      	mov	r2, r4
 80070ce:	4629      	mov	r1, r5
 80070d0:	4638      	mov	r0, r7
 80070d2:	f7ff ff6d 	bl	8006fb0 <__ssputs_r>
 80070d6:	3001      	adds	r0, #1
 80070d8:	f000 80aa 	beq.w	8007230 <_svfiprintf_r+0x1c8>
 80070dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070de:	445a      	add	r2, fp
 80070e0:	9209      	str	r2, [sp, #36]	; 0x24
 80070e2:	f89a 3000 	ldrb.w	r3, [sl]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f000 80a2 	beq.w	8007230 <_svfiprintf_r+0x1c8>
 80070ec:	2300      	movs	r3, #0
 80070ee:	f04f 32ff 	mov.w	r2, #4294967295
 80070f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070f6:	f10a 0a01 	add.w	sl, sl, #1
 80070fa:	9304      	str	r3, [sp, #16]
 80070fc:	9307      	str	r3, [sp, #28]
 80070fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007102:	931a      	str	r3, [sp, #104]	; 0x68
 8007104:	4654      	mov	r4, sl
 8007106:	2205      	movs	r2, #5
 8007108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800710c:	4851      	ldr	r0, [pc, #324]	; (8007254 <_svfiprintf_r+0x1ec>)
 800710e:	f000 fa43 	bl	8007598 <memchr>
 8007112:	9a04      	ldr	r2, [sp, #16]
 8007114:	b9d8      	cbnz	r0, 800714e <_svfiprintf_r+0xe6>
 8007116:	06d0      	lsls	r0, r2, #27
 8007118:	bf44      	itt	mi
 800711a:	2320      	movmi	r3, #32
 800711c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007120:	0711      	lsls	r1, r2, #28
 8007122:	bf44      	itt	mi
 8007124:	232b      	movmi	r3, #43	; 0x2b
 8007126:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800712a:	f89a 3000 	ldrb.w	r3, [sl]
 800712e:	2b2a      	cmp	r3, #42	; 0x2a
 8007130:	d015      	beq.n	800715e <_svfiprintf_r+0xf6>
 8007132:	4654      	mov	r4, sl
 8007134:	2000      	movs	r0, #0
 8007136:	f04f 0c0a 	mov.w	ip, #10
 800713a:	9a07      	ldr	r2, [sp, #28]
 800713c:	4621      	mov	r1, r4
 800713e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007142:	3b30      	subs	r3, #48	; 0x30
 8007144:	2b09      	cmp	r3, #9
 8007146:	d94e      	bls.n	80071e6 <_svfiprintf_r+0x17e>
 8007148:	b1b0      	cbz	r0, 8007178 <_svfiprintf_r+0x110>
 800714a:	9207      	str	r2, [sp, #28]
 800714c:	e014      	b.n	8007178 <_svfiprintf_r+0x110>
 800714e:	eba0 0308 	sub.w	r3, r0, r8
 8007152:	fa09 f303 	lsl.w	r3, r9, r3
 8007156:	4313      	orrs	r3, r2
 8007158:	46a2      	mov	sl, r4
 800715a:	9304      	str	r3, [sp, #16]
 800715c:	e7d2      	b.n	8007104 <_svfiprintf_r+0x9c>
 800715e:	9b03      	ldr	r3, [sp, #12]
 8007160:	1d19      	adds	r1, r3, #4
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	9103      	str	r1, [sp, #12]
 8007166:	2b00      	cmp	r3, #0
 8007168:	bfbb      	ittet	lt
 800716a:	425b      	neglt	r3, r3
 800716c:	f042 0202 	orrlt.w	r2, r2, #2
 8007170:	9307      	strge	r3, [sp, #28]
 8007172:	9307      	strlt	r3, [sp, #28]
 8007174:	bfb8      	it	lt
 8007176:	9204      	strlt	r2, [sp, #16]
 8007178:	7823      	ldrb	r3, [r4, #0]
 800717a:	2b2e      	cmp	r3, #46	; 0x2e
 800717c:	d10c      	bne.n	8007198 <_svfiprintf_r+0x130>
 800717e:	7863      	ldrb	r3, [r4, #1]
 8007180:	2b2a      	cmp	r3, #42	; 0x2a
 8007182:	d135      	bne.n	80071f0 <_svfiprintf_r+0x188>
 8007184:	9b03      	ldr	r3, [sp, #12]
 8007186:	3402      	adds	r4, #2
 8007188:	1d1a      	adds	r2, r3, #4
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	9203      	str	r2, [sp, #12]
 800718e:	2b00      	cmp	r3, #0
 8007190:	bfb8      	it	lt
 8007192:	f04f 33ff 	movlt.w	r3, #4294967295
 8007196:	9305      	str	r3, [sp, #20]
 8007198:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007258 <_svfiprintf_r+0x1f0>
 800719c:	2203      	movs	r2, #3
 800719e:	4650      	mov	r0, sl
 80071a0:	7821      	ldrb	r1, [r4, #0]
 80071a2:	f000 f9f9 	bl	8007598 <memchr>
 80071a6:	b140      	cbz	r0, 80071ba <_svfiprintf_r+0x152>
 80071a8:	2340      	movs	r3, #64	; 0x40
 80071aa:	eba0 000a 	sub.w	r0, r0, sl
 80071ae:	fa03 f000 	lsl.w	r0, r3, r0
 80071b2:	9b04      	ldr	r3, [sp, #16]
 80071b4:	3401      	adds	r4, #1
 80071b6:	4303      	orrs	r3, r0
 80071b8:	9304      	str	r3, [sp, #16]
 80071ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071be:	2206      	movs	r2, #6
 80071c0:	4826      	ldr	r0, [pc, #152]	; (800725c <_svfiprintf_r+0x1f4>)
 80071c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071c6:	f000 f9e7 	bl	8007598 <memchr>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	d038      	beq.n	8007240 <_svfiprintf_r+0x1d8>
 80071ce:	4b24      	ldr	r3, [pc, #144]	; (8007260 <_svfiprintf_r+0x1f8>)
 80071d0:	bb1b      	cbnz	r3, 800721a <_svfiprintf_r+0x1b2>
 80071d2:	9b03      	ldr	r3, [sp, #12]
 80071d4:	3307      	adds	r3, #7
 80071d6:	f023 0307 	bic.w	r3, r3, #7
 80071da:	3308      	adds	r3, #8
 80071dc:	9303      	str	r3, [sp, #12]
 80071de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071e0:	4433      	add	r3, r6
 80071e2:	9309      	str	r3, [sp, #36]	; 0x24
 80071e4:	e767      	b.n	80070b6 <_svfiprintf_r+0x4e>
 80071e6:	460c      	mov	r4, r1
 80071e8:	2001      	movs	r0, #1
 80071ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80071ee:	e7a5      	b.n	800713c <_svfiprintf_r+0xd4>
 80071f0:	2300      	movs	r3, #0
 80071f2:	f04f 0c0a 	mov.w	ip, #10
 80071f6:	4619      	mov	r1, r3
 80071f8:	3401      	adds	r4, #1
 80071fa:	9305      	str	r3, [sp, #20]
 80071fc:	4620      	mov	r0, r4
 80071fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007202:	3a30      	subs	r2, #48	; 0x30
 8007204:	2a09      	cmp	r2, #9
 8007206:	d903      	bls.n	8007210 <_svfiprintf_r+0x1a8>
 8007208:	2b00      	cmp	r3, #0
 800720a:	d0c5      	beq.n	8007198 <_svfiprintf_r+0x130>
 800720c:	9105      	str	r1, [sp, #20]
 800720e:	e7c3      	b.n	8007198 <_svfiprintf_r+0x130>
 8007210:	4604      	mov	r4, r0
 8007212:	2301      	movs	r3, #1
 8007214:	fb0c 2101 	mla	r1, ip, r1, r2
 8007218:	e7f0      	b.n	80071fc <_svfiprintf_r+0x194>
 800721a:	ab03      	add	r3, sp, #12
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	462a      	mov	r2, r5
 8007220:	4638      	mov	r0, r7
 8007222:	4b10      	ldr	r3, [pc, #64]	; (8007264 <_svfiprintf_r+0x1fc>)
 8007224:	a904      	add	r1, sp, #16
 8007226:	f3af 8000 	nop.w
 800722a:	1c42      	adds	r2, r0, #1
 800722c:	4606      	mov	r6, r0
 800722e:	d1d6      	bne.n	80071de <_svfiprintf_r+0x176>
 8007230:	89ab      	ldrh	r3, [r5, #12]
 8007232:	065b      	lsls	r3, r3, #25
 8007234:	f53f af2c 	bmi.w	8007090 <_svfiprintf_r+0x28>
 8007238:	9809      	ldr	r0, [sp, #36]	; 0x24
 800723a:	b01d      	add	sp, #116	; 0x74
 800723c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007240:	ab03      	add	r3, sp, #12
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	462a      	mov	r2, r5
 8007246:	4638      	mov	r0, r7
 8007248:	4b06      	ldr	r3, [pc, #24]	; (8007264 <_svfiprintf_r+0x1fc>)
 800724a:	a904      	add	r1, sp, #16
 800724c:	f000 f87c 	bl	8007348 <_printf_i>
 8007250:	e7eb      	b.n	800722a <_svfiprintf_r+0x1c2>
 8007252:	bf00      	nop
 8007254:	08007e58 	.word	0x08007e58
 8007258:	08007e5e 	.word	0x08007e5e
 800725c:	08007e62 	.word	0x08007e62
 8007260:	00000000 	.word	0x00000000
 8007264:	08006fb1 	.word	0x08006fb1

08007268 <_printf_common>:
 8007268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800726c:	4616      	mov	r6, r2
 800726e:	4699      	mov	r9, r3
 8007270:	688a      	ldr	r2, [r1, #8]
 8007272:	690b      	ldr	r3, [r1, #16]
 8007274:	4607      	mov	r7, r0
 8007276:	4293      	cmp	r3, r2
 8007278:	bfb8      	it	lt
 800727a:	4613      	movlt	r3, r2
 800727c:	6033      	str	r3, [r6, #0]
 800727e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007282:	460c      	mov	r4, r1
 8007284:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007288:	b10a      	cbz	r2, 800728e <_printf_common+0x26>
 800728a:	3301      	adds	r3, #1
 800728c:	6033      	str	r3, [r6, #0]
 800728e:	6823      	ldr	r3, [r4, #0]
 8007290:	0699      	lsls	r1, r3, #26
 8007292:	bf42      	ittt	mi
 8007294:	6833      	ldrmi	r3, [r6, #0]
 8007296:	3302      	addmi	r3, #2
 8007298:	6033      	strmi	r3, [r6, #0]
 800729a:	6825      	ldr	r5, [r4, #0]
 800729c:	f015 0506 	ands.w	r5, r5, #6
 80072a0:	d106      	bne.n	80072b0 <_printf_common+0x48>
 80072a2:	f104 0a19 	add.w	sl, r4, #25
 80072a6:	68e3      	ldr	r3, [r4, #12]
 80072a8:	6832      	ldr	r2, [r6, #0]
 80072aa:	1a9b      	subs	r3, r3, r2
 80072ac:	42ab      	cmp	r3, r5
 80072ae:	dc28      	bgt.n	8007302 <_printf_common+0x9a>
 80072b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072b4:	1e13      	subs	r3, r2, #0
 80072b6:	6822      	ldr	r2, [r4, #0]
 80072b8:	bf18      	it	ne
 80072ba:	2301      	movne	r3, #1
 80072bc:	0692      	lsls	r2, r2, #26
 80072be:	d42d      	bmi.n	800731c <_printf_common+0xb4>
 80072c0:	4649      	mov	r1, r9
 80072c2:	4638      	mov	r0, r7
 80072c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072c8:	47c0      	blx	r8
 80072ca:	3001      	adds	r0, #1
 80072cc:	d020      	beq.n	8007310 <_printf_common+0xa8>
 80072ce:	6823      	ldr	r3, [r4, #0]
 80072d0:	68e5      	ldr	r5, [r4, #12]
 80072d2:	f003 0306 	and.w	r3, r3, #6
 80072d6:	2b04      	cmp	r3, #4
 80072d8:	bf18      	it	ne
 80072da:	2500      	movne	r5, #0
 80072dc:	6832      	ldr	r2, [r6, #0]
 80072de:	f04f 0600 	mov.w	r6, #0
 80072e2:	68a3      	ldr	r3, [r4, #8]
 80072e4:	bf08      	it	eq
 80072e6:	1aad      	subeq	r5, r5, r2
 80072e8:	6922      	ldr	r2, [r4, #16]
 80072ea:	bf08      	it	eq
 80072ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072f0:	4293      	cmp	r3, r2
 80072f2:	bfc4      	itt	gt
 80072f4:	1a9b      	subgt	r3, r3, r2
 80072f6:	18ed      	addgt	r5, r5, r3
 80072f8:	341a      	adds	r4, #26
 80072fa:	42b5      	cmp	r5, r6
 80072fc:	d11a      	bne.n	8007334 <_printf_common+0xcc>
 80072fe:	2000      	movs	r0, #0
 8007300:	e008      	b.n	8007314 <_printf_common+0xac>
 8007302:	2301      	movs	r3, #1
 8007304:	4652      	mov	r2, sl
 8007306:	4649      	mov	r1, r9
 8007308:	4638      	mov	r0, r7
 800730a:	47c0      	blx	r8
 800730c:	3001      	adds	r0, #1
 800730e:	d103      	bne.n	8007318 <_printf_common+0xb0>
 8007310:	f04f 30ff 	mov.w	r0, #4294967295
 8007314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007318:	3501      	adds	r5, #1
 800731a:	e7c4      	b.n	80072a6 <_printf_common+0x3e>
 800731c:	2030      	movs	r0, #48	; 0x30
 800731e:	18e1      	adds	r1, r4, r3
 8007320:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007324:	1c5a      	adds	r2, r3, #1
 8007326:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800732a:	4422      	add	r2, r4
 800732c:	3302      	adds	r3, #2
 800732e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007332:	e7c5      	b.n	80072c0 <_printf_common+0x58>
 8007334:	2301      	movs	r3, #1
 8007336:	4622      	mov	r2, r4
 8007338:	4649      	mov	r1, r9
 800733a:	4638      	mov	r0, r7
 800733c:	47c0      	blx	r8
 800733e:	3001      	adds	r0, #1
 8007340:	d0e6      	beq.n	8007310 <_printf_common+0xa8>
 8007342:	3601      	adds	r6, #1
 8007344:	e7d9      	b.n	80072fa <_printf_common+0x92>
	...

08007348 <_printf_i>:
 8007348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800734c:	7e0f      	ldrb	r7, [r1, #24]
 800734e:	4691      	mov	r9, r2
 8007350:	2f78      	cmp	r7, #120	; 0x78
 8007352:	4680      	mov	r8, r0
 8007354:	460c      	mov	r4, r1
 8007356:	469a      	mov	sl, r3
 8007358:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800735a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800735e:	d807      	bhi.n	8007370 <_printf_i+0x28>
 8007360:	2f62      	cmp	r7, #98	; 0x62
 8007362:	d80a      	bhi.n	800737a <_printf_i+0x32>
 8007364:	2f00      	cmp	r7, #0
 8007366:	f000 80d9 	beq.w	800751c <_printf_i+0x1d4>
 800736a:	2f58      	cmp	r7, #88	; 0x58
 800736c:	f000 80a4 	beq.w	80074b8 <_printf_i+0x170>
 8007370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007374:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007378:	e03a      	b.n	80073f0 <_printf_i+0xa8>
 800737a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800737e:	2b15      	cmp	r3, #21
 8007380:	d8f6      	bhi.n	8007370 <_printf_i+0x28>
 8007382:	a101      	add	r1, pc, #4	; (adr r1, 8007388 <_printf_i+0x40>)
 8007384:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007388:	080073e1 	.word	0x080073e1
 800738c:	080073f5 	.word	0x080073f5
 8007390:	08007371 	.word	0x08007371
 8007394:	08007371 	.word	0x08007371
 8007398:	08007371 	.word	0x08007371
 800739c:	08007371 	.word	0x08007371
 80073a0:	080073f5 	.word	0x080073f5
 80073a4:	08007371 	.word	0x08007371
 80073a8:	08007371 	.word	0x08007371
 80073ac:	08007371 	.word	0x08007371
 80073b0:	08007371 	.word	0x08007371
 80073b4:	08007503 	.word	0x08007503
 80073b8:	08007425 	.word	0x08007425
 80073bc:	080074e5 	.word	0x080074e5
 80073c0:	08007371 	.word	0x08007371
 80073c4:	08007371 	.word	0x08007371
 80073c8:	08007525 	.word	0x08007525
 80073cc:	08007371 	.word	0x08007371
 80073d0:	08007425 	.word	0x08007425
 80073d4:	08007371 	.word	0x08007371
 80073d8:	08007371 	.word	0x08007371
 80073dc:	080074ed 	.word	0x080074ed
 80073e0:	682b      	ldr	r3, [r5, #0]
 80073e2:	1d1a      	adds	r2, r3, #4
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	602a      	str	r2, [r5, #0]
 80073e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073f0:	2301      	movs	r3, #1
 80073f2:	e0a4      	b.n	800753e <_printf_i+0x1f6>
 80073f4:	6820      	ldr	r0, [r4, #0]
 80073f6:	6829      	ldr	r1, [r5, #0]
 80073f8:	0606      	lsls	r6, r0, #24
 80073fa:	f101 0304 	add.w	r3, r1, #4
 80073fe:	d50a      	bpl.n	8007416 <_printf_i+0xce>
 8007400:	680e      	ldr	r6, [r1, #0]
 8007402:	602b      	str	r3, [r5, #0]
 8007404:	2e00      	cmp	r6, #0
 8007406:	da03      	bge.n	8007410 <_printf_i+0xc8>
 8007408:	232d      	movs	r3, #45	; 0x2d
 800740a:	4276      	negs	r6, r6
 800740c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007410:	230a      	movs	r3, #10
 8007412:	485e      	ldr	r0, [pc, #376]	; (800758c <_printf_i+0x244>)
 8007414:	e019      	b.n	800744a <_printf_i+0x102>
 8007416:	680e      	ldr	r6, [r1, #0]
 8007418:	f010 0f40 	tst.w	r0, #64	; 0x40
 800741c:	602b      	str	r3, [r5, #0]
 800741e:	bf18      	it	ne
 8007420:	b236      	sxthne	r6, r6
 8007422:	e7ef      	b.n	8007404 <_printf_i+0xbc>
 8007424:	682b      	ldr	r3, [r5, #0]
 8007426:	6820      	ldr	r0, [r4, #0]
 8007428:	1d19      	adds	r1, r3, #4
 800742a:	6029      	str	r1, [r5, #0]
 800742c:	0601      	lsls	r1, r0, #24
 800742e:	d501      	bpl.n	8007434 <_printf_i+0xec>
 8007430:	681e      	ldr	r6, [r3, #0]
 8007432:	e002      	b.n	800743a <_printf_i+0xf2>
 8007434:	0646      	lsls	r6, r0, #25
 8007436:	d5fb      	bpl.n	8007430 <_printf_i+0xe8>
 8007438:	881e      	ldrh	r6, [r3, #0]
 800743a:	2f6f      	cmp	r7, #111	; 0x6f
 800743c:	bf0c      	ite	eq
 800743e:	2308      	moveq	r3, #8
 8007440:	230a      	movne	r3, #10
 8007442:	4852      	ldr	r0, [pc, #328]	; (800758c <_printf_i+0x244>)
 8007444:	2100      	movs	r1, #0
 8007446:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800744a:	6865      	ldr	r5, [r4, #4]
 800744c:	2d00      	cmp	r5, #0
 800744e:	bfa8      	it	ge
 8007450:	6821      	ldrge	r1, [r4, #0]
 8007452:	60a5      	str	r5, [r4, #8]
 8007454:	bfa4      	itt	ge
 8007456:	f021 0104 	bicge.w	r1, r1, #4
 800745a:	6021      	strge	r1, [r4, #0]
 800745c:	b90e      	cbnz	r6, 8007462 <_printf_i+0x11a>
 800745e:	2d00      	cmp	r5, #0
 8007460:	d04d      	beq.n	80074fe <_printf_i+0x1b6>
 8007462:	4615      	mov	r5, r2
 8007464:	fbb6 f1f3 	udiv	r1, r6, r3
 8007468:	fb03 6711 	mls	r7, r3, r1, r6
 800746c:	5dc7      	ldrb	r7, [r0, r7]
 800746e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007472:	4637      	mov	r7, r6
 8007474:	42bb      	cmp	r3, r7
 8007476:	460e      	mov	r6, r1
 8007478:	d9f4      	bls.n	8007464 <_printf_i+0x11c>
 800747a:	2b08      	cmp	r3, #8
 800747c:	d10b      	bne.n	8007496 <_printf_i+0x14e>
 800747e:	6823      	ldr	r3, [r4, #0]
 8007480:	07de      	lsls	r6, r3, #31
 8007482:	d508      	bpl.n	8007496 <_printf_i+0x14e>
 8007484:	6923      	ldr	r3, [r4, #16]
 8007486:	6861      	ldr	r1, [r4, #4]
 8007488:	4299      	cmp	r1, r3
 800748a:	bfde      	ittt	le
 800748c:	2330      	movle	r3, #48	; 0x30
 800748e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007492:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007496:	1b52      	subs	r2, r2, r5
 8007498:	6122      	str	r2, [r4, #16]
 800749a:	464b      	mov	r3, r9
 800749c:	4621      	mov	r1, r4
 800749e:	4640      	mov	r0, r8
 80074a0:	f8cd a000 	str.w	sl, [sp]
 80074a4:	aa03      	add	r2, sp, #12
 80074a6:	f7ff fedf 	bl	8007268 <_printf_common>
 80074aa:	3001      	adds	r0, #1
 80074ac:	d14c      	bne.n	8007548 <_printf_i+0x200>
 80074ae:	f04f 30ff 	mov.w	r0, #4294967295
 80074b2:	b004      	add	sp, #16
 80074b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074b8:	4834      	ldr	r0, [pc, #208]	; (800758c <_printf_i+0x244>)
 80074ba:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80074be:	6829      	ldr	r1, [r5, #0]
 80074c0:	6823      	ldr	r3, [r4, #0]
 80074c2:	f851 6b04 	ldr.w	r6, [r1], #4
 80074c6:	6029      	str	r1, [r5, #0]
 80074c8:	061d      	lsls	r5, r3, #24
 80074ca:	d514      	bpl.n	80074f6 <_printf_i+0x1ae>
 80074cc:	07df      	lsls	r7, r3, #31
 80074ce:	bf44      	itt	mi
 80074d0:	f043 0320 	orrmi.w	r3, r3, #32
 80074d4:	6023      	strmi	r3, [r4, #0]
 80074d6:	b91e      	cbnz	r6, 80074e0 <_printf_i+0x198>
 80074d8:	6823      	ldr	r3, [r4, #0]
 80074da:	f023 0320 	bic.w	r3, r3, #32
 80074de:	6023      	str	r3, [r4, #0]
 80074e0:	2310      	movs	r3, #16
 80074e2:	e7af      	b.n	8007444 <_printf_i+0xfc>
 80074e4:	6823      	ldr	r3, [r4, #0]
 80074e6:	f043 0320 	orr.w	r3, r3, #32
 80074ea:	6023      	str	r3, [r4, #0]
 80074ec:	2378      	movs	r3, #120	; 0x78
 80074ee:	4828      	ldr	r0, [pc, #160]	; (8007590 <_printf_i+0x248>)
 80074f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074f4:	e7e3      	b.n	80074be <_printf_i+0x176>
 80074f6:	0659      	lsls	r1, r3, #25
 80074f8:	bf48      	it	mi
 80074fa:	b2b6      	uxthmi	r6, r6
 80074fc:	e7e6      	b.n	80074cc <_printf_i+0x184>
 80074fe:	4615      	mov	r5, r2
 8007500:	e7bb      	b.n	800747a <_printf_i+0x132>
 8007502:	682b      	ldr	r3, [r5, #0]
 8007504:	6826      	ldr	r6, [r4, #0]
 8007506:	1d18      	adds	r0, r3, #4
 8007508:	6961      	ldr	r1, [r4, #20]
 800750a:	6028      	str	r0, [r5, #0]
 800750c:	0635      	lsls	r5, r6, #24
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	d501      	bpl.n	8007516 <_printf_i+0x1ce>
 8007512:	6019      	str	r1, [r3, #0]
 8007514:	e002      	b.n	800751c <_printf_i+0x1d4>
 8007516:	0670      	lsls	r0, r6, #25
 8007518:	d5fb      	bpl.n	8007512 <_printf_i+0x1ca>
 800751a:	8019      	strh	r1, [r3, #0]
 800751c:	2300      	movs	r3, #0
 800751e:	4615      	mov	r5, r2
 8007520:	6123      	str	r3, [r4, #16]
 8007522:	e7ba      	b.n	800749a <_printf_i+0x152>
 8007524:	682b      	ldr	r3, [r5, #0]
 8007526:	2100      	movs	r1, #0
 8007528:	1d1a      	adds	r2, r3, #4
 800752a:	602a      	str	r2, [r5, #0]
 800752c:	681d      	ldr	r5, [r3, #0]
 800752e:	6862      	ldr	r2, [r4, #4]
 8007530:	4628      	mov	r0, r5
 8007532:	f000 f831 	bl	8007598 <memchr>
 8007536:	b108      	cbz	r0, 800753c <_printf_i+0x1f4>
 8007538:	1b40      	subs	r0, r0, r5
 800753a:	6060      	str	r0, [r4, #4]
 800753c:	6863      	ldr	r3, [r4, #4]
 800753e:	6123      	str	r3, [r4, #16]
 8007540:	2300      	movs	r3, #0
 8007542:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007546:	e7a8      	b.n	800749a <_printf_i+0x152>
 8007548:	462a      	mov	r2, r5
 800754a:	4649      	mov	r1, r9
 800754c:	4640      	mov	r0, r8
 800754e:	6923      	ldr	r3, [r4, #16]
 8007550:	47d0      	blx	sl
 8007552:	3001      	adds	r0, #1
 8007554:	d0ab      	beq.n	80074ae <_printf_i+0x166>
 8007556:	6823      	ldr	r3, [r4, #0]
 8007558:	079b      	lsls	r3, r3, #30
 800755a:	d413      	bmi.n	8007584 <_printf_i+0x23c>
 800755c:	68e0      	ldr	r0, [r4, #12]
 800755e:	9b03      	ldr	r3, [sp, #12]
 8007560:	4298      	cmp	r0, r3
 8007562:	bfb8      	it	lt
 8007564:	4618      	movlt	r0, r3
 8007566:	e7a4      	b.n	80074b2 <_printf_i+0x16a>
 8007568:	2301      	movs	r3, #1
 800756a:	4632      	mov	r2, r6
 800756c:	4649      	mov	r1, r9
 800756e:	4640      	mov	r0, r8
 8007570:	47d0      	blx	sl
 8007572:	3001      	adds	r0, #1
 8007574:	d09b      	beq.n	80074ae <_printf_i+0x166>
 8007576:	3501      	adds	r5, #1
 8007578:	68e3      	ldr	r3, [r4, #12]
 800757a:	9903      	ldr	r1, [sp, #12]
 800757c:	1a5b      	subs	r3, r3, r1
 800757e:	42ab      	cmp	r3, r5
 8007580:	dcf2      	bgt.n	8007568 <_printf_i+0x220>
 8007582:	e7eb      	b.n	800755c <_printf_i+0x214>
 8007584:	2500      	movs	r5, #0
 8007586:	f104 0619 	add.w	r6, r4, #25
 800758a:	e7f5      	b.n	8007578 <_printf_i+0x230>
 800758c:	08007e69 	.word	0x08007e69
 8007590:	08007e7a 	.word	0x08007e7a

08007594 <__retarget_lock_acquire_recursive>:
 8007594:	4770      	bx	lr

08007596 <__retarget_lock_release_recursive>:
 8007596:	4770      	bx	lr

08007598 <memchr>:
 8007598:	4603      	mov	r3, r0
 800759a:	b510      	push	{r4, lr}
 800759c:	b2c9      	uxtb	r1, r1
 800759e:	4402      	add	r2, r0
 80075a0:	4293      	cmp	r3, r2
 80075a2:	4618      	mov	r0, r3
 80075a4:	d101      	bne.n	80075aa <memchr+0x12>
 80075a6:	2000      	movs	r0, #0
 80075a8:	e003      	b.n	80075b2 <memchr+0x1a>
 80075aa:	7804      	ldrb	r4, [r0, #0]
 80075ac:	3301      	adds	r3, #1
 80075ae:	428c      	cmp	r4, r1
 80075b0:	d1f6      	bne.n	80075a0 <memchr+0x8>
 80075b2:	bd10      	pop	{r4, pc}

080075b4 <_realloc_r>:
 80075b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075b8:	4680      	mov	r8, r0
 80075ba:	4614      	mov	r4, r2
 80075bc:	460e      	mov	r6, r1
 80075be:	b921      	cbnz	r1, 80075ca <_realloc_r+0x16>
 80075c0:	4611      	mov	r1, r2
 80075c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075c6:	f7ff bbff 	b.w	8006dc8 <_malloc_r>
 80075ca:	b92a      	cbnz	r2, 80075d8 <_realloc_r+0x24>
 80075cc:	f7ff fb94 	bl	8006cf8 <_free_r>
 80075d0:	4625      	mov	r5, r4
 80075d2:	4628      	mov	r0, r5
 80075d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075d8:	f000 f81b 	bl	8007612 <_malloc_usable_size_r>
 80075dc:	4284      	cmp	r4, r0
 80075de:	4607      	mov	r7, r0
 80075e0:	d802      	bhi.n	80075e8 <_realloc_r+0x34>
 80075e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80075e6:	d812      	bhi.n	800760e <_realloc_r+0x5a>
 80075e8:	4621      	mov	r1, r4
 80075ea:	4640      	mov	r0, r8
 80075ec:	f7ff fbec 	bl	8006dc8 <_malloc_r>
 80075f0:	4605      	mov	r5, r0
 80075f2:	2800      	cmp	r0, #0
 80075f4:	d0ed      	beq.n	80075d2 <_realloc_r+0x1e>
 80075f6:	42bc      	cmp	r4, r7
 80075f8:	4622      	mov	r2, r4
 80075fa:	4631      	mov	r1, r6
 80075fc:	bf28      	it	cs
 80075fe:	463a      	movcs	r2, r7
 8007600:	f7ff fb4a 	bl	8006c98 <memcpy>
 8007604:	4631      	mov	r1, r6
 8007606:	4640      	mov	r0, r8
 8007608:	f7ff fb76 	bl	8006cf8 <_free_r>
 800760c:	e7e1      	b.n	80075d2 <_realloc_r+0x1e>
 800760e:	4635      	mov	r5, r6
 8007610:	e7df      	b.n	80075d2 <_realloc_r+0x1e>

08007612 <_malloc_usable_size_r>:
 8007612:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007616:	1f18      	subs	r0, r3, #4
 8007618:	2b00      	cmp	r3, #0
 800761a:	bfbc      	itt	lt
 800761c:	580b      	ldrlt	r3, [r1, r0]
 800761e:	18c0      	addlt	r0, r0, r3
 8007620:	4770      	bx	lr
	...

08007624 <_init>:
 8007624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007626:	bf00      	nop
 8007628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800762a:	bc08      	pop	{r3}
 800762c:	469e      	mov	lr, r3
 800762e:	4770      	bx	lr

08007630 <_fini>:
 8007630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007632:	bf00      	nop
 8007634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007636:	bc08      	pop	{r3}
 8007638:	469e      	mov	lr, r3
 800763a:	4770      	bx	lr
