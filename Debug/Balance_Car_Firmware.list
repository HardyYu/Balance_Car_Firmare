
Balance_Car_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007714  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000084c  08007828  08007828  00017828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008074  08008074  00020108  2**0
                  CONTENTS
  4 .ARM          00000000  08008074  08008074  00020108  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008074  08008074  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008074  08008074  00018074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800807c  0800807c  0001807c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08008084  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a0  20000108  0800818c  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a8  0800818c  000207a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b3b  00000000  00000000  00020131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036a7  00000000  00000000  00035c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  00039318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  0003a508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c9ee  00000000  00000000  0003b590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017205  00000000  00000000  00057f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091dc5  00000000  00000000  0006f183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00100f48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005414  00000000  00000000  00100f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000108 	.word	0x20000108
 800012c:	00000000 	.word	0x00000000
 8000130:	0800780c 	.word	0x0800780c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000010c 	.word	0x2000010c
 800014c:	0800780c 	.word	0x0800780c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_frsub>:
 8000a78:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a7c:	e002      	b.n	8000a84 <__addsf3>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_fsub>:
 8000a80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a84 <__addsf3>:
 8000a84:	0042      	lsls	r2, r0, #1
 8000a86:	bf1f      	itttt	ne
 8000a88:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a8c:	ea92 0f03 	teqne	r2, r3
 8000a90:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a94:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a98:	d06a      	beq.n	8000b70 <__addsf3+0xec>
 8000a9a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a9e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aa2:	bfc1      	itttt	gt
 8000aa4:	18d2      	addgt	r2, r2, r3
 8000aa6:	4041      	eorgt	r1, r0
 8000aa8:	4048      	eorgt	r0, r1
 8000aaa:	4041      	eorgt	r1, r0
 8000aac:	bfb8      	it	lt
 8000aae:	425b      	neglt	r3, r3
 8000ab0:	2b19      	cmp	r3, #25
 8000ab2:	bf88      	it	hi
 8000ab4:	4770      	bxhi	lr
 8000ab6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000abe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ac2:	bf18      	it	ne
 8000ac4:	4240      	negne	r0, r0
 8000ac6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ace:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4249      	negne	r1, r1
 8000ad6:	ea92 0f03 	teq	r2, r3
 8000ada:	d03f      	beq.n	8000b5c <__addsf3+0xd8>
 8000adc:	f1a2 0201 	sub.w	r2, r2, #1
 8000ae0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ae4:	eb10 000c 	adds.w	r0, r0, ip
 8000ae8:	f1c3 0320 	rsb	r3, r3, #32
 8000aec:	fa01 f103 	lsl.w	r1, r1, r3
 8000af0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000af4:	d502      	bpl.n	8000afc <__addsf3+0x78>
 8000af6:	4249      	negs	r1, r1
 8000af8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000afc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b00:	d313      	bcc.n	8000b2a <__addsf3+0xa6>
 8000b02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b06:	d306      	bcc.n	8000b16 <__addsf3+0x92>
 8000b08:	0840      	lsrs	r0, r0, #1
 8000b0a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b0e:	f102 0201 	add.w	r2, r2, #1
 8000b12:	2afe      	cmp	r2, #254	; 0xfe
 8000b14:	d251      	bcs.n	8000bba <__addsf3+0x136>
 8000b16:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b1e:	bf08      	it	eq
 8000b20:	f020 0001 	biceq.w	r0, r0, #1
 8000b24:	ea40 0003 	orr.w	r0, r0, r3
 8000b28:	4770      	bx	lr
 8000b2a:	0049      	lsls	r1, r1, #1
 8000b2c:	eb40 0000 	adc.w	r0, r0, r0
 8000b30:	3a01      	subs	r2, #1
 8000b32:	bf28      	it	cs
 8000b34:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b38:	d2ed      	bcs.n	8000b16 <__addsf3+0x92>
 8000b3a:	fab0 fc80 	clz	ip, r0
 8000b3e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b42:	ebb2 020c 	subs.w	r2, r2, ip
 8000b46:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b4a:	bfaa      	itet	ge
 8000b4c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b50:	4252      	neglt	r2, r2
 8000b52:	4318      	orrge	r0, r3
 8000b54:	bfbc      	itt	lt
 8000b56:	40d0      	lsrlt	r0, r2
 8000b58:	4318      	orrlt	r0, r3
 8000b5a:	4770      	bx	lr
 8000b5c:	f092 0f00 	teq	r2, #0
 8000b60:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b64:	bf06      	itte	eq
 8000b66:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b6a:	3201      	addeq	r2, #1
 8000b6c:	3b01      	subne	r3, #1
 8000b6e:	e7b5      	b.n	8000adc <__addsf3+0x58>
 8000b70:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b78:	bf18      	it	ne
 8000b7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b7e:	d021      	beq.n	8000bc4 <__addsf3+0x140>
 8000b80:	ea92 0f03 	teq	r2, r3
 8000b84:	d004      	beq.n	8000b90 <__addsf3+0x10c>
 8000b86:	f092 0f00 	teq	r2, #0
 8000b8a:	bf08      	it	eq
 8000b8c:	4608      	moveq	r0, r1
 8000b8e:	4770      	bx	lr
 8000b90:	ea90 0f01 	teq	r0, r1
 8000b94:	bf1c      	itt	ne
 8000b96:	2000      	movne	r0, #0
 8000b98:	4770      	bxne	lr
 8000b9a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b9e:	d104      	bne.n	8000baa <__addsf3+0x126>
 8000ba0:	0040      	lsls	r0, r0, #1
 8000ba2:	bf28      	it	cs
 8000ba4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ba8:	4770      	bx	lr
 8000baa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bae:	bf3c      	itt	cc
 8000bb0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bb4:	4770      	bxcc	lr
 8000bb6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	4770      	bx	lr
 8000bc4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bc8:	bf16      	itet	ne
 8000bca:	4608      	movne	r0, r1
 8000bcc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bd0:	4601      	movne	r1, r0
 8000bd2:	0242      	lsls	r2, r0, #9
 8000bd4:	bf06      	itte	eq
 8000bd6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bda:	ea90 0f01 	teqeq	r0, r1
 8000bde:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000be2:	4770      	bx	lr

08000be4 <__aeabi_ui2f>:
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	e004      	b.n	8000bf4 <__aeabi_i2f+0x8>
 8000bea:	bf00      	nop

08000bec <__aeabi_i2f>:
 8000bec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bf0:	bf48      	it	mi
 8000bf2:	4240      	negmi	r0, r0
 8000bf4:	ea5f 0c00 	movs.w	ip, r0
 8000bf8:	bf08      	it	eq
 8000bfa:	4770      	bxeq	lr
 8000bfc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c00:	4601      	mov	r1, r0
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	e01c      	b.n	8000c42 <__aeabi_l2f+0x2a>

08000c08 <__aeabi_ul2f>:
 8000c08:	ea50 0201 	orrs.w	r2, r0, r1
 8000c0c:	bf08      	it	eq
 8000c0e:	4770      	bxeq	lr
 8000c10:	f04f 0300 	mov.w	r3, #0
 8000c14:	e00a      	b.n	8000c2c <__aeabi_l2f+0x14>
 8000c16:	bf00      	nop

08000c18 <__aeabi_l2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__aeabi_l2f+0x14>
 8000c26:	4240      	negs	r0, r0
 8000c28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2c:	ea5f 0c01 	movs.w	ip, r1
 8000c30:	bf02      	ittt	eq
 8000c32:	4684      	moveq	ip, r0
 8000c34:	4601      	moveq	r1, r0
 8000c36:	2000      	moveq	r0, #0
 8000c38:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c3c:	bf08      	it	eq
 8000c3e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c42:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c46:	fabc f28c 	clz	r2, ip
 8000c4a:	3a08      	subs	r2, #8
 8000c4c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c50:	db10      	blt.n	8000c74 <__aeabi_l2f+0x5c>
 8000c52:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c56:	4463      	add	r3, ip
 8000c58:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5c:	f1c2 0220 	rsb	r2, r2, #32
 8000c60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c64:	fa20 f202 	lsr.w	r2, r0, r2
 8000c68:	eb43 0002 	adc.w	r0, r3, r2
 8000c6c:	bf08      	it	eq
 8000c6e:	f020 0001 	biceq.w	r0, r0, #1
 8000c72:	4770      	bx	lr
 8000c74:	f102 0220 	add.w	r2, r2, #32
 8000c78:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7c:	f1c2 0220 	rsb	r2, r2, #32
 8000c80:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c84:	fa21 f202 	lsr.w	r2, r1, r2
 8000c88:	eb43 0002 	adc.w	r0, r3, r2
 8000c8c:	bf08      	it	eq
 8000c8e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_fmul>:
 8000c94:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c98:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ca2:	ea92 0f0c 	teqne	r2, ip
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d06f      	beq.n	8000d8c <__aeabi_fmul+0xf8>
 8000cac:	441a      	add	r2, r3
 8000cae:	ea80 0c01 	eor.w	ip, r0, r1
 8000cb2:	0240      	lsls	r0, r0, #9
 8000cb4:	bf18      	it	ne
 8000cb6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cba:	d01e      	beq.n	8000cfa <__aeabi_fmul+0x66>
 8000cbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cc0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cc4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cc8:	fba0 3101 	umull	r3, r1, r0, r1
 8000ccc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cd0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cd4:	bf3e      	ittt	cc
 8000cd6:	0049      	lslcc	r1, r1, #1
 8000cd8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cdc:	005b      	lslcc	r3, r3, #1
 8000cde:	ea40 0001 	orr.w	r0, r0, r1
 8000ce2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ce6:	2afd      	cmp	r2, #253	; 0xfd
 8000ce8:	d81d      	bhi.n	8000d26 <__aeabi_fmul+0x92>
 8000cea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cf2:	bf08      	it	eq
 8000cf4:	f020 0001 	biceq.w	r0, r0, #1
 8000cf8:	4770      	bx	lr
 8000cfa:	f090 0f00 	teq	r0, #0
 8000cfe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d02:	bf08      	it	eq
 8000d04:	0249      	lsleq	r1, r1, #9
 8000d06:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d0a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d0e:	3a7f      	subs	r2, #127	; 0x7f
 8000d10:	bfc2      	ittt	gt
 8000d12:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d16:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d1a:	4770      	bxgt	lr
 8000d1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	3a01      	subs	r2, #1
 8000d26:	dc5d      	bgt.n	8000de4 <__aeabi_fmul+0x150>
 8000d28:	f112 0f19 	cmn.w	r2, #25
 8000d2c:	bfdc      	itt	le
 8000d2e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d32:	4770      	bxle	lr
 8000d34:	f1c2 0200 	rsb	r2, r2, #0
 8000d38:	0041      	lsls	r1, r0, #1
 8000d3a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d3e:	f1c2 0220 	rsb	r2, r2, #32
 8000d42:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d46:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d4a:	f140 0000 	adc.w	r0, r0, #0
 8000d4e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d52:	bf08      	it	eq
 8000d54:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d58:	4770      	bx	lr
 8000d5a:	f092 0f00 	teq	r2, #0
 8000d5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d62:	bf02      	ittt	eq
 8000d64:	0040      	lsleq	r0, r0, #1
 8000d66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d6a:	3a01      	subeq	r2, #1
 8000d6c:	d0f9      	beq.n	8000d62 <__aeabi_fmul+0xce>
 8000d6e:	ea40 000c 	orr.w	r0, r0, ip
 8000d72:	f093 0f00 	teq	r3, #0
 8000d76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d7a:	bf02      	ittt	eq
 8000d7c:	0049      	lsleq	r1, r1, #1
 8000d7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d82:	3b01      	subeq	r3, #1
 8000d84:	d0f9      	beq.n	8000d7a <__aeabi_fmul+0xe6>
 8000d86:	ea41 010c 	orr.w	r1, r1, ip
 8000d8a:	e78f      	b.n	8000cac <__aeabi_fmul+0x18>
 8000d8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d90:	ea92 0f0c 	teq	r2, ip
 8000d94:	bf18      	it	ne
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d00a      	beq.n	8000db2 <__aeabi_fmul+0x11e>
 8000d9c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000da0:	bf18      	it	ne
 8000da2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000da6:	d1d8      	bne.n	8000d5a <__aeabi_fmul+0xc6>
 8000da8:	ea80 0001 	eor.w	r0, r0, r1
 8000dac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000db0:	4770      	bx	lr
 8000db2:	f090 0f00 	teq	r0, #0
 8000db6:	bf17      	itett	ne
 8000db8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dbc:	4608      	moveq	r0, r1
 8000dbe:	f091 0f00 	teqne	r1, #0
 8000dc2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dc6:	d014      	beq.n	8000df2 <__aeabi_fmul+0x15e>
 8000dc8:	ea92 0f0c 	teq	r2, ip
 8000dcc:	d101      	bne.n	8000dd2 <__aeabi_fmul+0x13e>
 8000dce:	0242      	lsls	r2, r0, #9
 8000dd0:	d10f      	bne.n	8000df2 <__aeabi_fmul+0x15e>
 8000dd2:	ea93 0f0c 	teq	r3, ip
 8000dd6:	d103      	bne.n	8000de0 <__aeabi_fmul+0x14c>
 8000dd8:	024b      	lsls	r3, r1, #9
 8000dda:	bf18      	it	ne
 8000ddc:	4608      	movne	r0, r1
 8000dde:	d108      	bne.n	8000df2 <__aeabi_fmul+0x15e>
 8000de0:	ea80 0001 	eor.w	r0, r0, r1
 8000de4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000de8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df0:	4770      	bx	lr
 8000df2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000df6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_fdiv>:
 8000dfc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e04:	bf1e      	ittt	ne
 8000e06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e0a:	ea92 0f0c 	teqne	r2, ip
 8000e0e:	ea93 0f0c 	teqne	r3, ip
 8000e12:	d069      	beq.n	8000ee8 <__aeabi_fdiv+0xec>
 8000e14:	eba2 0203 	sub.w	r2, r2, r3
 8000e18:	ea80 0c01 	eor.w	ip, r0, r1
 8000e1c:	0249      	lsls	r1, r1, #9
 8000e1e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e22:	d037      	beq.n	8000e94 <__aeabi_fdiv+0x98>
 8000e24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e28:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e2c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e34:	428b      	cmp	r3, r1
 8000e36:	bf38      	it	cc
 8000e38:	005b      	lslcc	r3, r3, #1
 8000e3a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e3e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e42:	428b      	cmp	r3, r1
 8000e44:	bf24      	itt	cs
 8000e46:	1a5b      	subcs	r3, r3, r1
 8000e48:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e4c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e50:	bf24      	itt	cs
 8000e52:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e56:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e5a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e5e:	bf24      	itt	cs
 8000e60:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e68:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e6c:	bf24      	itt	cs
 8000e6e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e72:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e76:	011b      	lsls	r3, r3, #4
 8000e78:	bf18      	it	ne
 8000e7a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e7e:	d1e0      	bne.n	8000e42 <__aeabi_fdiv+0x46>
 8000e80:	2afd      	cmp	r2, #253	; 0xfd
 8000e82:	f63f af50 	bhi.w	8000d26 <__aeabi_fmul+0x92>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e8c:	bf08      	it	eq
 8000e8e:	f020 0001 	biceq.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e98:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e9c:	327f      	adds	r2, #127	; 0x7f
 8000e9e:	bfc2      	ittt	gt
 8000ea0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ea4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ea8:	4770      	bxgt	lr
 8000eaa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eae:	f04f 0300 	mov.w	r3, #0
 8000eb2:	3a01      	subs	r2, #1
 8000eb4:	e737      	b.n	8000d26 <__aeabi_fmul+0x92>
 8000eb6:	f092 0f00 	teq	r2, #0
 8000eba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ebe:	bf02      	ittt	eq
 8000ec0:	0040      	lsleq	r0, r0, #1
 8000ec2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ec6:	3a01      	subeq	r2, #1
 8000ec8:	d0f9      	beq.n	8000ebe <__aeabi_fdiv+0xc2>
 8000eca:	ea40 000c 	orr.w	r0, r0, ip
 8000ece:	f093 0f00 	teq	r3, #0
 8000ed2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ed6:	bf02      	ittt	eq
 8000ed8:	0049      	lsleq	r1, r1, #1
 8000eda:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ede:	3b01      	subeq	r3, #1
 8000ee0:	d0f9      	beq.n	8000ed6 <__aeabi_fdiv+0xda>
 8000ee2:	ea41 010c 	orr.w	r1, r1, ip
 8000ee6:	e795      	b.n	8000e14 <__aeabi_fdiv+0x18>
 8000ee8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eec:	ea92 0f0c 	teq	r2, ip
 8000ef0:	d108      	bne.n	8000f04 <__aeabi_fdiv+0x108>
 8000ef2:	0242      	lsls	r2, r0, #9
 8000ef4:	f47f af7d 	bne.w	8000df2 <__aeabi_fmul+0x15e>
 8000ef8:	ea93 0f0c 	teq	r3, ip
 8000efc:	f47f af70 	bne.w	8000de0 <__aeabi_fmul+0x14c>
 8000f00:	4608      	mov	r0, r1
 8000f02:	e776      	b.n	8000df2 <__aeabi_fmul+0x15e>
 8000f04:	ea93 0f0c 	teq	r3, ip
 8000f08:	d104      	bne.n	8000f14 <__aeabi_fdiv+0x118>
 8000f0a:	024b      	lsls	r3, r1, #9
 8000f0c:	f43f af4c 	beq.w	8000da8 <__aeabi_fmul+0x114>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e76e      	b.n	8000df2 <__aeabi_fmul+0x15e>
 8000f14:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f18:	bf18      	it	ne
 8000f1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f1e:	d1ca      	bne.n	8000eb6 <__aeabi_fdiv+0xba>
 8000f20:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f24:	f47f af5c 	bne.w	8000de0 <__aeabi_fmul+0x14c>
 8000f28:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f2c:	f47f af3c 	bne.w	8000da8 <__aeabi_fmul+0x114>
 8000f30:	e75f      	b.n	8000df2 <__aeabi_fmul+0x15e>
 8000f32:	bf00      	nop

08000f34 <__gesf2>:
 8000f34:	f04f 3cff 	mov.w	ip, #4294967295
 8000f38:	e006      	b.n	8000f48 <__cmpsf2+0x4>
 8000f3a:	bf00      	nop

08000f3c <__lesf2>:
 8000f3c:	f04f 0c01 	mov.w	ip, #1
 8000f40:	e002      	b.n	8000f48 <__cmpsf2+0x4>
 8000f42:	bf00      	nop

08000f44 <__cmpsf2>:
 8000f44:	f04f 0c01 	mov.w	ip, #1
 8000f48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f4c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f58:	bf18      	it	ne
 8000f5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f5e:	d011      	beq.n	8000f84 <__cmpsf2+0x40>
 8000f60:	b001      	add	sp, #4
 8000f62:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f66:	bf18      	it	ne
 8000f68:	ea90 0f01 	teqne	r0, r1
 8000f6c:	bf58      	it	pl
 8000f6e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f72:	bf88      	it	hi
 8000f74:	17c8      	asrhi	r0, r1, #31
 8000f76:	bf38      	it	cc
 8000f78:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f7c:	bf18      	it	ne
 8000f7e:	f040 0001 	orrne.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f88:	d102      	bne.n	8000f90 <__cmpsf2+0x4c>
 8000f8a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f8e:	d105      	bne.n	8000f9c <__cmpsf2+0x58>
 8000f90:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f94:	d1e4      	bne.n	8000f60 <__cmpsf2+0x1c>
 8000f96:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f9a:	d0e1      	beq.n	8000f60 <__cmpsf2+0x1c>
 8000f9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_cfrcmple>:
 8000fa4:	4684      	mov	ip, r0
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	4661      	mov	r1, ip
 8000faa:	e7ff      	b.n	8000fac <__aeabi_cfcmpeq>

08000fac <__aeabi_cfcmpeq>:
 8000fac:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fae:	f7ff ffc9 	bl	8000f44 <__cmpsf2>
 8000fb2:	2800      	cmp	r0, #0
 8000fb4:	bf48      	it	mi
 8000fb6:	f110 0f00 	cmnmi.w	r0, #0
 8000fba:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fbc <__aeabi_fcmpeq>:
 8000fbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc0:	f7ff fff4 	bl	8000fac <__aeabi_cfcmpeq>
 8000fc4:	bf0c      	ite	eq
 8000fc6:	2001      	moveq	r0, #1
 8000fc8:	2000      	movne	r0, #0
 8000fca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fce:	bf00      	nop

08000fd0 <__aeabi_fcmplt>:
 8000fd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd4:	f7ff ffea 	bl	8000fac <__aeabi_cfcmpeq>
 8000fd8:	bf34      	ite	cc
 8000fda:	2001      	movcc	r0, #1
 8000fdc:	2000      	movcs	r0, #0
 8000fde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_fcmple>:
 8000fe4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe8:	f7ff ffe0 	bl	8000fac <__aeabi_cfcmpeq>
 8000fec:	bf94      	ite	ls
 8000fee:	2001      	movls	r0, #1
 8000ff0:	2000      	movhi	r0, #0
 8000ff2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_fcmpge>:
 8000ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ffc:	f7ff ffd2 	bl	8000fa4 <__aeabi_cfrcmple>
 8001000:	bf94      	ite	ls
 8001002:	2001      	movls	r0, #1
 8001004:	2000      	movhi	r0, #0
 8001006:	f85d fb08 	ldr.w	pc, [sp], #8
 800100a:	bf00      	nop

0800100c <__aeabi_fcmpgt>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff ffc8 	bl	8000fa4 <__aeabi_cfrcmple>
 8001014:	bf34      	ite	cc
 8001016:	2001      	movcc	r0, #1
 8001018:	2000      	movcs	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_f2uiz>:
 8001020:	0042      	lsls	r2, r0, #1
 8001022:	d20e      	bcs.n	8001042 <__aeabi_f2uiz+0x22>
 8001024:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001028:	d30b      	bcc.n	8001042 <__aeabi_f2uiz+0x22>
 800102a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800102e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001032:	d409      	bmi.n	8001048 <__aeabi_f2uiz+0x28>
 8001034:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001038:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800103c:	fa23 f002 	lsr.w	r0, r3, r2
 8001040:	4770      	bx	lr
 8001042:	f04f 0000 	mov.w	r0, #0
 8001046:	4770      	bx	lr
 8001048:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800104c:	d101      	bne.n	8001052 <__aeabi_f2uiz+0x32>
 800104e:	0242      	lsls	r2, r0, #9
 8001050:	d102      	bne.n	8001058 <__aeabi_f2uiz+0x38>
 8001052:	f04f 30ff 	mov.w	r0, #4294967295
 8001056:	4770      	bx	lr
 8001058:	f04f 0000 	mov.w	r0, #0
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <HAL_UART_RxCpltCallback>:
#include "usart.h"

static uint8_t rxData[20];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0f      	ldr	r2, [pc, #60]	; (80010ac <HAL_UART_RxCpltCallback+0x4c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d117      	bne.n	80010a2 <HAL_UART_RxCpltCallback+0x42>
  {
    if(rxData[0] == 78) // Ascii value of 'N' is 78 (N for NO)
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <HAL_UART_RxCpltCallback+0x50>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b4e      	cmp	r3, #78	; 0x4e
 8001078:	d105      	bne.n	8001086 <HAL_UART_RxCpltCallback+0x26>
    {
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800107a:	2201      	movs	r2, #1
 800107c:	2102      	movs	r1, #2
 800107e:	480d      	ldr	r0, [pc, #52]	; (80010b4 <HAL_UART_RxCpltCallback+0x54>)
 8001080:	f002 f994 	bl	80033ac <HAL_GPIO_WritePin>
 8001084:	e008      	b.n	8001098 <HAL_UART_RxCpltCallback+0x38>
    }
    else if (rxData[0] ==89) // Ascii value of 'Y' is 89 (Y for YES)
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_UART_RxCpltCallback+0x50>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b59      	cmp	r3, #89	; 0x59
 800108c:	d104      	bne.n	8001098 <HAL_UART_RxCpltCallback+0x38>
    {
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2102      	movs	r1, #2
 8001092:	4808      	ldr	r0, [pc, #32]	; (80010b4 <HAL_UART_RxCpltCallback+0x54>)
 8001094:	f002 f98a 	bl	80033ac <HAL_GPIO_WritePin>
    }
    HAL_UART_Receive_IT(&huart1, rxData,20); // Enabling interrupt receive again
 8001098:	2214      	movs	r2, #20
 800109a:	4905      	ldr	r1, [pc, #20]	; (80010b0 <HAL_UART_RxCpltCallback+0x50>)
 800109c:	4806      	ldr	r0, [pc, #24]	; (80010b8 <HAL_UART_RxCpltCallback+0x58>)
 800109e:	f004 fe20 	bl	8005ce2 <HAL_UART_Receive_IT>
  }
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40013800 	.word	0x40013800
 80010b0:	20000124 	.word	0x20000124
 80010b4:	40010800 	.word	0x40010800
 80010b8:	20000340 	.word	0x20000340

080010bc <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af04      	add	r7, sp, #16
 80010c2:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80010c4:	2364      	movs	r3, #100	; 0x64
 80010c6:	9302      	str	r3, [sp, #8]
 80010c8:	2301      	movs	r3, #1
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	f107 030f 	add.w	r3, r7, #15
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2301      	movs	r3, #1
 80010d4:	2275      	movs	r2, #117	; 0x75
 80010d6:	21d0      	movs	r1, #208	; 0xd0
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f002 fbd7 	bl	800388c <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	2b68      	cmp	r3, #104	; 0x68
 80010e2:	d13d      	bne.n	8001160 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80010e8:	2364      	movs	r3, #100	; 0x64
 80010ea:	9302      	str	r3, [sp, #8]
 80010ec:	2301      	movs	r3, #1
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	f107 030e 	add.w	r3, r7, #14
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2301      	movs	r3, #1
 80010f8:	226b      	movs	r2, #107	; 0x6b
 80010fa:	21d0      	movs	r1, #208	; 0xd0
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f002 facb 	bl	8003698 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001102:	2307      	movs	r3, #7
 8001104:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001106:	2364      	movs	r3, #100	; 0x64
 8001108:	9302      	str	r3, [sp, #8]
 800110a:	2301      	movs	r3, #1
 800110c:	9301      	str	r3, [sp, #4]
 800110e:	f107 030e 	add.w	r3, r7, #14
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2301      	movs	r3, #1
 8001116:	2219      	movs	r2, #25
 8001118:	21d0      	movs	r1, #208	; 0xd0
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f002 fabc 	bl	8003698 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001120:	2300      	movs	r3, #0
 8001122:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001124:	2364      	movs	r3, #100	; 0x64
 8001126:	9302      	str	r3, [sp, #8]
 8001128:	2301      	movs	r3, #1
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	f107 030e 	add.w	r3, r7, #14
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2301      	movs	r3, #1
 8001134:	221c      	movs	r2, #28
 8001136:	21d0      	movs	r1, #208	; 0xd0
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f002 faad 	bl	8003698 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800113e:	2300      	movs	r3, #0
 8001140:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001142:	2364      	movs	r3, #100	; 0x64
 8001144:	9302      	str	r3, [sp, #8]
 8001146:	2301      	movs	r3, #1
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	f107 030e 	add.w	r3, r7, #14
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2301      	movs	r3, #1
 8001152:	221b      	movs	r2, #27
 8001154:	21d0      	movs	r1, #208	; 0xd0
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f002 fa9e 	bl	8003698 <HAL_I2C_Mem_Write>
        return 0;
 800115c:	2300      	movs	r3, #0
 800115e:	e000      	b.n	8001162 <MPU6050_Init+0xa6>
    }
    return 1;
 8001160:	2301      	movs	r3, #1
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	0000      	movs	r0, r0
 800116c:	0000      	movs	r0, r0
	...

08001170 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001174:	b094      	sub	sp, #80	; 0x50
 8001176:	af04      	add	r7, sp, #16
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800117c:	2364      	movs	r3, #100	; 0x64
 800117e:	9302      	str	r3, [sp, #8]
 8001180:	230e      	movs	r3, #14
 8001182:	9301      	str	r3, [sp, #4]
 8001184:	f107 0308 	add.w	r3, r7, #8
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	223b      	movs	r2, #59	; 0x3b
 800118e:	21d0      	movs	r1, #208	; 0xd0
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f002 fb7b 	bl	800388c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001196:	7a3b      	ldrb	r3, [r7, #8]
 8001198:	021b      	lsls	r3, r3, #8
 800119a:	b21a      	sxth	r2, r3
 800119c:	7a7b      	ldrb	r3, [r7, #9]
 800119e:	b21b      	sxth	r3, r3
 80011a0:	4313      	orrs	r3, r2
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80011a8:	7abb      	ldrb	r3, [r7, #10]
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	b21a      	sxth	r2, r3
 80011ae:	7afb      	ldrb	r3, [r7, #11]
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	4313      	orrs	r3, r2
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80011ba:	7b3b      	ldrb	r3, [r7, #12]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	b21a      	sxth	r2, r3
 80011c0:	7b7b      	ldrb	r3, [r7, #13]
 80011c2:	b21b      	sxth	r3, r3
 80011c4:	4313      	orrs	r3, r2
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80011cc:	7bbb      	ldrb	r3, [r7, #14]
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	4313      	orrs	r3, r2
 80011d8:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80011da:	7c3b      	ldrb	r3, [r7, #16]
 80011dc:	021b      	lsls	r3, r3, #8
 80011de:	b21a      	sxth	r2, r3
 80011e0:	7c7b      	ldrb	r3, [r7, #17]
 80011e2:	b21b      	sxth	r3, r3
 80011e4:	4313      	orrs	r3, r2
 80011e6:	b21a      	sxth	r2, r3
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80011ec:	7cbb      	ldrb	r3, [r7, #18]
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	b21a      	sxth	r2, r3
 80011f2:	7cfb      	ldrb	r3, [r7, #19]
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80011fe:	7d3b      	ldrb	r3, [r7, #20]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b21a      	sxth	r2, r3
 8001204:	7d7b      	ldrb	r3, [r7, #21]
 8001206:	b21b      	sxth	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	b21a      	sxth	r2, r3
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff f8ec 	bl	80003f4 <__aeabi_i2d>
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	4b95      	ldr	r3, [pc, #596]	; (8001478 <MPU6050_Read_All+0x308>)
 8001222:	f7ff fa7b 	bl	800071c <__aeabi_ddiv>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	6839      	ldr	r1, [r7, #0]
 800122c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f8dc 	bl	80003f4 <__aeabi_i2d>
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	4b8d      	ldr	r3, [pc, #564]	; (8001478 <MPU6050_Read_All+0x308>)
 8001242:	f7ff fa6b 	bl	800071c <__aeabi_ddiv>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	6839      	ldr	r1, [r7, #0]
 800124c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f8cc 	bl	80003f4 <__aeabi_i2d>
 800125c:	a380      	add	r3, pc, #512	; (adr r3, 8001460 <MPU6050_Read_All+0x2f0>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	f7ff fa5b 	bl	800071c <__aeabi_ddiv>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	6839      	ldr	r1, [r7, #0]
 800126c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001270:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fcb9 	bl	8000bec <__aeabi_i2f>
 800127a:	4603      	mov	r3, r0
 800127c:	497f      	ldr	r1, [pc, #508]	; (800147c <MPU6050_Read_All+0x30c>)
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fdbc 	bl	8000dfc <__aeabi_fdiv>
 8001284:	4603      	mov	r3, r0
 8001286:	497e      	ldr	r1, [pc, #504]	; (8001480 <MPU6050_Read_All+0x310>)
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fbfb 	bl	8000a84 <__addsf3>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f8a9 	bl	80003f4 <__aeabi_i2d>
 80012a2:	a371      	add	r3, pc, #452	; (adr r3, 8001468 <MPU6050_Read_All+0x2f8>)
 80012a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a8:	f7ff fa38 	bl	800071c <__aeabi_ddiv>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	6839      	ldr	r1, [r7, #0]
 80012b2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f899 	bl	80003f4 <__aeabi_i2d>
 80012c2:	a369      	add	r3, pc, #420	; (adr r3, 8001468 <MPU6050_Read_All+0x2f8>)
 80012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c8:	f7ff fa28 	bl	800071c <__aeabi_ddiv>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	6839      	ldr	r1, [r7, #0]
 80012d2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f889 	bl	80003f4 <__aeabi_i2d>
 80012e2:	a361      	add	r3, pc, #388	; (adr r3, 8001468 <MPU6050_Read_All+0x2f8>)
 80012e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e8:	f7ff fa18 	bl	800071c <__aeabi_ddiv>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	6839      	ldr	r1, [r7, #0]
 80012f2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80012f6:	f001 fce7 	bl	8002cc8 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	4b61      	ldr	r3, [pc, #388]	; (8001484 <MPU6050_Read_All+0x314>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f866 	bl	80003d4 <__aeabi_ui2d>
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	4b5e      	ldr	r3, [pc, #376]	; (8001488 <MPU6050_Read_All+0x318>)
 800130e:	f7ff fa05 	bl	800071c <__aeabi_ddiv>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 800131a:	f001 fcd5 	bl	8002cc8 <HAL_GetTick>
 800131e:	4603      	mov	r3, r0
 8001320:	4a58      	ldr	r2, [pc, #352]	; (8001484 <MPU6050_Read_All+0x314>)
 8001322:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132a:	461a      	mov	r2, r3
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001332:	fb03 f202 	mul.w	r2, r3, r2
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800133c:	4619      	mov	r1, r3
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001344:	fb01 f303 	mul.w	r3, r1, r3
 8001348:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f852 	bl	80003f4 <__aeabi_i2d>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	f005 fba9 	bl	8006aae <sqrt>
 800135c:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	f04f 0300 	mov.w	r3, #0
 8001368:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800136c:	f7ff fb14 	bl	8000998 <__aeabi_dcmpeq>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d119      	bne.n	80013aa <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f839 	bl	80003f4 <__aeabi_i2d>
 8001382:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001386:	f7ff f9c9 	bl	800071c <__aeabi_ddiv>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4610      	mov	r0, r2
 8001390:	4619      	mov	r1, r3
 8001392:	f005 f9fd 	bl	8006790 <atan>
 8001396:	a336      	add	r3, pc, #216	; (adr r3, 8001470 <MPU6050_Read_All+0x300>)
 8001398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139c:	f7ff f894 	bl	80004c8 <__aeabi_dmul>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80013a8:	e005      	b.n	80013b6 <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	f04f 0300 	mov.w	r3, #0
 80013b2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013bc:	425b      	negs	r3, r3
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f818 	bl	80003f4 <__aeabi_i2d>
 80013c4:	4682      	mov	sl, r0
 80013c6:	468b      	mov	fp, r1
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f810 	bl	80003f4 <__aeabi_i2d>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4650      	mov	r0, sl
 80013da:	4659      	mov	r1, fp
 80013dc:	f005 fb65 	bl	8006aaa <atan2>
 80013e0:	a323      	add	r3, pc, #140	; (adr r3, 8001470 <MPU6050_Read_All+0x300>)
 80013e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e6:	f7ff f86f 	bl	80004c8 <__aeabi_dmul>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	4b25      	ldr	r3, [pc, #148]	; (800148c <MPU6050_Read_All+0x31c>)
 80013f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013fc:	f7ff fad6 	bl	80009ac <__aeabi_dcmplt>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00a      	beq.n	800141c <MPU6050_Read_All+0x2ac>
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <MPU6050_Read_All+0x320>)
 8001412:	f7ff fae9 	bl	80009e8 <__aeabi_dcmpgt>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d114      	bne.n	8001446 <MPU6050_Read_All+0x2d6>
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <MPU6050_Read_All+0x320>)
 8001422:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001426:	f7ff fadf 	bl	80009e8 <__aeabi_dcmpgt>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d033      	beq.n	8001498 <MPU6050_Read_All+0x328>
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	4b14      	ldr	r3, [pc, #80]	; (800148c <MPU6050_Read_All+0x31c>)
 800143c:	f7ff fab6 	bl	80009ac <__aeabi_dcmplt>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d028      	beq.n	8001498 <MPU6050_Read_All+0x328>
    {
        KalmanY.angle = pitch;
 8001446:	4913      	ldr	r1, [pc, #76]	; (8001494 <MPU6050_Read_All+0x324>)
 8001448:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800144c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001450:	6839      	ldr	r1, [r7, #0]
 8001452:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001456:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800145a:	e030      	b.n	80014be <MPU6050_Read_All+0x34e>
 800145c:	f3af 8000 	nop.w
 8001460:	00000000 	.word	0x00000000
 8001464:	40cc2900 	.word	0x40cc2900
 8001468:	00000000 	.word	0x00000000
 800146c:	40606000 	.word	0x40606000
 8001470:	1a63c1f8 	.word	0x1a63c1f8
 8001474:	404ca5dc 	.word	0x404ca5dc
 8001478:	40d00000 	.word	0x40d00000
 800147c:	43aa0000 	.word	0x43aa0000
 8001480:	42121eb8 	.word	0x42121eb8
 8001484:	20000138 	.word	0x20000138
 8001488:	408f4000 	.word	0x408f4000
 800148c:	c0568000 	.word	0xc0568000
 8001490:	40568000 	.word	0x40568000
 8001494:	20000048 	.word	0x20000048
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800149e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80014a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80014a6:	e9cd 2300 	strd	r2, r3, [sp]
 80014aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014ae:	481c      	ldr	r0, [pc, #112]	; (8001520 <MPU6050_Read_All+0x3b0>)
 80014b0:	f000 f83c 	bl	800152c <Kalman_getAngle>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	6839      	ldr	r1, [r7, #0]
 80014ba:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80014c4:	4690      	mov	r8, r2
 80014c6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <MPU6050_Read_All+0x3b4>)
 80014d0:	4640      	mov	r0, r8
 80014d2:	4649      	mov	r1, r9
 80014d4:	f7ff fa88 	bl	80009e8 <__aeabi_dcmpgt>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d008      	beq.n	80014f0 <MPU6050_Read_All+0x380>
        DataStruct->Gx = -DataStruct->Gx;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80014e4:	4614      	mov	r4, r2
 80014e6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80014f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80014fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80014fe:	e9cd 2300 	strd	r2, r3, [sp]
 8001502:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001506:	4808      	ldr	r0, [pc, #32]	; (8001528 <MPU6050_Read_All+0x3b8>)
 8001508:	f000 f810 	bl	800152c <Kalman_getAngle>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	6839      	ldr	r1, [r7, #0]
 8001512:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8001516:	bf00      	nop
 8001518:	3740      	adds	r7, #64	; 0x40
 800151a:	46bd      	mov	sp, r7
 800151c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001520:	20000048 	.word	0x20000048
 8001524:	40568000 	.word	0x40568000
 8001528:	20000000 	.word	0x20000000

0800152c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 800152c:	b5b0      	push	{r4, r5, r7, lr}
 800152e:	b092      	sub	sp, #72	; 0x48
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800153e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001542:	f7fe fe09 	bl	8000158 <__aeabi_dsub>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001554:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001558:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800155c:	f7fe ffb4 	bl	80004c8 <__aeabi_dmul>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4620      	mov	r0, r4
 8001566:	4629      	mov	r1, r5
 8001568:	f7fe fdf8 	bl	800015c <__adddf3>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	68f9      	ldr	r1, [r7, #12]
 8001572:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001582:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001586:	f7fe ff9f 	bl	80004c8 <__aeabi_dmul>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4610      	mov	r0, r2
 8001590:	4619      	mov	r1, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001598:	f7fe fdde 	bl	8000158 <__aeabi_dsub>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80015aa:	f7fe fdd5 	bl	8000158 <__aeabi_dsub>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015bc:	f7fe fdce 	bl	800015c <__adddf3>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4610      	mov	r0, r2
 80015c6:	4619      	mov	r1, r3
 80015c8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80015cc:	f7fe ff7c 	bl	80004c8 <__aeabi_dmul>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4620      	mov	r0, r4
 80015d6:	4629      	mov	r1, r5
 80015d8:	f7fe fdc0 	bl	800015c <__adddf3>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	68f9      	ldr	r1, [r7, #12]
 80015e2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80015f2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80015f6:	f7fe ff67 	bl	80004c8 <__aeabi_dmul>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4620      	mov	r0, r4
 8001600:	4629      	mov	r1, r5
 8001602:	f7fe fda9 	bl	8000158 <__aeabi_dsub>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	68f9      	ldr	r1, [r7, #12]
 800160c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800161c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001620:	f7fe ff52 	bl	80004c8 <__aeabi_dmul>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4620      	mov	r0, r4
 800162a:	4629      	mov	r1, r5
 800162c:	f7fe fd94 	bl	8000158 <__aeabi_dsub>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	68f9      	ldr	r1, [r7, #12]
 8001636:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001646:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800164a:	f7fe ff3d 	bl	80004c8 <__aeabi_dmul>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4620      	mov	r0, r4
 8001654:	4629      	mov	r1, r5
 8001656:	f7fe fd81 	bl	800015c <__adddf3>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	68f9      	ldr	r1, [r7, #12]
 8001660:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001670:	f7fe fd74 	bl	800015c <__adddf3>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001682:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001686:	f7ff f849 	bl	800071c <__aeabi_ddiv>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001698:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800169c:	f7ff f83e 	bl	800071c <__aeabi_ddiv>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80016ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016b2:	f7fe fd51 	bl	8000158 <__aeabi_dsub>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80016c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80016cc:	f7fe fefc 	bl	80004c8 <__aeabi_dmul>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4620      	mov	r0, r4
 80016d6:	4629      	mov	r1, r5
 80016d8:	f7fe fd40 	bl	800015c <__adddf3>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	68f9      	ldr	r1, [r7, #12]
 80016e2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80016ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80016f4:	f7fe fee8 	bl	80004c8 <__aeabi_dmul>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4620      	mov	r0, r4
 80016fe:	4629      	mov	r1, r5
 8001700:	f7fe fd2c 	bl	800015c <__adddf3>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	68f9      	ldr	r1, [r7, #12]
 800170a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001714:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800171e:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001728:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800172c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001730:	f7fe feca 	bl	80004c8 <__aeabi_dmul>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4620      	mov	r0, r4
 800173a:	4629      	mov	r1, r5
 800173c:	f7fe fd0c 	bl	8000158 <__aeabi_dsub>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	68f9      	ldr	r1, [r7, #12]
 8001746:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001750:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001754:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001758:	f7fe feb6 	bl	80004c8 <__aeabi_dmul>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4620      	mov	r0, r4
 8001762:	4629      	mov	r1, r5
 8001764:	f7fe fcf8 	bl	8000158 <__aeabi_dsub>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	68f9      	ldr	r1, [r7, #12]
 800176e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001778:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800177c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001780:	f7fe fea2 	bl	80004c8 <__aeabi_dmul>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4620      	mov	r0, r4
 800178a:	4629      	mov	r1, r5
 800178c:	f7fe fce4 	bl	8000158 <__aeabi_dsub>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	68f9      	ldr	r1, [r7, #12]
 8001796:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80017a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017a8:	f7fe fe8e 	bl	80004c8 <__aeabi_dmul>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4620      	mov	r0, r4
 80017b2:	4629      	mov	r1, r5
 80017b4:	f7fe fcd0 	bl	8000158 <__aeabi_dsub>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	68f9      	ldr	r1, [r7, #12]
 80017be:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
}
 80017c8:	4610      	mov	r0, r2
 80017ca:	4619      	mov	r1, r3
 80017cc:	3748      	adds	r7, #72	; 0x48
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080017d4 <_Z41__static_initialization_and_destruction_0ii>:
			RightMotor.isForward = false;
		}
		RightMotor.duration--;
	}

}
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d110      	bne.n	8001806 <_Z41__static_initialization_and_destruction_0ii+0x32>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d10b      	bne.n	8001806 <_Z41__static_initialization_and_destruction_0ii+0x32>
#define RightMotorTimer	&htim2
#define SpeedCalculation &htim3


#include "MotorEncoder.hpp"
static MotorEncoder LeftMotor(LeftMotorTimer, TIM_CHANNEL_1 ,TIM_CHANNEL_2);
 80017ee:	2304      	movs	r3, #4
 80017f0:	2200      	movs	r2, #0
 80017f2:	490e      	ldr	r1, [pc, #56]	; (800182c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80017f4:	480e      	ldr	r0, [pc, #56]	; (8001830 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80017f6:	f000 f831 	bl	800185c <_ZN12MotorEncoderC1EP17TIM_HandleTypeDeftt>
static MotorEncoder RightMotor(RightMotorTimer, TIM_CHANNEL_1 ,TIM_CHANNEL_2);
 80017fa:	2304      	movs	r3, #4
 80017fc:	2200      	movs	r2, #0
 80017fe:	490d      	ldr	r1, [pc, #52]	; (8001834 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001800:	480d      	ldr	r0, [pc, #52]	; (8001838 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001802:	f000 f82b 	bl	800185c <_ZN12MotorEncoderC1EP17TIM_HandleTypeDeftt>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10a      	bne.n	8001822 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001812:	4293      	cmp	r3, r2
 8001814:	d105      	bne.n	8001822 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8001816:	4808      	ldr	r0, [pc, #32]	; (8001838 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001818:	f000 f86a 	bl	80018f0 <_ZN12MotorEncoderD1Ev>
static MotorEncoder LeftMotor(LeftMotorTimer, TIM_CHANNEL_1 ,TIM_CHANNEL_2);
 800181c:	4804      	ldr	r0, [pc, #16]	; (8001830 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800181e:	f000 f867 	bl	80018f0 <_ZN12MotorEncoderD1Ev>
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000220 	.word	0x20000220
 8001830:	2000013c 	.word	0x2000013c
 8001834:	20000268 	.word	0x20000268
 8001838:	20000158 	.word	0x20000158

0800183c <_GLOBAL__sub_I_HAL_GPIO_EXTI_Callback>:
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
 8001840:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001844:	2001      	movs	r0, #1
 8001846:	f7ff ffc5 	bl	80017d4 <_Z41__static_initialization_and_destruction_0ii>
 800184a:	bd80      	pop	{r7, pc}

0800184c <_GLOBAL__sub_D_HAL_GPIO_EXTI_Callback>:
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
 8001850:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001854:	2000      	movs	r0, #0
 8001856:	f7ff ffbd 	bl	80017d4 <_Z41__static_initialization_and_destruction_0ii>
 800185a:	bd80      	pop	{r7, pc}

0800185c <_ZN12MotorEncoderC1EP17TIM_HandleTypeDeftt>:

#include "../Inc/MotorEncoder.hpp"

#define SpeedCalTimer &htim3

MotorEncoder::MotorEncoder(TIM_HandleTypeDef* timer, uint16_t timer_channelA, uint16_t timer_channelB)
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b087      	sub	sp, #28
 8001860:	af02      	add	r7, sp, #8
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	4611      	mov	r1, r2
 8001868:	461a      	mov	r2, r3
 800186a:	460b      	mov	r3, r1
 800186c:	80fb      	strh	r3, [r7, #6]
 800186e:	4613      	mov	r3, r2
 8001870:	80bb      	strh	r3, [r7, #4]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4a1d      	ldr	r2, [pc, #116]	; (80018ec <_ZN12MotorEncoderC1EP17TIM_HandleTypeDeftt+0x90>)
 8001876:	611a      	str	r2, [r3, #16]
{
	motorSpeed = 0;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
	prev_speed_timer_val = 0;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
	duration = 0;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	615a      	str	r2, [r3, #20]
	isForward = true;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2201      	movs	r2, #1
 8001890:	761a      	strb	r2, [r3, #24]
	forwardPWM = new PWMChannel(0, nullptr,timer, timer_channelA);
 8001892:	2014      	movs	r0, #20
 8001894:	f004 ff5e 	bl	8006754 <_Znwj>
 8001898:	4603      	mov	r3, r0
 800189a:	461c      	mov	r4, r3
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	4620      	mov	r0, r4
 80018a8:	f000 f87a 	bl	80019a0 <_ZN10PWMChannelC1EtP12GPIO_TypeDefP17TIM_HandleTypeDeft>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	605c      	str	r4, [r3, #4]
	reversePWM = new PWMChannel(0, nullptr,timer, timer_channelB);
 80018b0:	2014      	movs	r0, #20
 80018b2:	f004 ff4f 	bl	8006754 <_Znwj>
 80018b6:	4603      	mov	r3, r0
 80018b8:	461c      	mov	r4, r3
 80018ba:	88bb      	ldrh	r3, [r7, #4]
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	2200      	movs	r2, #0
 80018c2:	2100      	movs	r1, #0
 80018c4:	4620      	mov	r0, r4
 80018c6:	f000 f86b 	bl	80019a0 <_ZN10PWMChannelC1EtP12GPIO_TypeDefP17TIM_HandleTypeDeft>
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	609c      	str	r4, [r3, #8]
	forwardPWM->setup();
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 f87e 	bl	80019d4 <_ZN10PWMChannel5setupEv>
	reversePWM->setup();
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 f879 	bl	80019d4 <_ZN10PWMChannel5setupEv>
}
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4618      	mov	r0, r3
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd90      	pop	{r4, r7, pc}
 80018ec:	3a03126f 	.word	0x3a03126f

080018f0 <_ZN12MotorEncoderD1Ev>:

MotorEncoder::~MotorEncoder()
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
{
	delete forwardPWM;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <_ZN12MotorEncoderD1Ev+0x18>
 8001900:	2114      	movs	r1, #20
 8001902:	4618      	mov	r0, r3
 8001904:	f004 ff24 	bl	8006750 <_ZdlPvj>
	delete reversePWM;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <_ZN12MotorEncoderD1Ev+0x28>
 8001910:	2114      	movs	r1, #20
 8001912:	4618      	mov	r0, r3
 8001914:	f004 ff1c 	bl	8006750 <_ZdlPvj>
}
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <_ZN12MotorEncoder13setWheelSpeedEf>:
	motorSpeed = distance / second;
	return motorSpeed;
}

void MotorEncoder::setWheelSpeed(float percentage)
{
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
	if(percentage > 100 || percentage < -100 )
 800192e:	491a      	ldr	r1, [pc, #104]	; (8001998 <_ZN12MotorEncoder13setWheelSpeedEf+0x74>)
 8001930:	6838      	ldr	r0, [r7, #0]
 8001932:	f7ff fb6b 	bl	800100c <__aeabi_fcmpgt>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d129      	bne.n	8001990 <_ZN12MotorEncoder13setWheelSpeedEf+0x6c>
 800193c:	4917      	ldr	r1, [pc, #92]	; (800199c <_ZN12MotorEncoder13setWheelSpeedEf+0x78>)
 800193e:	6838      	ldr	r0, [r7, #0]
 8001940:	f7ff fb46 	bl	8000fd0 <__aeabi_fcmplt>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d122      	bne.n	8001990 <_ZN12MotorEncoder13setWheelSpeedEf+0x6c>
	{
		return;
	}
	else if (percentage > 0)
 800194a:	f04f 0100 	mov.w	r1, #0
 800194e:	6838      	ldr	r0, [r7, #0]
 8001950:	f7ff fb5c 	bl	800100c <__aeabi_fcmpgt>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00b      	beq.n	8001972 <_ZN12MotorEncoder13setWheelSpeedEf+0x4e>
	{
		forwardPWM->set(percentage);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685c      	ldr	r4, [r3, #4]
 800195e:	6838      	ldr	r0, [r7, #0]
 8001960:	f7ff fb5e 	bl	8001020 <__aeabi_f2uiz>
 8001964:	4603      	mov	r3, r0
 8001966:	b2db      	uxtb	r3, r3
 8001968:	4619      	mov	r1, r3
 800196a:	4620      	mov	r0, r4
 800196c:	f000 f848 	bl	8001a00 <_ZN10PWMChannel3setEh>
 8001970:	e00f      	b.n	8001992 <_ZN12MotorEncoder13setWheelSpeedEf+0x6e>
	}
	else
	{
		reversePWM->set(-percentage);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689c      	ldr	r4, [r3, #8]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fb4f 	bl	8001020 <__aeabi_f2uiz>
 8001982:	4603      	mov	r3, r0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	4619      	mov	r1, r3
 8001988:	4620      	mov	r0, r4
 800198a:	f000 f839 	bl	8001a00 <_ZN10PWMChannel3setEh>
 800198e:	e000      	b.n	8001992 <_ZN12MotorEncoder13setWheelSpeedEf+0x6e>
		return;
 8001990:	bf00      	nop
	}
}
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	bd90      	pop	{r4, r7, pc}
 8001998:	42c80000 	.word	0x42c80000
 800199c:	c2c80000 	.word	0xc2c80000

080019a0 <_ZN10PWMChannelC1EtP12GPIO_TypeDefP17TIM_HandleTypeDeft>:

/* Example
 * PWMChannel pwmChannel = PWMChannel(0, nullptr,&htim2, TIM_CHANNEL_1);
 * */

PWMChannel::PWMChannel(uint16_t pin_num, GPIO_TypeDef* port, TIM_HandleTypeDef* timer,
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	607a      	str	r2, [r7, #4]
 80019aa:	603b      	str	r3, [r7, #0]
 80019ac:	460b      	mov	r3, r1
 80019ae:	817b      	strh	r3, [r7, #10]
                       uint16_t timer_channel)
    : pin_num_(pin_num), port_(port), timer_(timer), timer_channel_(timer_channel) {}
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	897a      	ldrh	r2, [r7, #10]
 80019b4:	801a      	strh	r2, [r3, #0]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	8b3a      	ldrh	r2, [r7, #24]
 80019c6:	819a      	strh	r2, [r3, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4618      	mov	r0, r3
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <_ZN10PWMChannel5setupEv>:

void PWMChannel::setup(void) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
    period_ticks_ = timer_->Init.Period;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	68da      	ldr	r2, [r3, #12]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	611a      	str	r2, [r3, #16]

    HAL_TIM_PWM_Start(timer_, timer_channel_);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	899b      	ldrh	r3, [r3, #12]
 80019ee:	4619      	mov	r1, r3
 80019f0:	4610      	mov	r0, r2
 80019f2:	f003 fa77 	bl	8004ee4 <HAL_TIM_PWM_Start>

}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <_ZN10PWMChannel3setEh>:

void PWMChannel::set(uint8_t percent) {
 8001a00:	b590      	push	{r4, r7, lr}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	70fb      	strb	r3, [r7, #3]
    if (percent > 100) {
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	2b64      	cmp	r3, #100	; 0x64
 8001a10:	d849      	bhi.n	8001aa6 <_ZN10PWMChannel3setEh+0xa6>
        return;
    }

    uint32_t us = (percent * (MAX_SIGNAL - MIN_SIGNAL)) / 100 + MIN_SIGNAL;
 8001a12:	78fb      	ldrb	r3, [r7, #3]
 8001a14:	f240 424c 	movw	r2, #1100	; 0x44c
 8001a18:	fb02 f303 	mul.w	r3, r2, r3
 8001a1c:	4a24      	ldr	r2, [pc, #144]	; (8001ab0 <_ZN10PWMChannel3setEh+0xb0>)
 8001a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a22:	095b      	lsrs	r3, r3, #5
 8001a24:	f203 33b6 	addw	r3, r3, #950	; 0x3b6
 8001a28:	60fb      	str	r3, [r7, #12]
    uint32_t ticks =
        static_cast<uint32_t>((static_cast<float>(us) / static_cast<float>(PWM_PERIOD)) *
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f7ff f8da 	bl	8000be4 <__aeabi_ui2f>
 8001a30:	4603      	mov	r3, r0
 8001a32:	4920      	ldr	r1, [pc, #128]	; (8001ab4 <_ZN10PWMChannel3setEh+0xb4>)
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff f9e1 	bl	8000dfc <__aeabi_fdiv>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461c      	mov	r4, r3
                              static_cast<float>(period_ticks_));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff f8ce 	bl	8000be4 <__aeabi_ui2f>
 8001a48:	4603      	mov	r3, r0
        static_cast<uint32_t>((static_cast<float>(us) / static_cast<float>(PWM_PERIOD)) *
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	f7ff f921 	bl	8000c94 <__aeabi_fmul>
 8001a52:	4603      	mov	r3, r0
    uint32_t ticks =
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fae3 	bl	8001020 <__aeabi_f2uiz>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	60bb      	str	r3, [r7, #8]

    __HAL_TIM_SET_COMPARE(timer_, timer_channel_, ticks);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	899b      	ldrh	r3, [r3, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d105      	bne.n	8001a72 <_ZN10PWMChannel3setEh+0x72>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	635a      	str	r2, [r3, #52]	; 0x34
 8001a70:	e01a      	b.n	8001aa8 <_ZN10PWMChannel3setEh+0xa8>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	899b      	ldrh	r3, [r3, #12]
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d105      	bne.n	8001a86 <_ZN10PWMChannel3setEh+0x86>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68ba      	ldr	r2, [r7, #8]
 8001a82:	639a      	str	r2, [r3, #56]	; 0x38
 8001a84:	e010      	b.n	8001aa8 <_ZN10PWMChannel3setEh+0xa8>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	899b      	ldrh	r3, [r3, #12]
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d105      	bne.n	8001a9a <_ZN10PWMChannel3setEh+0x9a>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68ba      	ldr	r2, [r7, #8]
 8001a96:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a98:	e006      	b.n	8001aa8 <_ZN10PWMChannel3setEh+0xa8>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	641a      	str	r2, [r3, #64]	; 0x40
 8001aa4:	e000      	b.n	8001aa8 <_ZN10PWMChannel3setEh+0xa8>
        return;
 8001aa6:	bf00      	nop
}
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd90      	pop	{r4, r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	51eb851f 	.word	0x51eb851f
 8001ab4:	42c80000 	.word	0x42c80000

08001ab8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abe:	f107 0310 	add.w	r3, r7, #16
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001acc:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <MX_GPIO_Init+0x90>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	4a1d      	ldr	r2, [pc, #116]	; (8001b48 <MX_GPIO_Init+0x90>)
 8001ad2:	f043 0310 	orr.w	r3, r3, #16
 8001ad6:	6193      	str	r3, [r2, #24]
 8001ad8:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <MX_GPIO_Init+0x90>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	f003 0310 	and.w	r3, r3, #16
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae4:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <MX_GPIO_Init+0x90>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	4a17      	ldr	r2, [pc, #92]	; (8001b48 <MX_GPIO_Init+0x90>)
 8001aea:	f043 0304 	orr.w	r3, r3, #4
 8001aee:	6193      	str	r3, [r2, #24]
 8001af0:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <MX_GPIO_Init+0x90>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <MX_GPIO_Init+0x90>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	4a11      	ldr	r2, [pc, #68]	; (8001b48 <MX_GPIO_Init+0x90>)
 8001b02:	f043 0308 	orr.w	r3, r3, #8
 8001b06:	6193      	str	r3, [r2, #24]
 8001b08:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <MX_GPIO_Init+0x90>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b14:	2200      	movs	r2, #0
 8001b16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b1a:	480c      	ldr	r0, [pc, #48]	; (8001b4c <MX_GPIO_Init+0x94>)
 8001b1c:	f001 fc46 	bl	80033ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b26:	2301      	movs	r3, #1
 8001b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b32:	f107 0310 	add.w	r3, r7, #16
 8001b36:	4619      	mov	r1, r3
 8001b38:	4804      	ldr	r0, [pc, #16]	; (8001b4c <MX_GPIO_Init+0x94>)
 8001b3a:	f001 fab3 	bl	80030a4 <HAL_GPIO_Init>

}
 8001b3e:	bf00      	nop
 8001b40:	3720      	adds	r7, #32
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40011000 	.word	0x40011000

08001b50 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <MX_I2C1_Init+0x50>)
 8001b56:	4a13      	ldr	r2, [pc, #76]	; (8001ba4 <MX_I2C1_Init+0x54>)
 8001b58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <MX_I2C1_Init+0x50>)
 8001b5c:	4a12      	ldr	r2, [pc, #72]	; (8001ba8 <MX_I2C1_Init+0x58>)
 8001b5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <MX_I2C1_Init+0x50>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <MX_I2C1_Init+0x50>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <MX_I2C1_Init+0x50>)
 8001b6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b74:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <MX_I2C1_Init+0x50>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <MX_I2C1_Init+0x50>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b80:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <MX_I2C1_Init+0x50>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <MX_I2C1_Init+0x50>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b8c:	4804      	ldr	r0, [pc, #16]	; (8001ba0 <MX_I2C1_Init+0x50>)
 8001b8e:	f001 fc3f 	bl	8003410 <HAL_I2C_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b98:	f000 f998 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000174 	.word	0x20000174
 8001ba4:	40005400 	.word	0x40005400
 8001ba8:	000186a0 	.word	0x000186a0

08001bac <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <MX_I2C2_Init+0x50>)
 8001bb2:	4a13      	ldr	r2, [pc, #76]	; (8001c00 <MX_I2C2_Init+0x54>)
 8001bb4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <MX_I2C2_Init+0x50>)
 8001bb8:	4a12      	ldr	r2, [pc, #72]	; (8001c04 <MX_I2C2_Init+0x58>)
 8001bba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <MX_I2C2_Init+0x50>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <MX_I2C2_Init+0x50>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <MX_I2C2_Init+0x50>)
 8001bca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bce:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <MX_I2C2_Init+0x50>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <MX_I2C2_Init+0x50>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bdc:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <MX_I2C2_Init+0x50>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <MX_I2C2_Init+0x50>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001be8:	4804      	ldr	r0, [pc, #16]	; (8001bfc <MX_I2C2_Init+0x50>)
 8001bea:	f001 fc11 	bl	8003410 <HAL_I2C_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001bf4:	f000 f96a 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	200001c8 	.word	0x200001c8
 8001c00:	40005800 	.word	0x40005800
 8001c04:	00061a80 	.word	0x00061a80

08001c08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08c      	sub	sp, #48	; 0x30
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 031c 	add.w	r3, r7, #28
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a32      	ldr	r2, [pc, #200]	; (8001cec <HAL_I2C_MspInit+0xe4>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d133      	bne.n	8001c90 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c28:	4b31      	ldr	r3, [pc, #196]	; (8001cf0 <HAL_I2C_MspInit+0xe8>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	4a30      	ldr	r2, [pc, #192]	; (8001cf0 <HAL_I2C_MspInit+0xe8>)
 8001c2e:	f043 0308 	orr.w	r3, r3, #8
 8001c32:	6193      	str	r3, [r2, #24]
 8001c34:	4b2e      	ldr	r3, [pc, #184]	; (8001cf0 <HAL_I2C_MspInit+0xe8>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	61bb      	str	r3, [r7, #24]
 8001c3e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c40:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c46:	2312      	movs	r3, #18
 8001c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4e:	f107 031c 	add.w	r3, r7, #28
 8001c52:	4619      	mov	r1, r3
 8001c54:	4827      	ldr	r0, [pc, #156]	; (8001cf4 <HAL_I2C_MspInit+0xec>)
 8001c56:	f001 fa25 	bl	80030a4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001c5a:	4b27      	ldr	r3, [pc, #156]	; (8001cf8 <HAL_I2C_MspInit+0xf0>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c62:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c6a:	f043 0302 	orr.w	r3, r3, #2
 8001c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c70:	4a21      	ldr	r2, [pc, #132]	; (8001cf8 <HAL_I2C_MspInit+0xf0>)
 8001c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c74:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c76:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <HAL_I2C_MspInit+0xe8>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	4a1d      	ldr	r2, [pc, #116]	; (8001cf0 <HAL_I2C_MspInit+0xe8>)
 8001c7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c80:	61d3      	str	r3, [r2, #28]
 8001c82:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <HAL_I2C_MspInit+0xe8>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001c8e:	e029      	b.n	8001ce4 <HAL_I2C_MspInit+0xdc>
  else if(i2cHandle->Instance==I2C2)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a19      	ldr	r2, [pc, #100]	; (8001cfc <HAL_I2C_MspInit+0xf4>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d124      	bne.n	8001ce4 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9a:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <HAL_I2C_MspInit+0xe8>)
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	4a14      	ldr	r2, [pc, #80]	; (8001cf0 <HAL_I2C_MspInit+0xe8>)
 8001ca0:	f043 0308 	orr.w	r3, r3, #8
 8001ca4:	6193      	str	r3, [r2, #24]
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_I2C_MspInit+0xe8>)
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001cb2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cb8:	2312      	movs	r3, #18
 8001cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc0:	f107 031c 	add.w	r3, r7, #28
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	480b      	ldr	r0, [pc, #44]	; (8001cf4 <HAL_I2C_MspInit+0xec>)
 8001cc8:	f001 f9ec 	bl	80030a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <HAL_I2C_MspInit+0xe8>)
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	4a07      	ldr	r2, [pc, #28]	; (8001cf0 <HAL_I2C_MspInit+0xe8>)
 8001cd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cd6:	61d3      	str	r3, [r2, #28]
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HAL_I2C_MspInit+0xe8>)
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
}
 8001ce4:	bf00      	nop
 8001ce6:	3730      	adds	r7, #48	; 0x30
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40005400 	.word	0x40005400
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40010c00 	.word	0x40010c00
 8001cf8:	40010000 	.word	0x40010000
 8001cfc:	40005800 	.word	0x40005800

08001d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b0b2      	sub	sp, #200	; 0xc8
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d06:	f000 ff87 	bl	8002c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d0a:	f000 f861 	bl	8001dd0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d0e:	f7ff fed3 	bl	8001ab8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001d12:	f7ff ff1d 	bl	8001b50 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001d16:	f7ff ff49 	bl	8001bac <MX_I2C2_Init>
  MX_TIM1_Init();
 8001d1a:	f000 f99f 	bl	800205c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001d1e:	f000 fa49 	bl	80021b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001d22:	f000 fac7 	bl	80022b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001d26:	f000 fb5b 	bl	80023e0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001d2a:	f000 fc8d 	bl	8002648 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8001d2e:	f000 fd75 	bl	800281c <ssd1306_Init>
  MPU6050_Init(&hi2c1);
 8001d32:	4821      	ldr	r0, [pc, #132]	; (8001db8 <main+0xb8>)
 8001d34:	f7ff f9c2 	bl	80010bc <MPU6050_Init>
  MotorEncoder LMotor(&htim1, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001d38:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	2200      	movs	r2, #0
 8001d40:	491e      	ldr	r1, [pc, #120]	; (8001dbc <main+0xbc>)
 8001d42:	f7ff fd8b 	bl	800185c <_ZN12MotorEncoderC1EP17TIM_HandleTypeDeftt>
  MotorEncoder RMotor(&htim2, TIM_CHANNEL_1 ,TIM_CHANNEL_2);
 8001d46:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	491c      	ldr	r1, [pc, #112]	; (8001dc0 <main+0xc0>)
 8001d50:	f7ff fd84 	bl	800185c <_ZN12MotorEncoderC1EP17TIM_HandleTypeDeftt>
  char sentence[50];
  MPU6050_t imu{
 8001d54:	463b      	mov	r3, r7
 8001d56:	2258      	movs	r2, #88	; 0x58
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f005 f8b8 	bl	8006ed0 <memset>
 8001d60:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <main+0xc4>)
 8001d62:	643b      	str	r3, [r7, #64]	; 0x40
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  flash_led();
 8001d64:	f000 f87a 	bl	8001e5c <_Z9flash_ledv>
	  MPU6050_Read_All(&hi2c1, &imu);
 8001d68:	463b      	mov	r3, r7
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4812      	ldr	r0, [pc, #72]	; (8001db8 <main+0xb8>)
 8001d6e:	f7ff f9ff 	bl	8001170 <MPU6050_Read_All>
	  HAL_Delay (100);
 8001d72:	2064      	movs	r0, #100	; 0x64
 8001d74:	f000 ffb2 	bl	8002cdc <HAL_Delay>
	  sprintf(sentence, "Gyro X: %d", (int)imu.Gx);
 8001d78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f7fe fe52 	bl	8000a28 <__aeabi_d2iz>
 8001d84:	4602      	mov	r2, r0
 8001d86:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d8a:	490f      	ldr	r1, [pc, #60]	; (8001dc8 <main+0xc8>)
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f005 f9d7 	bl	8007140 <siprintf>
	  show_string(sentence);
 8001d92:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 f87c 	bl	8001e94 <_Z11show_stringPc>
	  LMotor.setWheelSpeed(-50);
 8001d9c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001da0:	490a      	ldr	r1, [pc, #40]	; (8001dcc <main+0xcc>)
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fdbe 	bl	8001924 <_ZN12MotorEncoder13setWheelSpeedEf>
	  RMotor.setWheelSpeed(-50);
 8001da8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001dac:	4907      	ldr	r1, [pc, #28]	; (8001dcc <main+0xcc>)
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fdb8 	bl	8001924 <_ZN12MotorEncoder13setWheelSpeedEf>
	  flash_led();
 8001db4:	e7d6      	b.n	8001d64 <main+0x64>
 8001db6:	bf00      	nop
 8001db8:	20000174 	.word	0x20000174
 8001dbc:	20000220 	.word	0x20000220
 8001dc0:	20000268 	.word	0x20000268
 8001dc4:	41c80000 	.word	0x41c80000
 8001dc8:	08007828 	.word	0x08007828
 8001dcc:	c2480000 	.word	0xc2480000

08001dd0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b090      	sub	sp, #64	; 0x40
 8001dd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dd6:	f107 0318 	add.w	r3, r7, #24
 8001dda:	2228      	movs	r2, #40	; 0x28
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f005 f876 	bl	8006ed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	609a      	str	r2, [r3, #8]
 8001dee:	60da      	str	r2, [r3, #12]
 8001df0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001df2:	2302      	movs	r3, #2
 8001df4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001df6:	2301      	movs	r3, #1
 8001df8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dfa:	2310      	movs	r3, #16
 8001dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e02:	f107 0318 	add.w	r3, r7, #24
 8001e06:	4618      	mov	r0, r3
 8001e08:	f002 fb5c 	bl	80044c4 <HAL_RCC_OscConfig>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	bf14      	ite	ne
 8001e12:	2301      	movne	r3, #1
 8001e14:	2300      	moveq	r3, #0
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <_Z18SystemClock_Configv+0x50>
  {
    Error_Handler();
 8001e1c:	f000 f856 	bl	8001ecc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e20:	230f      	movs	r3, #15
 8001e22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e34:	1d3b      	adds	r3, r7, #4
 8001e36:	2100      	movs	r1, #0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f002 fdc5 	bl	80049c8 <HAL_RCC_ClockConfig>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	bf14      	ite	ne
 8001e44:	2301      	movne	r3, #1
 8001e46:	2300      	moveq	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 8001e4e:	f000 f83d 	bl	8001ecc <Error_Handler>
  }
}
 8001e52:	bf00      	nop
 8001e54:	3740      	adds	r7, #64	; 0x40
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <_Z9flash_ledv>:

/* USER CODE BEGIN 4 */

void flash_led()
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4 ; i++)
 8001e62:	2300      	movs	r3, #0
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b03      	cmp	r3, #3
 8001e6a:	dc0c      	bgt.n	8001e86 <_Z9flash_ledv+0x2a>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001e6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e70:	4807      	ldr	r0, [pc, #28]	; (8001e90 <_Z9flash_ledv+0x34>)
 8001e72:	f001 fab3 	bl	80033dc <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8001e76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e7a:	f000 ff2f 	bl	8002cdc <HAL_Delay>
	for(int i = 0; i < 4 ; i++)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3301      	adds	r3, #1
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	e7ef      	b.n	8001e66 <_Z9flash_ledv+0xa>
	}
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40011000 	.word	0x40011000

08001e94 <_Z11show_stringPc>:

void show_string(char* sentence)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	uint8_t y = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	73fb      	strb	r3, [r7, #15]
	ssd1306_Fill(White);
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f000 fd25 	bl	80028f0 <ssd1306_Fill>
	ssd1306_SetCursor(2, y);
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	2002      	movs	r0, #2
 8001eac:	f000 fe6a 	bl	8002b84 <ssd1306_SetCursor>
	ssd1306_WriteString(sentence ,Font_7x10 ,Black);
 8001eb0:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <_Z11show_stringPc+0x34>)
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	ca06      	ldmia	r2, {r1, r2}
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 fe3e 	bl	8002b38 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001ebc:	f000 fd3a 	bl	8002934 <ssd1306_UpdateScreen>
}
 8001ec0:	bf00      	nop
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000094 	.word	0x20000094

08001ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed0:	b672      	cpsid	i
}
 8001ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <Error_Handler+0x8>
	...

08001ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <HAL_MspInit+0x5c>)
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	4a14      	ldr	r2, [pc, #80]	; (8001f34 <HAL_MspInit+0x5c>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6193      	str	r3, [r2, #24]
 8001eea:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <HAL_MspInit+0x5c>)
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <HAL_MspInit+0x5c>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	4a0e      	ldr	r2, [pc, #56]	; (8001f34 <HAL_MspInit+0x5c>)
 8001efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f00:	61d3      	str	r3, [r2, #28]
 8001f02:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <HAL_MspInit+0x5c>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <HAL_MspInit+0x60>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <HAL_MspInit+0x60>)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40010000 	.word	0x40010000

08001f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <NMI_Handler+0x4>

08001f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f46:	e7fe      	b.n	8001f46 <HardFault_Handler+0x4>

08001f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <MemManage_Handler+0x4>

08001f4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f52:	e7fe      	b.n	8001f52 <BusFault_Handler+0x4>

08001f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <UsageFault_Handler+0x4>

08001f5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr

08001f66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr

08001f72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr

08001f7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f82:	f000 fe8f 	bl	8002ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f90:	4802      	ldr	r0, [pc, #8]	; (8001f9c <USART1_IRQHandler+0x10>)
 8001f92:	f003 fecb 	bl	8005d2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000340 	.word	0x20000340

08001fa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return 1;
 8001fa4:	2301      	movs	r3, #1
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr

08001fae <_kill>:

int _kill(int pid, int sig)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fb8:	f004 ff28 	bl	8006e0c <__errno>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2216      	movs	r2, #22
 8001fc0:	601a      	str	r2, [r3, #0]
  return -1;
 8001fc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <_exit>:

void _exit (int status)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fd6:	f04f 31ff 	mov.w	r1, #4294967295
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff ffe7 	bl	8001fae <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fe0:	e7fe      	b.n	8001fe0 <_exit+0x12>
	...

08001fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fec:	4a14      	ldr	r2, [pc, #80]	; (8002040 <_sbrk+0x5c>)
 8001fee:	4b15      	ldr	r3, [pc, #84]	; (8002044 <_sbrk+0x60>)
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ff8:	4b13      	ldr	r3, [pc, #76]	; (8002048 <_sbrk+0x64>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d102      	bne.n	8002006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002000:	4b11      	ldr	r3, [pc, #68]	; (8002048 <_sbrk+0x64>)
 8002002:	4a12      	ldr	r2, [pc, #72]	; (800204c <_sbrk+0x68>)
 8002004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002006:	4b10      	ldr	r3, [pc, #64]	; (8002048 <_sbrk+0x64>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	429a      	cmp	r2, r3
 8002012:	d207      	bcs.n	8002024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002014:	f004 fefa 	bl	8006e0c <__errno>
 8002018:	4603      	mov	r3, r0
 800201a:	220c      	movs	r2, #12
 800201c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800201e:	f04f 33ff 	mov.w	r3, #4294967295
 8002022:	e009      	b.n	8002038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002024:	4b08      	ldr	r3, [pc, #32]	; (8002048 <_sbrk+0x64>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800202a:	4b07      	ldr	r3, [pc, #28]	; (8002048 <_sbrk+0x64>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	4a05      	ldr	r2, [pc, #20]	; (8002048 <_sbrk+0x64>)
 8002034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002036:	68fb      	ldr	r3, [r7, #12]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20005000 	.word	0x20005000
 8002044:	00000400 	.word	0x00000400
 8002048:	2000021c 	.word	0x2000021c
 800204c:	200007a8 	.word	0x200007a8

08002050 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b096      	sub	sp, #88	; 0x58
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002062:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	609a      	str	r2, [r3, #8]
 800206e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002070:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800207a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]
 8002084:	609a      	str	r2, [r3, #8]
 8002086:	60da      	str	r2, [r3, #12]
 8002088:	611a      	str	r2, [r3, #16]
 800208a:	615a      	str	r2, [r3, #20]
 800208c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800208e:	1d3b      	adds	r3, r7, #4
 8002090:	2220      	movs	r2, #32
 8002092:	2100      	movs	r1, #0
 8002094:	4618      	mov	r0, r3
 8002096:	f004 ff1b 	bl	8006ed0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800209a:	4b44      	ldr	r3, [pc, #272]	; (80021ac <MX_TIM1_Init+0x150>)
 800209c:	4a44      	ldr	r2, [pc, #272]	; (80021b0 <MX_TIM1_Init+0x154>)
 800209e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80020a0:	4b42      	ldr	r3, [pc, #264]	; (80021ac <MX_TIM1_Init+0x150>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a6:	4b41      	ldr	r3, [pc, #260]	; (80021ac <MX_TIM1_Init+0x150>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 800;
 80020ac:	4b3f      	ldr	r3, [pc, #252]	; (80021ac <MX_TIM1_Init+0x150>)
 80020ae:	f44f 7248 	mov.w	r2, #800	; 0x320
 80020b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b4:	4b3d      	ldr	r3, [pc, #244]	; (80021ac <MX_TIM1_Init+0x150>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020ba:	4b3c      	ldr	r3, [pc, #240]	; (80021ac <MX_TIM1_Init+0x150>)
 80020bc:	2200      	movs	r2, #0
 80020be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c0:	4b3a      	ldr	r3, [pc, #232]	; (80021ac <MX_TIM1_Init+0x150>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020c6:	4839      	ldr	r0, [pc, #228]	; (80021ac <MX_TIM1_Init+0x150>)
 80020c8:	f002 fe0c 	bl	8004ce4 <HAL_TIM_Base_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80020d2:	f7ff fefb 	bl	8001ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020e0:	4619      	mov	r1, r3
 80020e2:	4832      	ldr	r0, [pc, #200]	; (80021ac <MX_TIM1_Init+0x150>)
 80020e4:	f003 f8be 	bl	8005264 <HAL_TIM_ConfigClockSource>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80020ee:	f7ff feed 	bl	8001ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020f2:	482e      	ldr	r0, [pc, #184]	; (80021ac <MX_TIM1_Init+0x150>)
 80020f4:	f002 fe9d 	bl	8004e32 <HAL_TIM_PWM_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80020fe:	f7ff fee5 	bl	8001ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002106:	2300      	movs	r3, #0
 8002108:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800210a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800210e:	4619      	mov	r1, r3
 8002110:	4826      	ldr	r0, [pc, #152]	; (80021ac <MX_TIM1_Init+0x150>)
 8002112:	f003 fce7 	bl	8005ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800211c:	f7ff fed6 	bl	8001ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002120:	2360      	movs	r3, #96	; 0x60
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002128:	2300      	movs	r3, #0
 800212a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800212c:	2300      	movs	r3, #0
 800212e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002130:	2300      	movs	r3, #0
 8002132:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002134:	2300      	movs	r3, #0
 8002136:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002138:	2300      	movs	r3, #0
 800213a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800213c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002140:	2200      	movs	r2, #0
 8002142:	4619      	mov	r1, r3
 8002144:	4819      	ldr	r0, [pc, #100]	; (80021ac <MX_TIM1_Init+0x150>)
 8002146:	f002 ffcb 	bl	80050e0 <HAL_TIM_PWM_ConfigChannel>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002150:	f7ff febc 	bl	8001ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002158:	2204      	movs	r2, #4
 800215a:	4619      	mov	r1, r3
 800215c:	4813      	ldr	r0, [pc, #76]	; (80021ac <MX_TIM1_Init+0x150>)
 800215e:	f002 ffbf 	bl	80050e0 <HAL_TIM_PWM_ConfigChannel>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002168:	f7ff feb0 	bl	8001ecc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002170:	2300      	movs	r3, #0
 8002172:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002180:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002184:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	4619      	mov	r1, r3
 800218e:	4807      	ldr	r0, [pc, #28]	; (80021ac <MX_TIM1_Init+0x150>)
 8002190:	f003 fd06 	bl	8005ba0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800219a:	f7ff fe97 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800219e:	4803      	ldr	r0, [pc, #12]	; (80021ac <MX_TIM1_Init+0x150>)
 80021a0:	f000 fa00 	bl	80025a4 <HAL_TIM_MspPostInit>

}
 80021a4:	bf00      	nop
 80021a6:	3758      	adds	r7, #88	; 0x58
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000220 	.word	0x20000220
 80021b0:	40012c00 	.word	0x40012c00

080021b4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08e      	sub	sp, #56	; 0x38
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c8:	f107 0320 	add.w	r3, r7, #32
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021d2:	1d3b      	adds	r3, r7, #4
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]
 80021e0:	615a      	str	r2, [r3, #20]
 80021e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021e4:	4b32      	ldr	r3, [pc, #200]	; (80022b0 <MX_TIM2_Init+0xfc>)
 80021e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021ec:	4b30      	ldr	r3, [pc, #192]	; (80022b0 <MX_TIM2_Init+0xfc>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f2:	4b2f      	ldr	r3, [pc, #188]	; (80022b0 <MX_TIM2_Init+0xfc>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 800;
 80021f8:	4b2d      	ldr	r3, [pc, #180]	; (80022b0 <MX_TIM2_Init+0xfc>)
 80021fa:	f44f 7248 	mov.w	r2, #800	; 0x320
 80021fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002200:	4b2b      	ldr	r3, [pc, #172]	; (80022b0 <MX_TIM2_Init+0xfc>)
 8002202:	2200      	movs	r2, #0
 8002204:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002206:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <MX_TIM2_Init+0xfc>)
 8002208:	2200      	movs	r2, #0
 800220a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800220c:	4828      	ldr	r0, [pc, #160]	; (80022b0 <MX_TIM2_Init+0xfc>)
 800220e:	f002 fd69 	bl	8004ce4 <HAL_TIM_Base_Init>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002218:	f7ff fe58 	bl	8001ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800221c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002220:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002222:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002226:	4619      	mov	r1, r3
 8002228:	4821      	ldr	r0, [pc, #132]	; (80022b0 <MX_TIM2_Init+0xfc>)
 800222a:	f003 f81b 	bl	8005264 <HAL_TIM_ConfigClockSource>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002234:	f7ff fe4a 	bl	8001ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002238:	481d      	ldr	r0, [pc, #116]	; (80022b0 <MX_TIM2_Init+0xfc>)
 800223a:	f002 fdfa 	bl	8004e32 <HAL_TIM_PWM_Init>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002244:	f7ff fe42 	bl	8001ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002248:	2300      	movs	r3, #0
 800224a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800224c:	2300      	movs	r3, #0
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002250:	f107 0320 	add.w	r3, r7, #32
 8002254:	4619      	mov	r1, r3
 8002256:	4816      	ldr	r0, [pc, #88]	; (80022b0 <MX_TIM2_Init+0xfc>)
 8002258:	f003 fc44 	bl	8005ae4 <HAL_TIMEx_MasterConfigSynchronization>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002262:	f7ff fe33 	bl	8001ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002266:	2360      	movs	r3, #96	; 0x60
 8002268:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	2200      	movs	r2, #0
 800227a:	4619      	mov	r1, r3
 800227c:	480c      	ldr	r0, [pc, #48]	; (80022b0 <MX_TIM2_Init+0xfc>)
 800227e:	f002 ff2f 	bl	80050e0 <HAL_TIM_PWM_ConfigChannel>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002288:	f7ff fe20 	bl	8001ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800228c:	1d3b      	adds	r3, r7, #4
 800228e:	2204      	movs	r2, #4
 8002290:	4619      	mov	r1, r3
 8002292:	4807      	ldr	r0, [pc, #28]	; (80022b0 <MX_TIM2_Init+0xfc>)
 8002294:	f002 ff24 	bl	80050e0 <HAL_TIM_PWM_ConfigChannel>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800229e:	f7ff fe15 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80022a2:	4803      	ldr	r0, [pc, #12]	; (80022b0 <MX_TIM2_Init+0xfc>)
 80022a4:	f000 f97e 	bl	80025a4 <HAL_TIM_MspPostInit>

}
 80022a8:	bf00      	nop
 80022aa:	3738      	adds	r7, #56	; 0x38
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20000268 	.word	0x20000268

080022b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b092      	sub	sp, #72	; 0x48
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	609a      	str	r2, [r3, #8]
 80022c6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80022c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d8:	f107 031c 	add.w	r3, r7, #28
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022e2:	463b      	mov	r3, r7
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	611a      	str	r2, [r3, #16]
 80022f0:	615a      	str	r2, [r3, #20]
 80022f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022f4:	4b38      	ldr	r3, [pc, #224]	; (80023d8 <MX_TIM3_Init+0x124>)
 80022f6:	4a39      	ldr	r2, [pc, #228]	; (80023dc <MX_TIM3_Init+0x128>)
 80022f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80022fa:	4b37      	ldr	r3, [pc, #220]	; (80023d8 <MX_TIM3_Init+0x124>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002300:	4b35      	ldr	r3, [pc, #212]	; (80023d8 <MX_TIM3_Init+0x124>)
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002306:	4b34      	ldr	r3, [pc, #208]	; (80023d8 <MX_TIM3_Init+0x124>)
 8002308:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800230c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800230e:	4b32      	ldr	r3, [pc, #200]	; (80023d8 <MX_TIM3_Init+0x124>)
 8002310:	2200      	movs	r2, #0
 8002312:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002314:	4b30      	ldr	r3, [pc, #192]	; (80023d8 <MX_TIM3_Init+0x124>)
 8002316:	2200      	movs	r2, #0
 8002318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800231a:	482f      	ldr	r0, [pc, #188]	; (80023d8 <MX_TIM3_Init+0x124>)
 800231c:	f002 fce2 	bl	8004ce4 <HAL_TIM_Base_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002326:	f7ff fdd1 	bl	8001ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800232a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800232e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002330:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002334:	4619      	mov	r1, r3
 8002336:	4828      	ldr	r0, [pc, #160]	; (80023d8 <MX_TIM3_Init+0x124>)
 8002338:	f002 ff94 	bl	8005264 <HAL_TIM_ConfigClockSource>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002342:	f7ff fdc3 	bl	8001ecc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002346:	4824      	ldr	r0, [pc, #144]	; (80023d8 <MX_TIM3_Init+0x124>)
 8002348:	f002 fd1b 	bl	8004d82 <HAL_TIM_OC_Init>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8002352:	f7ff fdbb 	bl	8001ecc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8002356:	2300      	movs	r3, #0
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800235a:	2310      	movs	r3, #16
 800235c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800235e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002362:	4619      	mov	r1, r3
 8002364:	481c      	ldr	r0, [pc, #112]	; (80023d8 <MX_TIM3_Init+0x124>)
 8002366:	f003 f844 	bl	80053f2 <HAL_TIM_SlaveConfigSynchro>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8002370:	f7ff fdac 	bl	8001ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002374:	2300      	movs	r3, #0
 8002376:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002378:	2300      	movs	r3, #0
 800237a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800237c:	f107 031c 	add.w	r3, r7, #28
 8002380:	4619      	mov	r1, r3
 8002382:	4815      	ldr	r0, [pc, #84]	; (80023d8 <MX_TIM3_Init+0x124>)
 8002384:	f003 fbae 	bl	8005ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 800238e:	f7ff fd9d 	bl	8001ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002392:	2300      	movs	r3, #0
 8002394:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800239a:	2300      	movs	r3, #0
 800239c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800239e:	2300      	movs	r3, #0
 80023a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023a2:	463b      	mov	r3, r7
 80023a4:	2200      	movs	r2, #0
 80023a6:	4619      	mov	r1, r3
 80023a8:	480b      	ldr	r0, [pc, #44]	; (80023d8 <MX_TIM3_Init+0x124>)
 80023aa:	f002 fe3d 	bl	8005028 <HAL_TIM_OC_ConfigChannel>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80023b4:	f7ff fd8a 	bl	8001ecc <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023b8:	463b      	mov	r3, r7
 80023ba:	2204      	movs	r2, #4
 80023bc:	4619      	mov	r1, r3
 80023be:	4806      	ldr	r0, [pc, #24]	; (80023d8 <MX_TIM3_Init+0x124>)
 80023c0:	f002 fe32 	bl	8005028 <HAL_TIM_OC_ConfigChannel>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 80023ca:	f7ff fd7f 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80023ce:	bf00      	nop
 80023d0:	3748      	adds	r7, #72	; 0x48
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	200002b0 	.word	0x200002b0
 80023dc:	40000400 	.word	0x40000400

080023e0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b092      	sub	sp, #72	; 0x48
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80023f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002404:	f107 031c 	add.w	r3, r7, #28
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800240e:	463b      	mov	r3, r7
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
 800241c:	615a      	str	r2, [r3, #20]
 800241e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002420:	4b32      	ldr	r3, [pc, #200]	; (80024ec <MX_TIM4_Init+0x10c>)
 8002422:	4a33      	ldr	r2, [pc, #204]	; (80024f0 <MX_TIM4_Init+0x110>)
 8002424:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002426:	4b31      	ldr	r3, [pc, #196]	; (80024ec <MX_TIM4_Init+0x10c>)
 8002428:	2200      	movs	r2, #0
 800242a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800242c:	4b2f      	ldr	r3, [pc, #188]	; (80024ec <MX_TIM4_Init+0x10c>)
 800242e:	2200      	movs	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002432:	4b2e      	ldr	r3, [pc, #184]	; (80024ec <MX_TIM4_Init+0x10c>)
 8002434:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002438:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800243a:	4b2c      	ldr	r3, [pc, #176]	; (80024ec <MX_TIM4_Init+0x10c>)
 800243c:	2200      	movs	r2, #0
 800243e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002440:	4b2a      	ldr	r3, [pc, #168]	; (80024ec <MX_TIM4_Init+0x10c>)
 8002442:	2200      	movs	r2, #0
 8002444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002446:	4829      	ldr	r0, [pc, #164]	; (80024ec <MX_TIM4_Init+0x10c>)
 8002448:	f002 fc4c 	bl	8004ce4 <HAL_TIM_Base_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002452:	f7ff fd3b 	bl	8001ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800245a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800245c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002460:	4619      	mov	r1, r3
 8002462:	4822      	ldr	r0, [pc, #136]	; (80024ec <MX_TIM4_Init+0x10c>)
 8002464:	f002 fefe 	bl	8005264 <HAL_TIM_ConfigClockSource>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800246e:	f7ff fd2d 	bl	8001ecc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002472:	481e      	ldr	r0, [pc, #120]	; (80024ec <MX_TIM4_Init+0x10c>)
 8002474:	f002 fc85 	bl	8004d82 <HAL_TIM_OC_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 800247e:	f7ff fd25 	bl	8001ecc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8002482:	2300      	movs	r3, #0
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8002486:	2320      	movs	r3, #32
 8002488:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800248a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800248e:	4619      	mov	r1, r3
 8002490:	4816      	ldr	r0, [pc, #88]	; (80024ec <MX_TIM4_Init+0x10c>)
 8002492:	f002 ffae 	bl	80053f2 <HAL_TIM_SlaveConfigSynchro>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 800249c:	f7ff fd16 	bl	8001ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a0:	2300      	movs	r3, #0
 80024a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024a4:	2300      	movs	r3, #0
 80024a6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024a8:	f107 031c 	add.w	r3, r7, #28
 80024ac:	4619      	mov	r1, r3
 80024ae:	480f      	ldr	r0, [pc, #60]	; (80024ec <MX_TIM4_Init+0x10c>)
 80024b0:	f003 fb18 	bl	8005ae4 <HAL_TIMEx_MasterConfigSynchronization>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 80024ba:	f7ff fd07 	bl	8001ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80024be:	2300      	movs	r3, #0
 80024c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024c6:	2300      	movs	r3, #0
 80024c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024ce:	463b      	mov	r3, r7
 80024d0:	2200      	movs	r2, #0
 80024d2:	4619      	mov	r1, r3
 80024d4:	4805      	ldr	r0, [pc, #20]	; (80024ec <MX_TIM4_Init+0x10c>)
 80024d6:	f002 fda7 	bl	8005028 <HAL_TIM_OC_ConfigChannel>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 80024e0:	f7ff fcf4 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80024e4:	bf00      	nop
 80024e6:	3748      	adds	r7, #72	; 0x48
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	200002f8 	.word	0x200002f8
 80024f0:	40000800 	.word	0x40000800

080024f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a24      	ldr	r2, [pc, #144]	; (8002594 <HAL_TIM_Base_MspInit+0xa0>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d10c      	bne.n	8002520 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002506:	4b24      	ldr	r3, [pc, #144]	; (8002598 <HAL_TIM_Base_MspInit+0xa4>)
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	4a23      	ldr	r2, [pc, #140]	; (8002598 <HAL_TIM_Base_MspInit+0xa4>)
 800250c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002510:	6193      	str	r3, [r2, #24]
 8002512:	4b21      	ldr	r3, [pc, #132]	; (8002598 <HAL_TIM_Base_MspInit+0xa4>)
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800251e:	e034      	b.n	800258a <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002528:	d10c      	bne.n	8002544 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800252a:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <HAL_TIM_Base_MspInit+0xa4>)
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	4a1a      	ldr	r2, [pc, #104]	; (8002598 <HAL_TIM_Base_MspInit+0xa4>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	61d3      	str	r3, [r2, #28]
 8002536:	4b18      	ldr	r3, [pc, #96]	; (8002598 <HAL_TIM_Base_MspInit+0xa4>)
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	693b      	ldr	r3, [r7, #16]
}
 8002542:	e022      	b.n	800258a <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM3)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a14      	ldr	r2, [pc, #80]	; (800259c <HAL_TIM_Base_MspInit+0xa8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d10c      	bne.n	8002568 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800254e:	4b12      	ldr	r3, [pc, #72]	; (8002598 <HAL_TIM_Base_MspInit+0xa4>)
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	4a11      	ldr	r2, [pc, #68]	; (8002598 <HAL_TIM_Base_MspInit+0xa4>)
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	61d3      	str	r3, [r2, #28]
 800255a:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <HAL_TIM_Base_MspInit+0xa4>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
}
 8002566:	e010      	b.n	800258a <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM4)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a0c      	ldr	r2, [pc, #48]	; (80025a0 <HAL_TIM_Base_MspInit+0xac>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d10b      	bne.n	800258a <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <HAL_TIM_Base_MspInit+0xa4>)
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	4a08      	ldr	r2, [pc, #32]	; (8002598 <HAL_TIM_Base_MspInit+0xa4>)
 8002578:	f043 0304 	orr.w	r3, r3, #4
 800257c:	61d3      	str	r3, [r2, #28]
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_TIM_Base_MspInit+0xa4>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]
}
 800258a:	bf00      	nop
 800258c:	371c      	adds	r7, #28
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr
 8002594:	40012c00 	.word	0x40012c00
 8002598:	40021000 	.word	0x40021000
 800259c:	40000400 	.word	0x40000400
 80025a0:	40000800 	.word	0x40000800

080025a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ac:	f107 0310 	add.w	r3, r7, #16
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a1f      	ldr	r2, [pc, #124]	; (800263c <HAL_TIM_MspPostInit+0x98>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d119      	bne.n	80025f8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c4:	4b1e      	ldr	r3, [pc, #120]	; (8002640 <HAL_TIM_MspPostInit+0x9c>)
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	4a1d      	ldr	r2, [pc, #116]	; (8002640 <HAL_TIM_MspPostInit+0x9c>)
 80025ca:	f043 0304 	orr.w	r3, r3, #4
 80025ce:	6193      	str	r3, [r2, #24]
 80025d0:	4b1b      	ldr	r3, [pc, #108]	; (8002640 <HAL_TIM_MspPostInit+0x9c>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e2:	2302      	movs	r3, #2
 80025e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e6:	2302      	movs	r3, #2
 80025e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ea:	f107 0310 	add.w	r3, r7, #16
 80025ee:	4619      	mov	r1, r3
 80025f0:	4814      	ldr	r0, [pc, #80]	; (8002644 <HAL_TIM_MspPostInit+0xa0>)
 80025f2:	f000 fd57 	bl	80030a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80025f6:	e01c      	b.n	8002632 <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM2)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002600:	d117      	bne.n	8002632 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002602:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <HAL_TIM_MspPostInit+0x9c>)
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	4a0e      	ldr	r2, [pc, #56]	; (8002640 <HAL_TIM_MspPostInit+0x9c>)
 8002608:	f043 0304 	orr.w	r3, r3, #4
 800260c:	6193      	str	r3, [r2, #24]
 800260e:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <HAL_TIM_MspPostInit+0x9c>)
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800261a:	2303      	movs	r3, #3
 800261c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261e:	2302      	movs	r3, #2
 8002620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002622:	2302      	movs	r3, #2
 8002624:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002626:	f107 0310 	add.w	r3, r7, #16
 800262a:	4619      	mov	r1, r3
 800262c:	4805      	ldr	r0, [pc, #20]	; (8002644 <HAL_TIM_MspPostInit+0xa0>)
 800262e:	f000 fd39 	bl	80030a4 <HAL_GPIO_Init>
}
 8002632:	bf00      	nop
 8002634:	3720      	adds	r7, #32
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40012c00 	.word	0x40012c00
 8002640:	40021000 	.word	0x40021000
 8002644:	40010800 	.word	0x40010800

08002648 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800264c:	4b11      	ldr	r3, [pc, #68]	; (8002694 <MX_USART1_UART_Init+0x4c>)
 800264e:	4a12      	ldr	r2, [pc, #72]	; (8002698 <MX_USART1_UART_Init+0x50>)
 8002650:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <MX_USART1_UART_Init+0x4c>)
 8002654:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002658:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800265a:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <MX_USART1_UART_Init+0x4c>)
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002660:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <MX_USART1_UART_Init+0x4c>)
 8002662:	2200      	movs	r2, #0
 8002664:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002666:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <MX_USART1_UART_Init+0x4c>)
 8002668:	2200      	movs	r2, #0
 800266a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800266c:	4b09      	ldr	r3, [pc, #36]	; (8002694 <MX_USART1_UART_Init+0x4c>)
 800266e:	220c      	movs	r2, #12
 8002670:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002672:	4b08      	ldr	r3, [pc, #32]	; (8002694 <MX_USART1_UART_Init+0x4c>)
 8002674:	2200      	movs	r2, #0
 8002676:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002678:	4b06      	ldr	r3, [pc, #24]	; (8002694 <MX_USART1_UART_Init+0x4c>)
 800267a:	2200      	movs	r2, #0
 800267c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800267e:	4805      	ldr	r0, [pc, #20]	; (8002694 <MX_USART1_UART_Init+0x4c>)
 8002680:	f003 fadf 	bl	8005c42 <HAL_UART_Init>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800268a:	f7ff fc1f 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20000340 	.word	0x20000340
 8002698:	40013800 	.word	0x40013800

0800269c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08a      	sub	sp, #40	; 0x28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	f107 0314 	add.w	r3, r7, #20
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a26      	ldr	r2, [pc, #152]	; (8002750 <HAL_UART_MspInit+0xb4>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d145      	bne.n	8002748 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026bc:	4b25      	ldr	r3, [pc, #148]	; (8002754 <HAL_UART_MspInit+0xb8>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	4a24      	ldr	r2, [pc, #144]	; (8002754 <HAL_UART_MspInit+0xb8>)
 80026c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c6:	6193      	str	r3, [r2, #24]
 80026c8:	4b22      	ldr	r3, [pc, #136]	; (8002754 <HAL_UART_MspInit+0xb8>)
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d4:	4b1f      	ldr	r3, [pc, #124]	; (8002754 <HAL_UART_MspInit+0xb8>)
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	4a1e      	ldr	r2, [pc, #120]	; (8002754 <HAL_UART_MspInit+0xb8>)
 80026da:	f043 0308 	orr.w	r3, r3, #8
 80026de:	6193      	str	r3, [r2, #24]
 80026e0:	4b1c      	ldr	r3, [pc, #112]	; (8002754 <HAL_UART_MspInit+0xb8>)
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026ec:	2340      	movs	r3, #64	; 0x40
 80026ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f0:	2302      	movs	r3, #2
 80026f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026f4:	2303      	movs	r3, #3
 80026f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	4619      	mov	r1, r3
 80026fe:	4816      	ldr	r0, [pc, #88]	; (8002758 <HAL_UART_MspInit+0xbc>)
 8002700:	f000 fcd0 	bl	80030a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002704:	2380      	movs	r3, #128	; 0x80
 8002706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002708:	2300      	movs	r3, #0
 800270a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002710:	f107 0314 	add.w	r3, r7, #20
 8002714:	4619      	mov	r1, r3
 8002716:	4810      	ldr	r0, [pc, #64]	; (8002758 <HAL_UART_MspInit+0xbc>)
 8002718:	f000 fcc4 	bl	80030a4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800271c:	4b0f      	ldr	r3, [pc, #60]	; (800275c <HAL_UART_MspInit+0xc0>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	f043 0304 	orr.w	r3, r3, #4
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
 8002732:	4a0a      	ldr	r2, [pc, #40]	; (800275c <HAL_UART_MspInit+0xc0>)
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002738:	2200      	movs	r2, #0
 800273a:	2100      	movs	r1, #0
 800273c:	2025      	movs	r0, #37	; 0x25
 800273e:	f000 fbc8 	bl	8002ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002742:	2025      	movs	r0, #37	; 0x25
 8002744:	f000 fbe1 	bl	8002f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002748:	bf00      	nop
 800274a:	3728      	adds	r7, #40	; 0x28
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40013800 	.word	0x40013800
 8002754:	40021000 	.word	0x40021000
 8002758:	40010c00 	.word	0x40010c00
 800275c:	40010000 	.word	0x40010000

08002760 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002760:	f7ff fc76 	bl	8002050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002764:	480b      	ldr	r0, [pc, #44]	; (8002794 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002766:	490c      	ldr	r1, [pc, #48]	; (8002798 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002768:	4a0c      	ldr	r2, [pc, #48]	; (800279c <LoopFillZerobss+0x16>)
  movs r3, #0
 800276a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800276c:	e002      	b.n	8002774 <LoopCopyDataInit>

0800276e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800276e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002772:	3304      	adds	r3, #4

08002774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002778:	d3f9      	bcc.n	800276e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800277a:	4a09      	ldr	r2, [pc, #36]	; (80027a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800277c:	4c09      	ldr	r4, [pc, #36]	; (80027a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800277e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002780:	e001      	b.n	8002786 <LoopFillZerobss>

08002782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002784:	3204      	adds	r2, #4

08002786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002788:	d3fb      	bcc.n	8002782 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800278a:	f004 fb45 	bl	8006e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800278e:	f7ff fab7 	bl	8001d00 <main>
  bx lr
 8002792:	4770      	bx	lr
  ldr r0, =_sdata
 8002794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002798:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 800279c:	08008084 	.word	0x08008084
  ldr r2, =_sbss
 80027a0:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 80027a4:	200007a8 	.word	0x200007a8

080027a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027a8:	e7fe      	b.n	80027a8 <ADC1_2_IRQHandler>

080027aa <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80027aa:	b480      	push	{r7}
 80027ac:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80027ae:	bf00      	nop
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr
	...

080027b8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af04      	add	r7, sp, #16
 80027be:	4603      	mov	r3, r0
 80027c0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80027c2:	f04f 33ff 	mov.w	r3, #4294967295
 80027c6:	9302      	str	r3, [sp, #8]
 80027c8:	2301      	movs	r3, #1
 80027ca:	9301      	str	r3, [sp, #4]
 80027cc:	1dfb      	adds	r3, r7, #7
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	2301      	movs	r3, #1
 80027d2:	2200      	movs	r2, #0
 80027d4:	2178      	movs	r1, #120	; 0x78
 80027d6:	4803      	ldr	r0, [pc, #12]	; (80027e4 <ssd1306_WriteCommand+0x2c>)
 80027d8:	f000 ff5e 	bl	8003698 <HAL_I2C_Mem_Write>
}
 80027dc:	bf00      	nop
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	200001c8 	.word	0x200001c8

080027e8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af04      	add	r7, sp, #16
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	f04f 32ff 	mov.w	r2, #4294967295
 80027fa:	9202      	str	r2, [sp, #8]
 80027fc:	9301      	str	r3, [sp, #4]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	2301      	movs	r3, #1
 8002804:	2240      	movs	r2, #64	; 0x40
 8002806:	2178      	movs	r1, #120	; 0x78
 8002808:	4803      	ldr	r0, [pc, #12]	; (8002818 <ssd1306_WriteData+0x30>)
 800280a:	f000 ff45 	bl	8003698 <HAL_I2C_Mem_Write>
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	200001c8 	.word	0x200001c8

0800281c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002820:	f7ff ffc3 	bl	80027aa <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002824:	2064      	movs	r0, #100	; 0x64
 8002826:	f000 fa59 	bl	8002cdc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800282a:	2000      	movs	r0, #0
 800282c:	f000 f9d6 	bl	8002bdc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002830:	2020      	movs	r0, #32
 8002832:	f7ff ffc1 	bl	80027b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002836:	2000      	movs	r0, #0
 8002838:	f7ff ffbe 	bl	80027b8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800283c:	20b0      	movs	r0, #176	; 0xb0
 800283e:	f7ff ffbb 	bl	80027b8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002842:	20c8      	movs	r0, #200	; 0xc8
 8002844:	f7ff ffb8 	bl	80027b8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002848:	2000      	movs	r0, #0
 800284a:	f7ff ffb5 	bl	80027b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800284e:	2010      	movs	r0, #16
 8002850:	f7ff ffb2 	bl	80027b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002854:	2040      	movs	r0, #64	; 0x40
 8002856:	f7ff ffaf 	bl	80027b8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800285a:	20ff      	movs	r0, #255	; 0xff
 800285c:	f000 f9aa 	bl	8002bb4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002860:	20a1      	movs	r0, #161	; 0xa1
 8002862:	f7ff ffa9 	bl	80027b8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002866:	20a6      	movs	r0, #166	; 0xa6
 8002868:	f7ff ffa6 	bl	80027b8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800286c:	20a8      	movs	r0, #168	; 0xa8
 800286e:	f7ff ffa3 	bl	80027b8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002872:	203f      	movs	r0, #63	; 0x3f
 8002874:	f7ff ffa0 	bl	80027b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002878:	20a4      	movs	r0, #164	; 0xa4
 800287a:	f7ff ff9d 	bl	80027b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800287e:	20d3      	movs	r0, #211	; 0xd3
 8002880:	f7ff ff9a 	bl	80027b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002884:	2000      	movs	r0, #0
 8002886:	f7ff ff97 	bl	80027b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800288a:	20d5      	movs	r0, #213	; 0xd5
 800288c:	f7ff ff94 	bl	80027b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002890:	20f0      	movs	r0, #240	; 0xf0
 8002892:	f7ff ff91 	bl	80027b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002896:	20d9      	movs	r0, #217	; 0xd9
 8002898:	f7ff ff8e 	bl	80027b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800289c:	2022      	movs	r0, #34	; 0x22
 800289e:	f7ff ff8b 	bl	80027b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80028a2:	20da      	movs	r0, #218	; 0xda
 80028a4:	f7ff ff88 	bl	80027b8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80028a8:	2012      	movs	r0, #18
 80028aa:	f7ff ff85 	bl	80027b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80028ae:	20db      	movs	r0, #219	; 0xdb
 80028b0:	f7ff ff82 	bl	80027b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80028b4:	2020      	movs	r0, #32
 80028b6:	f7ff ff7f 	bl	80027b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80028ba:	208d      	movs	r0, #141	; 0x8d
 80028bc:	f7ff ff7c 	bl	80027b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80028c0:	2014      	movs	r0, #20
 80028c2:	f7ff ff79 	bl	80027b8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80028c6:	2001      	movs	r0, #1
 80028c8:	f000 f988 	bl	8002bdc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80028cc:	2000      	movs	r0, #0
 80028ce:	f000 f80f 	bl	80028f0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80028d2:	f000 f82f 	bl	8002934 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80028d6:	4b05      	ldr	r3, [pc, #20]	; (80028ec <ssd1306_Init+0xd0>)
 80028d8:	2200      	movs	r2, #0
 80028da:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80028dc:	4b03      	ldr	r3, [pc, #12]	; (80028ec <ssd1306_Init+0xd0>)
 80028de:	2200      	movs	r2, #0
 80028e0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80028e2:	4b02      	ldr	r3, [pc, #8]	; (80028ec <ssd1306_Init+0xd0>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	711a      	strb	r2, [r3, #4]
}
 80028e8:	bf00      	nop
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000788 	.word	0x20000788

080028f0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80028fa:	2300      	movs	r3, #0
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	e00d      	b.n	800291c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <ssd1306_Fill+0x1a>
 8002906:	2100      	movs	r1, #0
 8002908:	e000      	b.n	800290c <ssd1306_Fill+0x1c>
 800290a:	21ff      	movs	r1, #255	; 0xff
 800290c:	4a08      	ldr	r2, [pc, #32]	; (8002930 <ssd1306_Fill+0x40>)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4413      	add	r3, r2
 8002912:	460a      	mov	r2, r1
 8002914:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	3301      	adds	r3, #1
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002922:	d3ed      	bcc.n	8002900 <ssd1306_Fill+0x10>
    }
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr
 8002930:	20000388 	.word	0x20000388

08002934 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800293a:	2300      	movs	r3, #0
 800293c:	71fb      	strb	r3, [r7, #7]
 800293e:	e016      	b.n	800296e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	3b50      	subs	r3, #80	; 0x50
 8002944:	b2db      	uxtb	r3, r3
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff ff36 	bl	80027b8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800294c:	2000      	movs	r0, #0
 800294e:	f7ff ff33 	bl	80027b8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002952:	2010      	movs	r0, #16
 8002954:	f7ff ff30 	bl	80027b8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002958:	79fb      	ldrb	r3, [r7, #7]
 800295a:	01db      	lsls	r3, r3, #7
 800295c:	4a08      	ldr	r2, [pc, #32]	; (8002980 <ssd1306_UpdateScreen+0x4c>)
 800295e:	4413      	add	r3, r2
 8002960:	2180      	movs	r1, #128	; 0x80
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff ff40 	bl	80027e8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	3301      	adds	r3, #1
 800296c:	71fb      	strb	r3, [r7, #7]
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	2b07      	cmp	r3, #7
 8002972:	d9e5      	bls.n	8002940 <ssd1306_UpdateScreen+0xc>
    }
}
 8002974:	bf00      	nop
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20000388 	.word	0x20000388

08002984 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]
 800298e:	460b      	mov	r3, r1
 8002990:	71bb      	strb	r3, [r7, #6]
 8002992:	4613      	mov	r3, r2
 8002994:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	2b00      	cmp	r3, #0
 800299c:	db3d      	blt.n	8002a1a <ssd1306_DrawPixel+0x96>
 800299e:	79bb      	ldrb	r3, [r7, #6]
 80029a0:	2b3f      	cmp	r3, #63	; 0x3f
 80029a2:	d83a      	bhi.n	8002a1a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80029a4:	797b      	ldrb	r3, [r7, #5]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d11a      	bne.n	80029e0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80029aa:	79fa      	ldrb	r2, [r7, #7]
 80029ac:	79bb      	ldrb	r3, [r7, #6]
 80029ae:	08db      	lsrs	r3, r3, #3
 80029b0:	b2d8      	uxtb	r0, r3
 80029b2:	4603      	mov	r3, r0
 80029b4:	01db      	lsls	r3, r3, #7
 80029b6:	4413      	add	r3, r2
 80029b8:	4a1a      	ldr	r2, [pc, #104]	; (8002a24 <ssd1306_DrawPixel+0xa0>)
 80029ba:	5cd3      	ldrb	r3, [r2, r3]
 80029bc:	b25a      	sxtb	r2, r3
 80029be:	79bb      	ldrb	r3, [r7, #6]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	2101      	movs	r1, #1
 80029c6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ca:	b25b      	sxtb	r3, r3
 80029cc:	4313      	orrs	r3, r2
 80029ce:	b259      	sxtb	r1, r3
 80029d0:	79fa      	ldrb	r2, [r7, #7]
 80029d2:	4603      	mov	r3, r0
 80029d4:	01db      	lsls	r3, r3, #7
 80029d6:	4413      	add	r3, r2
 80029d8:	b2c9      	uxtb	r1, r1
 80029da:	4a12      	ldr	r2, [pc, #72]	; (8002a24 <ssd1306_DrawPixel+0xa0>)
 80029dc:	54d1      	strb	r1, [r2, r3]
 80029de:	e01d      	b.n	8002a1c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80029e0:	79fa      	ldrb	r2, [r7, #7]
 80029e2:	79bb      	ldrb	r3, [r7, #6]
 80029e4:	08db      	lsrs	r3, r3, #3
 80029e6:	b2d8      	uxtb	r0, r3
 80029e8:	4603      	mov	r3, r0
 80029ea:	01db      	lsls	r3, r3, #7
 80029ec:	4413      	add	r3, r2
 80029ee:	4a0d      	ldr	r2, [pc, #52]	; (8002a24 <ssd1306_DrawPixel+0xa0>)
 80029f0:	5cd3      	ldrb	r3, [r2, r3]
 80029f2:	b25a      	sxtb	r2, r3
 80029f4:	79bb      	ldrb	r3, [r7, #6]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	2101      	movs	r1, #1
 80029fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002a00:	b25b      	sxtb	r3, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	b25b      	sxtb	r3, r3
 8002a06:	4013      	ands	r3, r2
 8002a08:	b259      	sxtb	r1, r3
 8002a0a:	79fa      	ldrb	r2, [r7, #7]
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	01db      	lsls	r3, r3, #7
 8002a10:	4413      	add	r3, r2
 8002a12:	b2c9      	uxtb	r1, r1
 8002a14:	4a03      	ldr	r2, [pc, #12]	; (8002a24 <ssd1306_DrawPixel+0xa0>)
 8002a16:	54d1      	strb	r1, [r2, r3]
 8002a18:	e000      	b.n	8002a1c <ssd1306_DrawPixel+0x98>
        return;
 8002a1a:	bf00      	nop
    }
}
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	20000388 	.word	0x20000388

08002a28 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002a28:	b590      	push	{r4, r7, lr}
 8002a2a:	b089      	sub	sp, #36	; 0x24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4604      	mov	r4, r0
 8002a30:	1d38      	adds	r0, r7, #4
 8002a32:	e880 0006 	stmia.w	r0, {r1, r2}
 8002a36:	461a      	mov	r2, r3
 8002a38:	4623      	mov	r3, r4
 8002a3a:	73fb      	strb	r3, [r7, #15]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	2b1f      	cmp	r3, #31
 8002a44:	d902      	bls.n	8002a4c <ssd1306_WriteChar+0x24>
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
 8002a48:	2b7e      	cmp	r3, #126	; 0x7e
 8002a4a:	d901      	bls.n	8002a50 <ssd1306_WriteChar+0x28>
        return 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e06d      	b.n	8002b2c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002a50:	4b38      	ldr	r3, [pc, #224]	; (8002b34 <ssd1306_WriteChar+0x10c>)
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	461a      	mov	r2, r3
 8002a56:	793b      	ldrb	r3, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	2b80      	cmp	r3, #128	; 0x80
 8002a5c:	dc06      	bgt.n	8002a6c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002a5e:	4b35      	ldr	r3, [pc, #212]	; (8002b34 <ssd1306_WriteChar+0x10c>)
 8002a60:	885b      	ldrh	r3, [r3, #2]
 8002a62:	461a      	mov	r2, r3
 8002a64:	797b      	ldrb	r3, [r7, #5]
 8002a66:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002a68:	2b40      	cmp	r3, #64	; 0x40
 8002a6a:	dd01      	ble.n	8002a70 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	e05d      	b.n	8002b2c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002a70:	2300      	movs	r3, #0
 8002a72:	61fb      	str	r3, [r7, #28]
 8002a74:	e04c      	b.n	8002b10 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
 8002a7a:	3b20      	subs	r3, #32
 8002a7c:	7979      	ldrb	r1, [r7, #5]
 8002a7e:	fb01 f303 	mul.w	r3, r1, r3
 8002a82:	4619      	mov	r1, r3
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	440b      	add	r3, r1
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	4413      	add	r3, r2
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002a90:	2300      	movs	r3, #0
 8002a92:	61bb      	str	r3, [r7, #24]
 8002a94:	e034      	b.n	8002b00 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d012      	beq.n	8002acc <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002aa6:	4b23      	ldr	r3, [pc, #140]	; (8002b34 <ssd1306_WriteChar+0x10c>)
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	b2d8      	uxtb	r0, r3
 8002ab4:	4b1f      	ldr	r3, [pc, #124]	; (8002b34 <ssd1306_WriteChar+0x10c>)
 8002ab6:	885b      	ldrh	r3, [r3, #2]
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	4413      	add	r3, r2
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	7bba      	ldrb	r2, [r7, #14]
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	f7ff ff5d 	bl	8002984 <ssd1306_DrawPixel>
 8002aca:	e016      	b.n	8002afa <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002acc:	4b19      	ldr	r3, [pc, #100]	; (8002b34 <ssd1306_WriteChar+0x10c>)
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	b2d8      	uxtb	r0, r3
 8002ada:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <ssd1306_WriteChar+0x10c>)
 8002adc:	885b      	ldrh	r3, [r3, #2]
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	b2d9      	uxtb	r1, r3
 8002ae8:	7bbb      	ldrb	r3, [r7, #14]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	bf0c      	ite	eq
 8002aee:	2301      	moveq	r3, #1
 8002af0:	2300      	movne	r3, #0
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	f7ff ff45 	bl	8002984 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	3301      	adds	r3, #1
 8002afe:	61bb      	str	r3, [r7, #24]
 8002b00:	793b      	ldrb	r3, [r7, #4]
 8002b02:	461a      	mov	r2, r3
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d3c5      	bcc.n	8002a96 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	61fb      	str	r3, [r7, #28]
 8002b10:	797b      	ldrb	r3, [r7, #5]
 8002b12:	461a      	mov	r2, r3
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d3ad      	bcc.n	8002a76 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002b1a:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <ssd1306_WriteChar+0x10c>)
 8002b1c:	881a      	ldrh	r2, [r3, #0]
 8002b1e:	793b      	ldrb	r3, [r7, #4]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	4413      	add	r3, r2
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	4b03      	ldr	r3, [pc, #12]	; (8002b34 <ssd1306_WriteChar+0x10c>)
 8002b28:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3724      	adds	r7, #36	; 0x24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd90      	pop	{r4, r7, pc}
 8002b34:	20000788 	.word	0x20000788

08002b38 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	1d38      	adds	r0, r7, #4
 8002b42:	e880 0006 	stmia.w	r0, {r1, r2}
 8002b46:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8002b48:	e012      	b.n	8002b70 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	7818      	ldrb	r0, [r3, #0]
 8002b4e:	78fb      	ldrb	r3, [r7, #3]
 8002b50:	1d3a      	adds	r2, r7, #4
 8002b52:	ca06      	ldmia	r2, {r1, r2}
 8002b54:	f7ff ff68 	bl	8002a28 <ssd1306_WriteChar>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d002      	beq.n	8002b6a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	e008      	b.n	8002b7c <ssd1306_WriteString+0x44>
        }
        str++;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1e8      	bne.n	8002b4a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	781b      	ldrb	r3, [r3, #0]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	460a      	mov	r2, r1
 8002b8e:	71fb      	strb	r3, [r7, #7]
 8002b90:	4613      	mov	r3, r2
 8002b92:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <ssd1306_SetCursor+0x2c>)
 8002b9a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002b9c:	79bb      	ldrb	r3, [r7, #6]
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	4b03      	ldr	r3, [pc, #12]	; (8002bb0 <ssd1306_SetCursor+0x2c>)
 8002ba2:	805a      	strh	r2, [r3, #2]
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	20000788 	.word	0x20000788

08002bb4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002bbe:	2381      	movs	r3, #129	; 0x81
 8002bc0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002bc2:	7bfb      	ldrb	r3, [r7, #15]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fdf7 	bl	80027b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002bca:	79fb      	ldrb	r3, [r7, #7]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff fdf3 	bl	80027b8 <ssd1306_WriteCommand>
}
 8002bd2:	bf00      	nop
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002bec:	23af      	movs	r3, #175	; 0xaf
 8002bee:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002bf0:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <ssd1306_SetDisplayOn+0x38>)
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	715a      	strb	r2, [r3, #5]
 8002bf6:	e004      	b.n	8002c02 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002bf8:	23ae      	movs	r3, #174	; 0xae
 8002bfa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002bfc:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <ssd1306_SetDisplayOn+0x38>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff fdd7 	bl	80027b8 <ssd1306_WriteCommand>
}
 8002c0a:	bf00      	nop
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000788 	.word	0x20000788

08002c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c1c:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <HAL_Init+0x28>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a07      	ldr	r2, [pc, #28]	; (8002c40 <HAL_Init+0x28>)
 8002c22:	f043 0310 	orr.w	r3, r3, #16
 8002c26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c28:	2003      	movs	r0, #3
 8002c2a:	f000 f947 	bl	8002ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c2e:	200f      	movs	r0, #15
 8002c30:	f000 f808 	bl	8002c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c34:	f7ff f950 	bl	8001ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40022000 	.word	0x40022000

08002c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c4c:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <HAL_InitTick+0x54>)
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	4b12      	ldr	r3, [pc, #72]	; (8002c9c <HAL_InitTick+0x58>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	4619      	mov	r1, r3
 8002c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 f95f 	bl	8002f26 <HAL_SYSTICK_Config>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e00e      	b.n	8002c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b0f      	cmp	r3, #15
 8002c76:	d80a      	bhi.n	8002c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c78:	2200      	movs	r2, #0
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c80:	f000 f927 	bl	8002ed2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c84:	4a06      	ldr	r2, [pc, #24]	; (8002ca0 <HAL_InitTick+0x5c>)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	e000      	b.n	8002c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20000090 	.word	0x20000090
 8002c9c:	200000a0 	.word	0x200000a0
 8002ca0:	2000009c 	.word	0x2000009c

08002ca4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ca8:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <HAL_IncTick+0x1c>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	461a      	mov	r2, r3
 8002cae:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <HAL_IncTick+0x20>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	4a03      	ldr	r2, [pc, #12]	; (8002cc4 <HAL_IncTick+0x20>)
 8002cb6:	6013      	str	r3, [r2, #0]
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr
 8002cc0:	200000a0 	.word	0x200000a0
 8002cc4:	20000790 	.word	0x20000790

08002cc8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return uwTick;
 8002ccc:	4b02      	ldr	r3, [pc, #8]	; (8002cd8 <HAL_GetTick+0x10>)
 8002cce:	681b      	ldr	r3, [r3, #0]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr
 8002cd8:	20000790 	.word	0x20000790

08002cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ce4:	f7ff fff0 	bl	8002cc8 <HAL_GetTick>
 8002ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf4:	d005      	beq.n	8002d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <HAL_Delay+0x44>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4413      	add	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d02:	bf00      	nop
 8002d04:	f7ff ffe0 	bl	8002cc8 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d8f7      	bhi.n	8002d04 <HAL_Delay+0x28>
  {
  }
}
 8002d14:	bf00      	nop
 8002d16:	bf00      	nop
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	200000a0 	.word	0x200000a0

08002d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d34:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <__NVIC_SetPriorityGrouping+0x44>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d40:	4013      	ands	r3, r2
 8002d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d56:	4a04      	ldr	r2, [pc, #16]	; (8002d68 <__NVIC_SetPriorityGrouping+0x44>)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	60d3      	str	r3, [r2, #12]
}
 8002d5c:	bf00      	nop
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d70:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <__NVIC_GetPriorityGrouping+0x18>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	0a1b      	lsrs	r3, r3, #8
 8002d76:	f003 0307 	and.w	r3, r3, #7
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	db0b      	blt.n	8002db2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	f003 021f 	and.w	r2, r3, #31
 8002da0:	4906      	ldr	r1, [pc, #24]	; (8002dbc <__NVIC_EnableIRQ+0x34>)
 8002da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	2001      	movs	r0, #1
 8002daa:	fa00 f202 	lsl.w	r2, r0, r2
 8002dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr
 8002dbc:	e000e100 	.word	0xe000e100

08002dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	6039      	str	r1, [r7, #0]
 8002dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	db0a      	blt.n	8002dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	490c      	ldr	r1, [pc, #48]	; (8002e0c <__NVIC_SetPriority+0x4c>)
 8002dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dde:	0112      	lsls	r2, r2, #4
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	440b      	add	r3, r1
 8002de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002de8:	e00a      	b.n	8002e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	4908      	ldr	r1, [pc, #32]	; (8002e10 <__NVIC_SetPriority+0x50>)
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	3b04      	subs	r3, #4
 8002df8:	0112      	lsls	r2, r2, #4
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	761a      	strb	r2, [r3, #24]
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	e000e100 	.word	0xe000e100
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b089      	sub	sp, #36	; 0x24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f1c3 0307 	rsb	r3, r3, #7
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	bf28      	it	cs
 8002e32:	2304      	movcs	r3, #4
 8002e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	2b06      	cmp	r3, #6
 8002e3c:	d902      	bls.n	8002e44 <NVIC_EncodePriority+0x30>
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	3b03      	subs	r3, #3
 8002e42:	e000      	b.n	8002e46 <NVIC_EncodePriority+0x32>
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e48:	f04f 32ff 	mov.w	r2, #4294967295
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43da      	mvns	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	401a      	ands	r2, r3
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	fa01 f303 	lsl.w	r3, r1, r3
 8002e66:	43d9      	mvns	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e6c:	4313      	orrs	r3, r2
         );
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3724      	adds	r7, #36	; 0x24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e88:	d301      	bcc.n	8002e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e00f      	b.n	8002eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e8e:	4a0a      	ldr	r2, [pc, #40]	; (8002eb8 <SysTick_Config+0x40>)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e96:	210f      	movs	r1, #15
 8002e98:	f04f 30ff 	mov.w	r0, #4294967295
 8002e9c:	f7ff ff90 	bl	8002dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ea0:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <SysTick_Config+0x40>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ea6:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <SysTick_Config+0x40>)
 8002ea8:	2207      	movs	r2, #7
 8002eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	e000e010 	.word	0xe000e010

08002ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff ff2d 	bl	8002d24 <__NVIC_SetPriorityGrouping>
}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b086      	sub	sp, #24
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	4603      	mov	r3, r0
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	607a      	str	r2, [r7, #4]
 8002ede:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ee4:	f7ff ff42 	bl	8002d6c <__NVIC_GetPriorityGrouping>
 8002ee8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	68b9      	ldr	r1, [r7, #8]
 8002eee:	6978      	ldr	r0, [r7, #20]
 8002ef0:	f7ff ff90 	bl	8002e14 <NVIC_EncodePriority>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002efa:	4611      	mov	r1, r2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff ff5f 	bl	8002dc0 <__NVIC_SetPriority>
}
 8002f02:	bf00      	nop
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b082      	sub	sp, #8
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	4603      	mov	r3, r0
 8002f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff ff35 	bl	8002d88 <__NVIC_EnableIRQ>
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff ffa2 	bl	8002e78 <SysTick_Config>
 8002f34:	4603      	mov	r3, r0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b085      	sub	sp, #20
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d008      	beq.n	8002f68 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2204      	movs	r2, #4
 8002f5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e020      	b.n	8002faa <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 020e 	bic.w	r2, r2, #14
 8002f76:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0201 	bic.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f90:	2101      	movs	r1, #1
 8002f92:	fa01 f202 	lsl.w	r2, r1, r2
 8002f96:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d005      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2204      	movs	r2, #4
 8002fd0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	73fb      	strb	r3, [r7, #15]
 8002fd6:	e051      	b.n	800307c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 020e 	bic.w	r2, r2, #14
 8002fe6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0201 	bic.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a22      	ldr	r2, [pc, #136]	; (8003088 <HAL_DMA_Abort_IT+0xd4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d029      	beq.n	8003056 <HAL_DMA_Abort_IT+0xa2>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a21      	ldr	r2, [pc, #132]	; (800308c <HAL_DMA_Abort_IT+0xd8>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d022      	beq.n	8003052 <HAL_DMA_Abort_IT+0x9e>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a1f      	ldr	r2, [pc, #124]	; (8003090 <HAL_DMA_Abort_IT+0xdc>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d01a      	beq.n	800304c <HAL_DMA_Abort_IT+0x98>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a1e      	ldr	r2, [pc, #120]	; (8003094 <HAL_DMA_Abort_IT+0xe0>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d012      	beq.n	8003046 <HAL_DMA_Abort_IT+0x92>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a1c      	ldr	r2, [pc, #112]	; (8003098 <HAL_DMA_Abort_IT+0xe4>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d00a      	beq.n	8003040 <HAL_DMA_Abort_IT+0x8c>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a1b      	ldr	r2, [pc, #108]	; (800309c <HAL_DMA_Abort_IT+0xe8>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d102      	bne.n	800303a <HAL_DMA_Abort_IT+0x86>
 8003034:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003038:	e00e      	b.n	8003058 <HAL_DMA_Abort_IT+0xa4>
 800303a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800303e:	e00b      	b.n	8003058 <HAL_DMA_Abort_IT+0xa4>
 8003040:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003044:	e008      	b.n	8003058 <HAL_DMA_Abort_IT+0xa4>
 8003046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800304a:	e005      	b.n	8003058 <HAL_DMA_Abort_IT+0xa4>
 800304c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003050:	e002      	b.n	8003058 <HAL_DMA_Abort_IT+0xa4>
 8003052:	2310      	movs	r3, #16
 8003054:	e000      	b.n	8003058 <HAL_DMA_Abort_IT+0xa4>
 8003056:	2301      	movs	r3, #1
 8003058:	4a11      	ldr	r2, [pc, #68]	; (80030a0 <HAL_DMA_Abort_IT+0xec>)
 800305a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	4798      	blx	r3
    } 
  }
  return status;
 800307c:	7bfb      	ldrb	r3, [r7, #15]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40020008 	.word	0x40020008
 800308c:	4002001c 	.word	0x4002001c
 8003090:	40020030 	.word	0x40020030
 8003094:	40020044 	.word	0x40020044
 8003098:	40020058 	.word	0x40020058
 800309c:	4002006c 	.word	0x4002006c
 80030a0:	40020000 	.word	0x40020000

080030a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b08b      	sub	sp, #44	; 0x2c
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030ae:	2300      	movs	r3, #0
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030b2:	2300      	movs	r3, #0
 80030b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030b6:	e169      	b.n	800338c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030b8:	2201      	movs	r2, #1
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	69fa      	ldr	r2, [r7, #28]
 80030c8:	4013      	ands	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	f040 8158 	bne.w	8003386 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	4a9a      	ldr	r2, [pc, #616]	; (8003344 <HAL_GPIO_Init+0x2a0>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d05e      	beq.n	800319e <HAL_GPIO_Init+0xfa>
 80030e0:	4a98      	ldr	r2, [pc, #608]	; (8003344 <HAL_GPIO_Init+0x2a0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d875      	bhi.n	80031d2 <HAL_GPIO_Init+0x12e>
 80030e6:	4a98      	ldr	r2, [pc, #608]	; (8003348 <HAL_GPIO_Init+0x2a4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d058      	beq.n	800319e <HAL_GPIO_Init+0xfa>
 80030ec:	4a96      	ldr	r2, [pc, #600]	; (8003348 <HAL_GPIO_Init+0x2a4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d86f      	bhi.n	80031d2 <HAL_GPIO_Init+0x12e>
 80030f2:	4a96      	ldr	r2, [pc, #600]	; (800334c <HAL_GPIO_Init+0x2a8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d052      	beq.n	800319e <HAL_GPIO_Init+0xfa>
 80030f8:	4a94      	ldr	r2, [pc, #592]	; (800334c <HAL_GPIO_Init+0x2a8>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d869      	bhi.n	80031d2 <HAL_GPIO_Init+0x12e>
 80030fe:	4a94      	ldr	r2, [pc, #592]	; (8003350 <HAL_GPIO_Init+0x2ac>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d04c      	beq.n	800319e <HAL_GPIO_Init+0xfa>
 8003104:	4a92      	ldr	r2, [pc, #584]	; (8003350 <HAL_GPIO_Init+0x2ac>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d863      	bhi.n	80031d2 <HAL_GPIO_Init+0x12e>
 800310a:	4a92      	ldr	r2, [pc, #584]	; (8003354 <HAL_GPIO_Init+0x2b0>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d046      	beq.n	800319e <HAL_GPIO_Init+0xfa>
 8003110:	4a90      	ldr	r2, [pc, #576]	; (8003354 <HAL_GPIO_Init+0x2b0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d85d      	bhi.n	80031d2 <HAL_GPIO_Init+0x12e>
 8003116:	2b12      	cmp	r3, #18
 8003118:	d82a      	bhi.n	8003170 <HAL_GPIO_Init+0xcc>
 800311a:	2b12      	cmp	r3, #18
 800311c:	d859      	bhi.n	80031d2 <HAL_GPIO_Init+0x12e>
 800311e:	a201      	add	r2, pc, #4	; (adr r2, 8003124 <HAL_GPIO_Init+0x80>)
 8003120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003124:	0800319f 	.word	0x0800319f
 8003128:	08003179 	.word	0x08003179
 800312c:	0800318b 	.word	0x0800318b
 8003130:	080031cd 	.word	0x080031cd
 8003134:	080031d3 	.word	0x080031d3
 8003138:	080031d3 	.word	0x080031d3
 800313c:	080031d3 	.word	0x080031d3
 8003140:	080031d3 	.word	0x080031d3
 8003144:	080031d3 	.word	0x080031d3
 8003148:	080031d3 	.word	0x080031d3
 800314c:	080031d3 	.word	0x080031d3
 8003150:	080031d3 	.word	0x080031d3
 8003154:	080031d3 	.word	0x080031d3
 8003158:	080031d3 	.word	0x080031d3
 800315c:	080031d3 	.word	0x080031d3
 8003160:	080031d3 	.word	0x080031d3
 8003164:	080031d3 	.word	0x080031d3
 8003168:	08003181 	.word	0x08003181
 800316c:	08003195 	.word	0x08003195
 8003170:	4a79      	ldr	r2, [pc, #484]	; (8003358 <HAL_GPIO_Init+0x2b4>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d013      	beq.n	800319e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003176:	e02c      	b.n	80031d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	623b      	str	r3, [r7, #32]
          break;
 800317e:	e029      	b.n	80031d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	3304      	adds	r3, #4
 8003186:	623b      	str	r3, [r7, #32]
          break;
 8003188:	e024      	b.n	80031d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	3308      	adds	r3, #8
 8003190:	623b      	str	r3, [r7, #32]
          break;
 8003192:	e01f      	b.n	80031d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	330c      	adds	r3, #12
 800319a:	623b      	str	r3, [r7, #32]
          break;
 800319c:	e01a      	b.n	80031d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d102      	bne.n	80031ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031a6:	2304      	movs	r3, #4
 80031a8:	623b      	str	r3, [r7, #32]
          break;
 80031aa:	e013      	b.n	80031d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d105      	bne.n	80031c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031b4:	2308      	movs	r3, #8
 80031b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	69fa      	ldr	r2, [r7, #28]
 80031bc:	611a      	str	r2, [r3, #16]
          break;
 80031be:	e009      	b.n	80031d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031c0:	2308      	movs	r3, #8
 80031c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	69fa      	ldr	r2, [r7, #28]
 80031c8:	615a      	str	r2, [r3, #20]
          break;
 80031ca:	e003      	b.n	80031d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031cc:	2300      	movs	r3, #0
 80031ce:	623b      	str	r3, [r7, #32]
          break;
 80031d0:	e000      	b.n	80031d4 <HAL_GPIO_Init+0x130>
          break;
 80031d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	2bff      	cmp	r3, #255	; 0xff
 80031d8:	d801      	bhi.n	80031de <HAL_GPIO_Init+0x13a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	e001      	b.n	80031e2 <HAL_GPIO_Init+0x13e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3304      	adds	r3, #4
 80031e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	2bff      	cmp	r3, #255	; 0xff
 80031e8:	d802      	bhi.n	80031f0 <HAL_GPIO_Init+0x14c>
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	e002      	b.n	80031f6 <HAL_GPIO_Init+0x152>
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	3b08      	subs	r3, #8
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	210f      	movs	r1, #15
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	fa01 f303 	lsl.w	r3, r1, r3
 8003204:	43db      	mvns	r3, r3
 8003206:	401a      	ands	r2, r3
 8003208:	6a39      	ldr	r1, [r7, #32]
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	fa01 f303 	lsl.w	r3, r1, r3
 8003210:	431a      	orrs	r2, r3
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 80b1 	beq.w	8003386 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003224:	4b4d      	ldr	r3, [pc, #308]	; (800335c <HAL_GPIO_Init+0x2b8>)
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	4a4c      	ldr	r2, [pc, #304]	; (800335c <HAL_GPIO_Init+0x2b8>)
 800322a:	f043 0301 	orr.w	r3, r3, #1
 800322e:	6193      	str	r3, [r2, #24]
 8003230:	4b4a      	ldr	r3, [pc, #296]	; (800335c <HAL_GPIO_Init+0x2b8>)
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800323c:	4a48      	ldr	r2, [pc, #288]	; (8003360 <HAL_GPIO_Init+0x2bc>)
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	089b      	lsrs	r3, r3, #2
 8003242:	3302      	adds	r3, #2
 8003244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003248:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	220f      	movs	r2, #15
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	4013      	ands	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a40      	ldr	r2, [pc, #256]	; (8003364 <HAL_GPIO_Init+0x2c0>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d013      	beq.n	8003290 <HAL_GPIO_Init+0x1ec>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a3f      	ldr	r2, [pc, #252]	; (8003368 <HAL_GPIO_Init+0x2c4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d00d      	beq.n	800328c <HAL_GPIO_Init+0x1e8>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a3e      	ldr	r2, [pc, #248]	; (800336c <HAL_GPIO_Init+0x2c8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d007      	beq.n	8003288 <HAL_GPIO_Init+0x1e4>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a3d      	ldr	r2, [pc, #244]	; (8003370 <HAL_GPIO_Init+0x2cc>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d101      	bne.n	8003284 <HAL_GPIO_Init+0x1e0>
 8003280:	2303      	movs	r3, #3
 8003282:	e006      	b.n	8003292 <HAL_GPIO_Init+0x1ee>
 8003284:	2304      	movs	r3, #4
 8003286:	e004      	b.n	8003292 <HAL_GPIO_Init+0x1ee>
 8003288:	2302      	movs	r3, #2
 800328a:	e002      	b.n	8003292 <HAL_GPIO_Init+0x1ee>
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <HAL_GPIO_Init+0x1ee>
 8003290:	2300      	movs	r3, #0
 8003292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003294:	f002 0203 	and.w	r2, r2, #3
 8003298:	0092      	lsls	r2, r2, #2
 800329a:	4093      	lsls	r3, r2
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	4313      	orrs	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032a2:	492f      	ldr	r1, [pc, #188]	; (8003360 <HAL_GPIO_Init+0x2bc>)
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	089b      	lsrs	r3, r3, #2
 80032a8:	3302      	adds	r3, #2
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d006      	beq.n	80032ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032bc:	4b2d      	ldr	r3, [pc, #180]	; (8003374 <HAL_GPIO_Init+0x2d0>)
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	492c      	ldr	r1, [pc, #176]	; (8003374 <HAL_GPIO_Init+0x2d0>)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	608b      	str	r3, [r1, #8]
 80032c8:	e006      	b.n	80032d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032ca:	4b2a      	ldr	r3, [pc, #168]	; (8003374 <HAL_GPIO_Init+0x2d0>)
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	43db      	mvns	r3, r3
 80032d2:	4928      	ldr	r1, [pc, #160]	; (8003374 <HAL_GPIO_Init+0x2d0>)
 80032d4:	4013      	ands	r3, r2
 80032d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d006      	beq.n	80032f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032e4:	4b23      	ldr	r3, [pc, #140]	; (8003374 <HAL_GPIO_Init+0x2d0>)
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	4922      	ldr	r1, [pc, #136]	; (8003374 <HAL_GPIO_Init+0x2d0>)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60cb      	str	r3, [r1, #12]
 80032f0:	e006      	b.n	8003300 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032f2:	4b20      	ldr	r3, [pc, #128]	; (8003374 <HAL_GPIO_Init+0x2d0>)
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	43db      	mvns	r3, r3
 80032fa:	491e      	ldr	r1, [pc, #120]	; (8003374 <HAL_GPIO_Init+0x2d0>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d006      	beq.n	800331a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800330c:	4b19      	ldr	r3, [pc, #100]	; (8003374 <HAL_GPIO_Init+0x2d0>)
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	4918      	ldr	r1, [pc, #96]	; (8003374 <HAL_GPIO_Init+0x2d0>)
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	4313      	orrs	r3, r2
 8003316:	604b      	str	r3, [r1, #4]
 8003318:	e006      	b.n	8003328 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800331a:	4b16      	ldr	r3, [pc, #88]	; (8003374 <HAL_GPIO_Init+0x2d0>)
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	43db      	mvns	r3, r3
 8003322:	4914      	ldr	r1, [pc, #80]	; (8003374 <HAL_GPIO_Init+0x2d0>)
 8003324:	4013      	ands	r3, r2
 8003326:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d021      	beq.n	8003378 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003334:	4b0f      	ldr	r3, [pc, #60]	; (8003374 <HAL_GPIO_Init+0x2d0>)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	490e      	ldr	r1, [pc, #56]	; (8003374 <HAL_GPIO_Init+0x2d0>)
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	4313      	orrs	r3, r2
 800333e:	600b      	str	r3, [r1, #0]
 8003340:	e021      	b.n	8003386 <HAL_GPIO_Init+0x2e2>
 8003342:	bf00      	nop
 8003344:	10320000 	.word	0x10320000
 8003348:	10310000 	.word	0x10310000
 800334c:	10220000 	.word	0x10220000
 8003350:	10210000 	.word	0x10210000
 8003354:	10120000 	.word	0x10120000
 8003358:	10110000 	.word	0x10110000
 800335c:	40021000 	.word	0x40021000
 8003360:	40010000 	.word	0x40010000
 8003364:	40010800 	.word	0x40010800
 8003368:	40010c00 	.word	0x40010c00
 800336c:	40011000 	.word	0x40011000
 8003370:	40011400 	.word	0x40011400
 8003374:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003378:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <HAL_GPIO_Init+0x304>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	43db      	mvns	r3, r3
 8003380:	4909      	ldr	r1, [pc, #36]	; (80033a8 <HAL_GPIO_Init+0x304>)
 8003382:	4013      	ands	r3, r2
 8003384:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	3301      	adds	r3, #1
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	fa22 f303 	lsr.w	r3, r2, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	f47f ae8e 	bne.w	80030b8 <HAL_GPIO_Init+0x14>
  }
}
 800339c:	bf00      	nop
 800339e:	bf00      	nop
 80033a0:	372c      	adds	r7, #44	; 0x2c
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bc80      	pop	{r7}
 80033a6:	4770      	bx	lr
 80033a8:	40010400 	.word	0x40010400

080033ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	807b      	strh	r3, [r7, #2]
 80033b8:	4613      	mov	r3, r2
 80033ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033bc:	787b      	ldrb	r3, [r7, #1]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033c2:	887a      	ldrh	r2, [r7, #2]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033c8:	e003      	b.n	80033d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033ca:	887b      	ldrh	r3, [r7, #2]
 80033cc:	041a      	lsls	r2, r3, #16
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	611a      	str	r2, [r3, #16]
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr

080033dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033ee:	887a      	ldrh	r2, [r7, #2]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4013      	ands	r3, r2
 80033f4:	041a      	lsls	r2, r3, #16
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	43d9      	mvns	r1, r3
 80033fa:	887b      	ldrh	r3, [r7, #2]
 80033fc:	400b      	ands	r3, r1
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	611a      	str	r2, [r3, #16]
}
 8003404:	bf00      	nop
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr
	...

08003410 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e12b      	b.n	800367a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fe fbe6 	bl	8001c08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2224      	movs	r2, #36	; 0x24
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0201 	bic.w	r2, r2, #1
 8003452:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003462:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003472:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003474:	f001 fbf0 	bl	8004c58 <HAL_RCC_GetPCLK1Freq>
 8003478:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	4a81      	ldr	r2, [pc, #516]	; (8003684 <HAL_I2C_Init+0x274>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d807      	bhi.n	8003494 <HAL_I2C_Init+0x84>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4a80      	ldr	r2, [pc, #512]	; (8003688 <HAL_I2C_Init+0x278>)
 8003488:	4293      	cmp	r3, r2
 800348a:	bf94      	ite	ls
 800348c:	2301      	movls	r3, #1
 800348e:	2300      	movhi	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	e006      	b.n	80034a2 <HAL_I2C_Init+0x92>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4a7d      	ldr	r2, [pc, #500]	; (800368c <HAL_I2C_Init+0x27c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	bf94      	ite	ls
 800349c:	2301      	movls	r3, #1
 800349e:	2300      	movhi	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e0e7      	b.n	800367a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4a78      	ldr	r2, [pc, #480]	; (8003690 <HAL_I2C_Init+0x280>)
 80034ae:	fba2 2303 	umull	r2, r3, r2, r3
 80034b2:	0c9b      	lsrs	r3, r3, #18
 80034b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	4a6a      	ldr	r2, [pc, #424]	; (8003684 <HAL_I2C_Init+0x274>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d802      	bhi.n	80034e4 <HAL_I2C_Init+0xd4>
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	3301      	adds	r3, #1
 80034e2:	e009      	b.n	80034f8 <HAL_I2C_Init+0xe8>
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034ea:	fb02 f303 	mul.w	r3, r2, r3
 80034ee:	4a69      	ldr	r2, [pc, #420]	; (8003694 <HAL_I2C_Init+0x284>)
 80034f0:	fba2 2303 	umull	r2, r3, r2, r3
 80034f4:	099b      	lsrs	r3, r3, #6
 80034f6:	3301      	adds	r3, #1
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6812      	ldr	r2, [r2, #0]
 80034fc:	430b      	orrs	r3, r1
 80034fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800350a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	495c      	ldr	r1, [pc, #368]	; (8003684 <HAL_I2C_Init+0x274>)
 8003514:	428b      	cmp	r3, r1
 8003516:	d819      	bhi.n	800354c <HAL_I2C_Init+0x13c>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	1e59      	subs	r1, r3, #1
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	fbb1 f3f3 	udiv	r3, r1, r3
 8003526:	1c59      	adds	r1, r3, #1
 8003528:	f640 73fc 	movw	r3, #4092	; 0xffc
 800352c:	400b      	ands	r3, r1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <HAL_I2C_Init+0x138>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	1e59      	subs	r1, r3, #1
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003540:	3301      	adds	r3, #1
 8003542:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003546:	e051      	b.n	80035ec <HAL_I2C_Init+0x1dc>
 8003548:	2304      	movs	r3, #4
 800354a:	e04f      	b.n	80035ec <HAL_I2C_Init+0x1dc>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d111      	bne.n	8003578 <HAL_I2C_Init+0x168>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	1e58      	subs	r0, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6859      	ldr	r1, [r3, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	440b      	add	r3, r1
 8003562:	fbb0 f3f3 	udiv	r3, r0, r3
 8003566:	3301      	adds	r3, #1
 8003568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800356c:	2b00      	cmp	r3, #0
 800356e:	bf0c      	ite	eq
 8003570:	2301      	moveq	r3, #1
 8003572:	2300      	movne	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	e012      	b.n	800359e <HAL_I2C_Init+0x18e>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	1e58      	subs	r0, r3, #1
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6859      	ldr	r1, [r3, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	0099      	lsls	r1, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	fbb0 f3f3 	udiv	r3, r0, r3
 800358e:	3301      	adds	r3, #1
 8003590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003594:	2b00      	cmp	r3, #0
 8003596:	bf0c      	ite	eq
 8003598:	2301      	moveq	r3, #1
 800359a:	2300      	movne	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_I2C_Init+0x196>
 80035a2:	2301      	movs	r3, #1
 80035a4:	e022      	b.n	80035ec <HAL_I2C_Init+0x1dc>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10e      	bne.n	80035cc <HAL_I2C_Init+0x1bc>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	1e58      	subs	r0, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6859      	ldr	r1, [r3, #4]
 80035b6:	460b      	mov	r3, r1
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	440b      	add	r3, r1
 80035bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80035c0:	3301      	adds	r3, #1
 80035c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ca:	e00f      	b.n	80035ec <HAL_I2C_Init+0x1dc>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	1e58      	subs	r0, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6859      	ldr	r1, [r3, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	0099      	lsls	r1, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	fbb0 f3f3 	udiv	r3, r0, r3
 80035e2:	3301      	adds	r3, #1
 80035e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	6809      	ldr	r1, [r1, #0]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69da      	ldr	r2, [r3, #28]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800361a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6911      	ldr	r1, [r2, #16]
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	68d2      	ldr	r2, [r2, #12]
 8003626:	4311      	orrs	r1, r2
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6812      	ldr	r2, [r2, #0]
 800362c:	430b      	orrs	r3, r1
 800362e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	695a      	ldr	r2, [r3, #20]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0201 	orr.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	000186a0 	.word	0x000186a0
 8003688:	001e847f 	.word	0x001e847f
 800368c:	003d08ff 	.word	0x003d08ff
 8003690:	431bde83 	.word	0x431bde83
 8003694:	10624dd3 	.word	0x10624dd3

08003698 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af02      	add	r7, sp, #8
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	4608      	mov	r0, r1
 80036a2:	4611      	mov	r1, r2
 80036a4:	461a      	mov	r2, r3
 80036a6:	4603      	mov	r3, r0
 80036a8:	817b      	strh	r3, [r7, #10]
 80036aa:	460b      	mov	r3, r1
 80036ac:	813b      	strh	r3, [r7, #8]
 80036ae:	4613      	mov	r3, r2
 80036b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036b2:	f7ff fb09 	bl	8002cc8 <HAL_GetTick>
 80036b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b20      	cmp	r3, #32
 80036c2:	f040 80d9 	bne.w	8003878 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	2319      	movs	r3, #25
 80036cc:	2201      	movs	r2, #1
 80036ce:	496d      	ldr	r1, [pc, #436]	; (8003884 <HAL_I2C_Mem_Write+0x1ec>)
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 fcc1 	bl	8004058 <I2C_WaitOnFlagUntilTimeout>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80036dc:	2302      	movs	r3, #2
 80036de:	e0cc      	b.n	800387a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_I2C_Mem_Write+0x56>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e0c5      	b.n	800387a <HAL_I2C_Mem_Write+0x1e2>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b01      	cmp	r3, #1
 8003702:	d007      	beq.n	8003714 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003722:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2221      	movs	r2, #33	; 0x21
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2240      	movs	r2, #64	; 0x40
 8003730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a3a      	ldr	r2, [r7, #32]
 800373e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003744:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4a4d      	ldr	r2, [pc, #308]	; (8003888 <HAL_I2C_Mem_Write+0x1f0>)
 8003754:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003756:	88f8      	ldrh	r0, [r7, #6]
 8003758:	893a      	ldrh	r2, [r7, #8]
 800375a:	8979      	ldrh	r1, [r7, #10]
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	9301      	str	r3, [sp, #4]
 8003760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	4603      	mov	r3, r0
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 faf8 	bl	8003d5c <I2C_RequestMemoryWrite>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d052      	beq.n	8003818 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e081      	b.n	800387a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 fd86 	bl	800428c <I2C_WaitOnTXEFlagUntilTimeout>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00d      	beq.n	80037a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	2b04      	cmp	r3, #4
 800378c:	d107      	bne.n	800379e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800379c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e06b      	b.n	800387a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	781a      	ldrb	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	1c5a      	adds	r2, r3, #1
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d11b      	bne.n	8003818 <HAL_I2C_Mem_Write+0x180>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d017      	beq.n	8003818 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	781a      	ldrb	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1aa      	bne.n	8003776 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 fd79 	bl	800431c <I2C_WaitOnBTFFlagUntilTimeout>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00d      	beq.n	800384c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	2b04      	cmp	r3, #4
 8003836:	d107      	bne.n	8003848 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003846:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e016      	b.n	800387a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800385a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003874:	2300      	movs	r3, #0
 8003876:	e000      	b.n	800387a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003878:	2302      	movs	r3, #2
  }
}
 800387a:	4618      	mov	r0, r3
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	00100002 	.word	0x00100002
 8003888:	ffff0000 	.word	0xffff0000

0800388c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b08c      	sub	sp, #48	; 0x30
 8003890:	af02      	add	r7, sp, #8
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	4608      	mov	r0, r1
 8003896:	4611      	mov	r1, r2
 8003898:	461a      	mov	r2, r3
 800389a:	4603      	mov	r3, r0
 800389c:	817b      	strh	r3, [r7, #10]
 800389e:	460b      	mov	r3, r1
 80038a0:	813b      	strh	r3, [r7, #8]
 80038a2:	4613      	mov	r3, r2
 80038a4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038aa:	f7ff fa0d 	bl	8002cc8 <HAL_GetTick>
 80038ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	f040 8244 	bne.w	8003d46 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	2319      	movs	r3, #25
 80038c4:	2201      	movs	r2, #1
 80038c6:	4982      	ldr	r1, [pc, #520]	; (8003ad0 <HAL_I2C_Mem_Read+0x244>)
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 fbc5 	bl	8004058 <I2C_WaitOnFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80038d4:	2302      	movs	r3, #2
 80038d6:	e237      	b.n	8003d48 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d101      	bne.n	80038e6 <HAL_I2C_Mem_Read+0x5a>
 80038e2:	2302      	movs	r3, #2
 80038e4:	e230      	b.n	8003d48 <HAL_I2C_Mem_Read+0x4bc>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d007      	beq.n	800390c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0201 	orr.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800391a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2222      	movs	r2, #34	; 0x22
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2240      	movs	r2, #64	; 0x40
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003936:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800393c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4a62      	ldr	r2, [pc, #392]	; (8003ad4 <HAL_I2C_Mem_Read+0x248>)
 800394c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800394e:	88f8      	ldrh	r0, [r7, #6]
 8003950:	893a      	ldrh	r2, [r7, #8]
 8003952:	8979      	ldrh	r1, [r7, #10]
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	9301      	str	r3, [sp, #4]
 8003958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	4603      	mov	r3, r0
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 fa92 	bl	8003e88 <I2C_RequestMemoryRead>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e1ec      	b.n	8003d48 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003972:	2b00      	cmp	r3, #0
 8003974:	d113      	bne.n	800399e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003976:	2300      	movs	r3, #0
 8003978:	61fb      	str	r3, [r7, #28]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	61fb      	str	r3, [r7, #28]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	e1c0      	b.n	8003d20 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d11e      	bne.n	80039e4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039b6:	b672      	cpsid	i
}
 80039b8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ba:	2300      	movs	r3, #0
 80039bc:	61bb      	str	r3, [r7, #24]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	61bb      	str	r3, [r7, #24]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	61bb      	str	r3, [r7, #24]
 80039ce:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80039e0:	b662      	cpsie	i
}
 80039e2:	e035      	b.n	8003a50 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d11e      	bne.n	8003a2a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039fc:	b672      	cpsid	i
}
 80039fe:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a26:	b662      	cpsie	i
}
 8003a28:	e012      	b.n	8003a50 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a38:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	613b      	str	r3, [r7, #16]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	613b      	str	r3, [r7, #16]
 8003a4e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003a50:	e166      	b.n	8003d20 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a56:	2b03      	cmp	r3, #3
 8003a58:	f200 811f 	bhi.w	8003c9a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d123      	bne.n	8003aac <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 fc9f 	bl	80043ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e167      	b.n	8003d48 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003aaa:	e139      	b.n	8003d20 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d152      	bne.n	8003b5a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aba:	2200      	movs	r2, #0
 8003abc:	4906      	ldr	r1, [pc, #24]	; (8003ad8 <HAL_I2C_Mem_Read+0x24c>)
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 faca 	bl	8004058 <I2C_WaitOnFlagUntilTimeout>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d008      	beq.n	8003adc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e13c      	b.n	8003d48 <HAL_I2C_Mem_Read+0x4bc>
 8003ace:	bf00      	nop
 8003ad0:	00100002 	.word	0x00100002
 8003ad4:	ffff0000 	.word	0xffff0000
 8003ad8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003adc:	b672      	cpsid	i
}
 8003ade:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691a      	ldr	r2, [r3, #16]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b22:	b662      	cpsie	i
}
 8003b24:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	691a      	ldr	r2, [r3, #16]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b58:	e0e2      	b.n	8003d20 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b60:	2200      	movs	r2, #0
 8003b62:	497b      	ldr	r1, [pc, #492]	; (8003d50 <HAL_I2C_Mem_Read+0x4c4>)
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 fa77 	bl	8004058 <I2C_WaitOnFlagUntilTimeout>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e0e9      	b.n	8003d48 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b84:	b672      	cpsid	i
}
 8003b86:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	691a      	ldr	r2, [r3, #16]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003bba:	4b66      	ldr	r3, [pc, #408]	; (8003d54 <HAL_I2C_Mem_Read+0x4c8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	08db      	lsrs	r3, r3, #3
 8003bc0:	4a65      	ldr	r2, [pc, #404]	; (8003d58 <HAL_I2C_Mem_Read+0x4cc>)
 8003bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc6:	0a1a      	lsrs	r2, r3, #8
 8003bc8:	4613      	mov	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	00da      	lsls	r2, r3, #3
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d118      	bne.n	8003c12 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	f043 0220 	orr.w	r2, r3, #32
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003c02:	b662      	cpsie	i
}
 8003c04:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e09a      	b.n	8003d48 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d1d9      	bne.n	8003bd4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691a      	ldr	r2, [r3, #16]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003c62:	b662      	cpsie	i
}
 8003c64:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	691a      	ldr	r2, [r3, #16]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	1c5a      	adds	r2, r3, #1
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c98:	e042      	b.n	8003d20 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 fb84 	bl	80043ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e04c      	b.n	8003d48 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	f003 0304 	and.w	r3, r3, #4
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d118      	bne.n	8003d20 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	691a      	ldr	r2, [r3, #16]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	1c5a      	adds	r2, r3, #1
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f47f ae94 	bne.w	8003a52 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	e000      	b.n	8003d48 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003d46:	2302      	movs	r3, #2
  }
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3728      	adds	r7, #40	; 0x28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	00010004 	.word	0x00010004
 8003d54:	20000090 	.word	0x20000090
 8003d58:	14f8b589 	.word	0x14f8b589

08003d5c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af02      	add	r7, sp, #8
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	4608      	mov	r0, r1
 8003d66:	4611      	mov	r1, r2
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	817b      	strh	r3, [r7, #10]
 8003d6e:	460b      	mov	r3, r1
 8003d70:	813b      	strh	r3, [r7, #8]
 8003d72:	4613      	mov	r3, r2
 8003d74:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 f960 	bl	8004058 <I2C_WaitOnFlagUntilTimeout>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00d      	beq.n	8003dba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dac:	d103      	bne.n	8003db6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e05f      	b.n	8003e7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dba:	897b      	ldrh	r3, [r7, #10]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003dc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	6a3a      	ldr	r2, [r7, #32]
 8003dce:	492d      	ldr	r1, [pc, #180]	; (8003e84 <I2C_RequestMemoryWrite+0x128>)
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 f9bb 	bl	800414c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e04c      	b.n	8003e7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de0:	2300      	movs	r3, #0
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df8:	6a39      	ldr	r1, [r7, #32]
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 fa46 	bl	800428c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00d      	beq.n	8003e22 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d107      	bne.n	8003e1e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e02b      	b.n	8003e7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d105      	bne.n	8003e34 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e28:	893b      	ldrh	r3, [r7, #8]
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	611a      	str	r2, [r3, #16]
 8003e32:	e021      	b.n	8003e78 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e34:	893b      	ldrh	r3, [r7, #8]
 8003e36:	0a1b      	lsrs	r3, r3, #8
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e44:	6a39      	ldr	r1, [r7, #32]
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 fa20 	bl	800428c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00d      	beq.n	8003e6e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d107      	bne.n	8003e6a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e005      	b.n	8003e7a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e6e:	893b      	ldrh	r3, [r7, #8]
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	00010002 	.word	0x00010002

08003e88 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af02      	add	r7, sp, #8
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	4608      	mov	r0, r1
 8003e92:	4611      	mov	r1, r2
 8003e94:	461a      	mov	r2, r3
 8003e96:	4603      	mov	r3, r0
 8003e98:	817b      	strh	r3, [r7, #10]
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	813b      	strh	r3, [r7, #8]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003eb0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ec0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f8c2 	bl	8004058 <I2C_WaitOnFlagUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00d      	beq.n	8003ef6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee8:	d103      	bne.n	8003ef2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e0aa      	b.n	800404c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ef6:	897b      	ldrh	r3, [r7, #10]
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	461a      	mov	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	6a3a      	ldr	r2, [r7, #32]
 8003f0a:	4952      	ldr	r1, [pc, #328]	; (8004054 <I2C_RequestMemoryRead+0x1cc>)
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 f91d 	bl	800414c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e097      	b.n	800404c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f34:	6a39      	ldr	r1, [r7, #32]
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 f9a8 	bl	800428c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00d      	beq.n	8003f5e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d107      	bne.n	8003f5a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e076      	b.n	800404c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f5e:	88fb      	ldrh	r3, [r7, #6]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d105      	bne.n	8003f70 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f64:	893b      	ldrh	r3, [r7, #8]
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	611a      	str	r2, [r3, #16]
 8003f6e:	e021      	b.n	8003fb4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f70:	893b      	ldrh	r3, [r7, #8]
 8003f72:	0a1b      	lsrs	r3, r3, #8
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f80:	6a39      	ldr	r1, [r7, #32]
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 f982 	bl	800428c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00d      	beq.n	8003faa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d107      	bne.n	8003fa6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e050      	b.n	800404c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003faa:	893b      	ldrh	r3, [r7, #8]
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb6:	6a39      	ldr	r1, [r7, #32]
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 f967 	bl	800428c <I2C_WaitOnTXEFlagUntilTimeout>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00d      	beq.n	8003fe0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d107      	bne.n	8003fdc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fda:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e035      	b.n	800404c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 f82b 	bl	8004058 <I2C_WaitOnFlagUntilTimeout>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00d      	beq.n	8004024 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004016:	d103      	bne.n	8004020 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800401e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e013      	b.n	800404c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004024:	897b      	ldrh	r3, [r7, #10]
 8004026:	b2db      	uxtb	r3, r3
 8004028:	f043 0301 	orr.w	r3, r3, #1
 800402c:	b2da      	uxtb	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	6a3a      	ldr	r2, [r7, #32]
 8004038:	4906      	ldr	r1, [pc, #24]	; (8004054 <I2C_RequestMemoryRead+0x1cc>)
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 f886 	bl	800414c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3718      	adds	r7, #24
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	00010002 	.word	0x00010002

08004058 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	4613      	mov	r3, r2
 8004066:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004068:	e048      	b.n	80040fc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004070:	d044      	beq.n	80040fc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004072:	f7fe fe29 	bl	8002cc8 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d302      	bcc.n	8004088 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d139      	bne.n	80040fc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	0c1b      	lsrs	r3, r3, #16
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b01      	cmp	r3, #1
 8004090:	d10d      	bne.n	80040ae <I2C_WaitOnFlagUntilTimeout+0x56>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	43da      	mvns	r2, r3
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	4013      	ands	r3, r2
 800409e:	b29b      	uxth	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	bf0c      	ite	eq
 80040a4:	2301      	moveq	r3, #1
 80040a6:	2300      	movne	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	461a      	mov	r2, r3
 80040ac:	e00c      	b.n	80040c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	43da      	mvns	r2, r3
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	4013      	ands	r3, r2
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	bf0c      	ite	eq
 80040c0:	2301      	moveq	r3, #1
 80040c2:	2300      	movne	r3, #0
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	461a      	mov	r2, r3
 80040c8:	79fb      	ldrb	r3, [r7, #7]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d116      	bne.n	80040fc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	f043 0220 	orr.w	r2, r3, #32
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e023      	b.n	8004144 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	0c1b      	lsrs	r3, r3, #16
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b01      	cmp	r3, #1
 8004104:	d10d      	bne.n	8004122 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	43da      	mvns	r2, r3
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	4013      	ands	r3, r2
 8004112:	b29b      	uxth	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	bf0c      	ite	eq
 8004118:	2301      	moveq	r3, #1
 800411a:	2300      	movne	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	461a      	mov	r2, r3
 8004120:	e00c      	b.n	800413c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	43da      	mvns	r2, r3
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	4013      	ands	r3, r2
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	bf0c      	ite	eq
 8004134:	2301      	moveq	r3, #1
 8004136:	2300      	movne	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	461a      	mov	r2, r3
 800413c:	79fb      	ldrb	r3, [r7, #7]
 800413e:	429a      	cmp	r2, r3
 8004140:	d093      	beq.n	800406a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800415a:	e071      	b.n	8004240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800416a:	d123      	bne.n	80041b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800417a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004184:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2220      	movs	r2, #32
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	f043 0204 	orr.w	r2, r3, #4
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e067      	b.n	8004284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ba:	d041      	beq.n	8004240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041bc:	f7fe fd84 	bl	8002cc8 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d302      	bcc.n	80041d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d136      	bne.n	8004240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	0c1b      	lsrs	r3, r3, #16
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d10c      	bne.n	80041f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	43da      	mvns	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4013      	ands	r3, r2
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	bf14      	ite	ne
 80041ee:	2301      	movne	r3, #1
 80041f0:	2300      	moveq	r3, #0
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	e00b      	b.n	800420e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	43da      	mvns	r2, r3
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	4013      	ands	r3, r2
 8004202:	b29b      	uxth	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	bf14      	ite	ne
 8004208:	2301      	movne	r3, #1
 800420a:	2300      	moveq	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d016      	beq.n	8004240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2220      	movs	r2, #32
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	f043 0220 	orr.w	r2, r3, #32
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e021      	b.n	8004284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	0c1b      	lsrs	r3, r3, #16
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b01      	cmp	r3, #1
 8004248:	d10c      	bne.n	8004264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	43da      	mvns	r2, r3
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	4013      	ands	r3, r2
 8004256:	b29b      	uxth	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	bf14      	ite	ne
 800425c:	2301      	movne	r3, #1
 800425e:	2300      	moveq	r3, #0
 8004260:	b2db      	uxtb	r3, r3
 8004262:	e00b      	b.n	800427c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	43da      	mvns	r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4013      	ands	r3, r2
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	bf14      	ite	ne
 8004276:	2301      	movne	r3, #1
 8004278:	2300      	moveq	r3, #0
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	f47f af6d 	bne.w	800415c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004298:	e034      	b.n	8004304 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 f8e3 	bl	8004466 <I2C_IsAcknowledgeFailed>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e034      	b.n	8004314 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b0:	d028      	beq.n	8004304 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b2:	f7fe fd09 	bl	8002cc8 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d302      	bcc.n	80042c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d11d      	bne.n	8004304 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d2:	2b80      	cmp	r3, #128	; 0x80
 80042d4:	d016      	beq.n	8004304 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	f043 0220 	orr.w	r2, r3, #32
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e007      	b.n	8004314 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430e:	2b80      	cmp	r3, #128	; 0x80
 8004310:	d1c3      	bne.n	800429a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004328:	e034      	b.n	8004394 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 f89b 	bl	8004466 <I2C_IsAcknowledgeFailed>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e034      	b.n	80043a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004340:	d028      	beq.n	8004394 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004342:	f7fe fcc1 	bl	8002cc8 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	429a      	cmp	r2, r3
 8004350:	d302      	bcc.n	8004358 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d11d      	bne.n	8004394 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f003 0304 	and.w	r3, r3, #4
 8004362:	2b04      	cmp	r3, #4
 8004364:	d016      	beq.n	8004394 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	f043 0220 	orr.w	r2, r3, #32
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e007      	b.n	80043a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d1c3      	bne.n	800432a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043b8:	e049      	b.n	800444e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	f003 0310 	and.w	r3, r3, #16
 80043c4:	2b10      	cmp	r3, #16
 80043c6:	d119      	bne.n	80043fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f06f 0210 	mvn.w	r2, #16
 80043d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e030      	b.n	800445e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043fc:	f7fe fc64 	bl	8002cc8 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	429a      	cmp	r2, r3
 800440a:	d302      	bcc.n	8004412 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d11d      	bne.n	800444e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441c:	2b40      	cmp	r3, #64	; 0x40
 800441e:	d016      	beq.n	800444e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2220      	movs	r2, #32
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	f043 0220 	orr.w	r2, r3, #32
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e007      	b.n	800445e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004458:	2b40      	cmp	r3, #64	; 0x40
 800445a:	d1ae      	bne.n	80043ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800447c:	d11b      	bne.n	80044b6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004486:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2220      	movs	r2, #32
 8004492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	f043 0204 	orr.w	r2, r3, #4
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	bc80      	pop	{r7}
 80044c0:	4770      	bx	lr
	...

080044c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e272      	b.n	80049bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 8087 	beq.w	80045f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044e4:	4b92      	ldr	r3, [pc, #584]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f003 030c 	and.w	r3, r3, #12
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d00c      	beq.n	800450a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044f0:	4b8f      	ldr	r3, [pc, #572]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f003 030c 	and.w	r3, r3, #12
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d112      	bne.n	8004522 <HAL_RCC_OscConfig+0x5e>
 80044fc:	4b8c      	ldr	r3, [pc, #560]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004508:	d10b      	bne.n	8004522 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800450a:	4b89      	ldr	r3, [pc, #548]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d06c      	beq.n	80045f0 <HAL_RCC_OscConfig+0x12c>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d168      	bne.n	80045f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e24c      	b.n	80049bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800452a:	d106      	bne.n	800453a <HAL_RCC_OscConfig+0x76>
 800452c:	4b80      	ldr	r3, [pc, #512]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a7f      	ldr	r2, [pc, #508]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 8004532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004536:	6013      	str	r3, [r2, #0]
 8004538:	e02e      	b.n	8004598 <HAL_RCC_OscConfig+0xd4>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10c      	bne.n	800455c <HAL_RCC_OscConfig+0x98>
 8004542:	4b7b      	ldr	r3, [pc, #492]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a7a      	ldr	r2, [pc, #488]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 8004548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	4b78      	ldr	r3, [pc, #480]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a77      	ldr	r2, [pc, #476]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 8004554:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	e01d      	b.n	8004598 <HAL_RCC_OscConfig+0xd4>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004564:	d10c      	bne.n	8004580 <HAL_RCC_OscConfig+0xbc>
 8004566:	4b72      	ldr	r3, [pc, #456]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a71      	ldr	r2, [pc, #452]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 800456c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	4b6f      	ldr	r3, [pc, #444]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a6e      	ldr	r2, [pc, #440]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 8004578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	e00b      	b.n	8004598 <HAL_RCC_OscConfig+0xd4>
 8004580:	4b6b      	ldr	r3, [pc, #428]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a6a      	ldr	r2, [pc, #424]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 8004586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	4b68      	ldr	r3, [pc, #416]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a67      	ldr	r2, [pc, #412]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 8004592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004596:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d013      	beq.n	80045c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a0:	f7fe fb92 	bl	8002cc8 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a8:	f7fe fb8e 	bl	8002cc8 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b64      	cmp	r3, #100	; 0x64
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e200      	b.n	80049bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ba:	4b5d      	ldr	r3, [pc, #372]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0f0      	beq.n	80045a8 <HAL_RCC_OscConfig+0xe4>
 80045c6:	e014      	b.n	80045f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c8:	f7fe fb7e 	bl	8002cc8 <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045d0:	f7fe fb7a 	bl	8002cc8 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b64      	cmp	r3, #100	; 0x64
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e1ec      	b.n	80049bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045e2:	4b53      	ldr	r3, [pc, #332]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1f0      	bne.n	80045d0 <HAL_RCC_OscConfig+0x10c>
 80045ee:	e000      	b.n	80045f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d063      	beq.n	80046c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045fe:	4b4c      	ldr	r3, [pc, #304]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f003 030c 	and.w	r3, r3, #12
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00b      	beq.n	8004622 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800460a:	4b49      	ldr	r3, [pc, #292]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f003 030c 	and.w	r3, r3, #12
 8004612:	2b08      	cmp	r3, #8
 8004614:	d11c      	bne.n	8004650 <HAL_RCC_OscConfig+0x18c>
 8004616:	4b46      	ldr	r3, [pc, #280]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d116      	bne.n	8004650 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004622:	4b43      	ldr	r3, [pc, #268]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d005      	beq.n	800463a <HAL_RCC_OscConfig+0x176>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d001      	beq.n	800463a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e1c0      	b.n	80049bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800463a:	4b3d      	ldr	r3, [pc, #244]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	4939      	ldr	r1, [pc, #228]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 800464a:	4313      	orrs	r3, r2
 800464c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800464e:	e03a      	b.n	80046c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d020      	beq.n	800469a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004658:	4b36      	ldr	r3, [pc, #216]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 800465a:	2201      	movs	r2, #1
 800465c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465e:	f7fe fb33 	bl	8002cc8 <HAL_GetTick>
 8004662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004664:	e008      	b.n	8004678 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004666:	f7fe fb2f 	bl	8002cc8 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e1a1      	b.n	80049bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004678:	4b2d      	ldr	r3, [pc, #180]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0f0      	beq.n	8004666 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004684:	4b2a      	ldr	r3, [pc, #168]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	4927      	ldr	r1, [pc, #156]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 8004694:	4313      	orrs	r3, r2
 8004696:	600b      	str	r3, [r1, #0]
 8004698:	e015      	b.n	80046c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800469a:	4b26      	ldr	r3, [pc, #152]	; (8004734 <HAL_RCC_OscConfig+0x270>)
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a0:	f7fe fb12 	bl	8002cc8 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046a8:	f7fe fb0e 	bl	8002cc8 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e180      	b.n	80049bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ba:	4b1d      	ldr	r3, [pc, #116]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f0      	bne.n	80046a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d03a      	beq.n	8004748 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d019      	beq.n	800470e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046da:	4b17      	ldr	r3, [pc, #92]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 80046dc:	2201      	movs	r2, #1
 80046de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046e0:	f7fe faf2 	bl	8002cc8 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046e8:	f7fe faee 	bl	8002cc8 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e160      	b.n	80049bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046fa:	4b0d      	ldr	r3, [pc, #52]	; (8004730 <HAL_RCC_OscConfig+0x26c>)
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0f0      	beq.n	80046e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004706:	2001      	movs	r0, #1
 8004708:	f000 face 	bl	8004ca8 <RCC_Delay>
 800470c:	e01c      	b.n	8004748 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800470e:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004714:	f7fe fad8 	bl	8002cc8 <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800471a:	e00f      	b.n	800473c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800471c:	f7fe fad4 	bl	8002cc8 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d908      	bls.n	800473c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e146      	b.n	80049bc <HAL_RCC_OscConfig+0x4f8>
 800472e:	bf00      	nop
 8004730:	40021000 	.word	0x40021000
 8004734:	42420000 	.word	0x42420000
 8004738:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800473c:	4b92      	ldr	r3, [pc, #584]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1e9      	bne.n	800471c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0304 	and.w	r3, r3, #4
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 80a6 	beq.w	80048a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004756:	2300      	movs	r3, #0
 8004758:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800475a:	4b8b      	ldr	r3, [pc, #556]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10d      	bne.n	8004782 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004766:	4b88      	ldr	r3, [pc, #544]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	4a87      	ldr	r2, [pc, #540]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 800476c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004770:	61d3      	str	r3, [r2, #28]
 8004772:	4b85      	ldr	r3, [pc, #532]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800477a:	60bb      	str	r3, [r7, #8]
 800477c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800477e:	2301      	movs	r3, #1
 8004780:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004782:	4b82      	ldr	r3, [pc, #520]	; (800498c <HAL_RCC_OscConfig+0x4c8>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478a:	2b00      	cmp	r3, #0
 800478c:	d118      	bne.n	80047c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800478e:	4b7f      	ldr	r3, [pc, #508]	; (800498c <HAL_RCC_OscConfig+0x4c8>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a7e      	ldr	r2, [pc, #504]	; (800498c <HAL_RCC_OscConfig+0x4c8>)
 8004794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800479a:	f7fe fa95 	bl	8002cc8 <HAL_GetTick>
 800479e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a0:	e008      	b.n	80047b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047a2:	f7fe fa91 	bl	8002cc8 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b64      	cmp	r3, #100	; 0x64
 80047ae:	d901      	bls.n	80047b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e103      	b.n	80049bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b4:	4b75      	ldr	r3, [pc, #468]	; (800498c <HAL_RCC_OscConfig+0x4c8>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0f0      	beq.n	80047a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d106      	bne.n	80047d6 <HAL_RCC_OscConfig+0x312>
 80047c8:	4b6f      	ldr	r3, [pc, #444]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	4a6e      	ldr	r2, [pc, #440]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 80047ce:	f043 0301 	orr.w	r3, r3, #1
 80047d2:	6213      	str	r3, [r2, #32]
 80047d4:	e02d      	b.n	8004832 <HAL_RCC_OscConfig+0x36e>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10c      	bne.n	80047f8 <HAL_RCC_OscConfig+0x334>
 80047de:	4b6a      	ldr	r3, [pc, #424]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	4a69      	ldr	r2, [pc, #420]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 80047e4:	f023 0301 	bic.w	r3, r3, #1
 80047e8:	6213      	str	r3, [r2, #32]
 80047ea:	4b67      	ldr	r3, [pc, #412]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	4a66      	ldr	r2, [pc, #408]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 80047f0:	f023 0304 	bic.w	r3, r3, #4
 80047f4:	6213      	str	r3, [r2, #32]
 80047f6:	e01c      	b.n	8004832 <HAL_RCC_OscConfig+0x36e>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	2b05      	cmp	r3, #5
 80047fe:	d10c      	bne.n	800481a <HAL_RCC_OscConfig+0x356>
 8004800:	4b61      	ldr	r3, [pc, #388]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	4a60      	ldr	r2, [pc, #384]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 8004806:	f043 0304 	orr.w	r3, r3, #4
 800480a:	6213      	str	r3, [r2, #32]
 800480c:	4b5e      	ldr	r3, [pc, #376]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	4a5d      	ldr	r2, [pc, #372]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 8004812:	f043 0301 	orr.w	r3, r3, #1
 8004816:	6213      	str	r3, [r2, #32]
 8004818:	e00b      	b.n	8004832 <HAL_RCC_OscConfig+0x36e>
 800481a:	4b5b      	ldr	r3, [pc, #364]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	4a5a      	ldr	r2, [pc, #360]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 8004820:	f023 0301 	bic.w	r3, r3, #1
 8004824:	6213      	str	r3, [r2, #32]
 8004826:	4b58      	ldr	r3, [pc, #352]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	4a57      	ldr	r2, [pc, #348]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 800482c:	f023 0304 	bic.w	r3, r3, #4
 8004830:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d015      	beq.n	8004866 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800483a:	f7fe fa45 	bl	8002cc8 <HAL_GetTick>
 800483e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004840:	e00a      	b.n	8004858 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004842:	f7fe fa41 	bl	8002cc8 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004850:	4293      	cmp	r3, r2
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e0b1      	b.n	80049bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004858:	4b4b      	ldr	r3, [pc, #300]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d0ee      	beq.n	8004842 <HAL_RCC_OscConfig+0x37e>
 8004864:	e014      	b.n	8004890 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004866:	f7fe fa2f 	bl	8002cc8 <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800486c:	e00a      	b.n	8004884 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800486e:	f7fe fa2b 	bl	8002cc8 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	f241 3288 	movw	r2, #5000	; 0x1388
 800487c:	4293      	cmp	r3, r2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e09b      	b.n	80049bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004884:	4b40      	ldr	r3, [pc, #256]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1ee      	bne.n	800486e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004890:	7dfb      	ldrb	r3, [r7, #23]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d105      	bne.n	80048a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004896:	4b3c      	ldr	r3, [pc, #240]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	4a3b      	ldr	r2, [pc, #236]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 800489c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 8087 	beq.w	80049ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048ac:	4b36      	ldr	r3, [pc, #216]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f003 030c 	and.w	r3, r3, #12
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d061      	beq.n	800497c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d146      	bne.n	800494e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c0:	4b33      	ldr	r3, [pc, #204]	; (8004990 <HAL_RCC_OscConfig+0x4cc>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c6:	f7fe f9ff 	bl	8002cc8 <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048cc:	e008      	b.n	80048e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ce:	f7fe f9fb 	bl	8002cc8 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e06d      	b.n	80049bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048e0:	4b29      	ldr	r3, [pc, #164]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1f0      	bne.n	80048ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f4:	d108      	bne.n	8004908 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048f6:	4b24      	ldr	r3, [pc, #144]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	4921      	ldr	r1, [pc, #132]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 8004904:	4313      	orrs	r3, r2
 8004906:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004908:	4b1f      	ldr	r3, [pc, #124]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a19      	ldr	r1, [r3, #32]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	430b      	orrs	r3, r1
 800491a:	491b      	ldr	r1, [pc, #108]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 800491c:	4313      	orrs	r3, r2
 800491e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004920:	4b1b      	ldr	r3, [pc, #108]	; (8004990 <HAL_RCC_OscConfig+0x4cc>)
 8004922:	2201      	movs	r2, #1
 8004924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004926:	f7fe f9cf 	bl	8002cc8 <HAL_GetTick>
 800492a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800492c:	e008      	b.n	8004940 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800492e:	f7fe f9cb 	bl	8002cc8 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e03d      	b.n	80049bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004940:	4b11      	ldr	r3, [pc, #68]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0f0      	beq.n	800492e <HAL_RCC_OscConfig+0x46a>
 800494c:	e035      	b.n	80049ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800494e:	4b10      	ldr	r3, [pc, #64]	; (8004990 <HAL_RCC_OscConfig+0x4cc>)
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004954:	f7fe f9b8 	bl	8002cc8 <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800495c:	f7fe f9b4 	bl	8002cc8 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e026      	b.n	80049bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800496e:	4b06      	ldr	r3, [pc, #24]	; (8004988 <HAL_RCC_OscConfig+0x4c4>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1f0      	bne.n	800495c <HAL_RCC_OscConfig+0x498>
 800497a:	e01e      	b.n	80049ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d107      	bne.n	8004994 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e019      	b.n	80049bc <HAL_RCC_OscConfig+0x4f8>
 8004988:	40021000 	.word	0x40021000
 800498c:	40007000 	.word	0x40007000
 8004990:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004994:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <HAL_RCC_OscConfig+0x500>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d106      	bne.n	80049b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d001      	beq.n	80049ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e000      	b.n	80049bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40021000 	.word	0x40021000

080049c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e0d0      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049dc:	4b6a      	ldr	r3, [pc, #424]	; (8004b88 <HAL_RCC_ClockConfig+0x1c0>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d910      	bls.n	8004a0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ea:	4b67      	ldr	r3, [pc, #412]	; (8004b88 <HAL_RCC_ClockConfig+0x1c0>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f023 0207 	bic.w	r2, r3, #7
 80049f2:	4965      	ldr	r1, [pc, #404]	; (8004b88 <HAL_RCC_ClockConfig+0x1c0>)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049fa:	4b63      	ldr	r3, [pc, #396]	; (8004b88 <HAL_RCC_ClockConfig+0x1c0>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0307 	and.w	r3, r3, #7
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d001      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e0b8      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d020      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0304 	and.w	r3, r3, #4
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a24:	4b59      	ldr	r3, [pc, #356]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	4a58      	ldr	r2, [pc, #352]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004a2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a3c:	4b53      	ldr	r3, [pc, #332]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	4a52      	ldr	r2, [pc, #328]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004a42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004a46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a48:	4b50      	ldr	r3, [pc, #320]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	494d      	ldr	r1, [pc, #308]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d040      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d107      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a6e:	4b47      	ldr	r3, [pc, #284]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d115      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e07f      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d107      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a86:	4b41      	ldr	r3, [pc, #260]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d109      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e073      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a96:	4b3d      	ldr	r3, [pc, #244]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e06b      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aa6:	4b39      	ldr	r3, [pc, #228]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f023 0203 	bic.w	r2, r3, #3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	4936      	ldr	r1, [pc, #216]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ab8:	f7fe f906 	bl	8002cc8 <HAL_GetTick>
 8004abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004abe:	e00a      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ac0:	f7fe f902 	bl	8002cc8 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e053      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad6:	4b2d      	ldr	r3, [pc, #180]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f003 020c 	and.w	r2, r3, #12
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d1eb      	bne.n	8004ac0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ae8:	4b27      	ldr	r3, [pc, #156]	; (8004b88 <HAL_RCC_ClockConfig+0x1c0>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d210      	bcs.n	8004b18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af6:	4b24      	ldr	r3, [pc, #144]	; (8004b88 <HAL_RCC_ClockConfig+0x1c0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f023 0207 	bic.w	r2, r3, #7
 8004afe:	4922      	ldr	r1, [pc, #136]	; (8004b88 <HAL_RCC_ClockConfig+0x1c0>)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b06:	4b20      	ldr	r3, [pc, #128]	; (8004b88 <HAL_RCC_ClockConfig+0x1c0>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0307 	and.w	r3, r3, #7
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d001      	beq.n	8004b18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e032      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d008      	beq.n	8004b36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b24:	4b19      	ldr	r3, [pc, #100]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	4916      	ldr	r1, [pc, #88]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0308 	and.w	r3, r3, #8
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d009      	beq.n	8004b56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b42:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	490e      	ldr	r1, [pc, #56]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b56:	f000 f821 	bl	8004b9c <HAL_RCC_GetSysClockFreq>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	091b      	lsrs	r3, r3, #4
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	490a      	ldr	r1, [pc, #40]	; (8004b90 <HAL_RCC_ClockConfig+0x1c8>)
 8004b68:	5ccb      	ldrb	r3, [r1, r3]
 8004b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b6e:	4a09      	ldr	r2, [pc, #36]	; (8004b94 <HAL_RCC_ClockConfig+0x1cc>)
 8004b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b72:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <HAL_RCC_ClockConfig+0x1d0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fe f864 	bl	8002c44 <HAL_InitTick>

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	40022000 	.word	0x40022000
 8004b8c:	40021000 	.word	0x40021000
 8004b90:	08007834 	.word	0x08007834
 8004b94:	20000090 	.word	0x20000090
 8004b98:	2000009c 	.word	0x2000009c

08004b9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60fb      	str	r3, [r7, #12]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60bb      	str	r3, [r7, #8]
 8004baa:	2300      	movs	r3, #0
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	2300      	movs	r3, #0
 8004bb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004bb6:	4b1e      	ldr	r3, [pc, #120]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x94>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f003 030c 	and.w	r3, r3, #12
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d002      	beq.n	8004bcc <HAL_RCC_GetSysClockFreq+0x30>
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d003      	beq.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x36>
 8004bca:	e027      	b.n	8004c1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bcc:	4b19      	ldr	r3, [pc, #100]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x98>)
 8004bce:	613b      	str	r3, [r7, #16]
      break;
 8004bd0:	e027      	b.n	8004c22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	0c9b      	lsrs	r3, r3, #18
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	4a17      	ldr	r2, [pc, #92]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004bdc:	5cd3      	ldrb	r3, [r2, r3]
 8004bde:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d010      	beq.n	8004c0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004bea:	4b11      	ldr	r3, [pc, #68]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x94>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	0c5b      	lsrs	r3, r3, #17
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	4a11      	ldr	r2, [pc, #68]	; (8004c3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004bf6:	5cd3      	ldrb	r3, [r2, r3]
 8004bf8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a0d      	ldr	r2, [pc, #52]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x98>)
 8004bfe:	fb03 f202 	mul.w	r2, r3, r2
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c08:	617b      	str	r3, [r7, #20]
 8004c0a:	e004      	b.n	8004c16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a0c      	ldr	r2, [pc, #48]	; (8004c40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c10:	fb02 f303 	mul.w	r3, r2, r3
 8004c14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	613b      	str	r3, [r7, #16]
      break;
 8004c1a:	e002      	b.n	8004c22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c1c:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c1e:	613b      	str	r3, [r7, #16]
      break;
 8004c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c22:	693b      	ldr	r3, [r7, #16]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	371c      	adds	r7, #28
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bc80      	pop	{r7}
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40021000 	.word	0x40021000
 8004c34:	007a1200 	.word	0x007a1200
 8004c38:	08007fb8 	.word	0x08007fb8
 8004c3c:	08007fc8 	.word	0x08007fc8
 8004c40:	003d0900 	.word	0x003d0900

08004c44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c48:	4b02      	ldr	r3, [pc, #8]	; (8004c54 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bc80      	pop	{r7}
 8004c52:	4770      	bx	lr
 8004c54:	20000090 	.word	0x20000090

08004c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c5c:	f7ff fff2 	bl	8004c44 <HAL_RCC_GetHCLKFreq>
 8004c60:	4602      	mov	r2, r0
 8004c62:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	0a1b      	lsrs	r3, r3, #8
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	4903      	ldr	r1, [pc, #12]	; (8004c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c6e:	5ccb      	ldrb	r3, [r1, r3]
 8004c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	08007844 	.word	0x08007844

08004c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c84:	f7ff ffde 	bl	8004c44 <HAL_RCC_GetHCLKFreq>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	4b05      	ldr	r3, [pc, #20]	; (8004ca0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	0adb      	lsrs	r3, r3, #11
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	4903      	ldr	r1, [pc, #12]	; (8004ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c96:	5ccb      	ldrb	r3, [r1, r3]
 8004c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	08007844 	.word	0x08007844

08004ca8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004cb0:	4b0a      	ldr	r3, [pc, #40]	; (8004cdc <RCC_Delay+0x34>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a0a      	ldr	r2, [pc, #40]	; (8004ce0 <RCC_Delay+0x38>)
 8004cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cba:	0a5b      	lsrs	r3, r3, #9
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	fb02 f303 	mul.w	r3, r2, r3
 8004cc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004cc4:	bf00      	nop
  }
  while (Delay --);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	1e5a      	subs	r2, r3, #1
 8004cca:	60fa      	str	r2, [r7, #12]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1f9      	bne.n	8004cc4 <RCC_Delay+0x1c>
}
 8004cd0:	bf00      	nop
 8004cd2:	bf00      	nop
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bc80      	pop	{r7}
 8004cda:	4770      	bx	lr
 8004cdc:	20000090 	.word	0x20000090
 8004ce0:	10624dd3 	.word	0x10624dd3

08004ce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e041      	b.n	8004d7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d106      	bne.n	8004d10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7fd fbf2 	bl	80024f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	4619      	mov	r1, r3
 8004d22:	4610      	mov	r0, r2
 8004d24:	f000 fba8 	bl	8005478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b082      	sub	sp, #8
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e041      	b.n	8004e18 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d106      	bne.n	8004dae <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f839 	bl	8004e20 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2202      	movs	r2, #2
 8004db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	f000 fb59 	bl	8005478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bc80      	pop	{r7}
 8004e30:	4770      	bx	lr

08004e32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b082      	sub	sp, #8
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e041      	b.n	8004ec8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d106      	bne.n	8004e5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f839 	bl	8004ed0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2202      	movs	r2, #2
 8004e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	4619      	mov	r1, r3
 8004e70:	4610      	mov	r0, r2
 8004e72:	f000 fb01 	bl	8005478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bc80      	pop	{r7}
 8004ee0:	4770      	bx	lr
	...

08004ee4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d109      	bne.n	8004f08 <HAL_TIM_PWM_Start+0x24>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	bf14      	ite	ne
 8004f00:	2301      	movne	r3, #1
 8004f02:	2300      	moveq	r3, #0
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	e022      	b.n	8004f4e <HAL_TIM_PWM_Start+0x6a>
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d109      	bne.n	8004f22 <HAL_TIM_PWM_Start+0x3e>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	bf14      	ite	ne
 8004f1a:	2301      	movne	r3, #1
 8004f1c:	2300      	moveq	r3, #0
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	e015      	b.n	8004f4e <HAL_TIM_PWM_Start+0x6a>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d109      	bne.n	8004f3c <HAL_TIM_PWM_Start+0x58>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	bf14      	ite	ne
 8004f34:	2301      	movne	r3, #1
 8004f36:	2300      	moveq	r3, #0
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	e008      	b.n	8004f4e <HAL_TIM_PWM_Start+0x6a>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	bf14      	ite	ne
 8004f48:	2301      	movne	r3, #1
 8004f4a:	2300      	moveq	r3, #0
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e05e      	b.n	8005014 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d104      	bne.n	8004f66 <HAL_TIM_PWM_Start+0x82>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f64:	e013      	b.n	8004f8e <HAL_TIM_PWM_Start+0xaa>
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	d104      	bne.n	8004f76 <HAL_TIM_PWM_Start+0x92>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f74:	e00b      	b.n	8004f8e <HAL_TIM_PWM_Start+0xaa>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d104      	bne.n	8004f86 <HAL_TIM_PWM_Start+0xa2>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f84:	e003      	b.n	8004f8e <HAL_TIM_PWM_Start+0xaa>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2202      	movs	r2, #2
 8004f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2201      	movs	r2, #1
 8004f94:	6839      	ldr	r1, [r7, #0]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 fd7f 	bl	8005a9a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a1e      	ldr	r2, [pc, #120]	; (800501c <HAL_TIM_PWM_Start+0x138>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d107      	bne.n	8004fb6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a18      	ldr	r2, [pc, #96]	; (800501c <HAL_TIM_PWM_Start+0x138>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d00e      	beq.n	8004fde <HAL_TIM_PWM_Start+0xfa>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc8:	d009      	beq.n	8004fde <HAL_TIM_PWM_Start+0xfa>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a14      	ldr	r2, [pc, #80]	; (8005020 <HAL_TIM_PWM_Start+0x13c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d004      	beq.n	8004fde <HAL_TIM_PWM_Start+0xfa>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a12      	ldr	r2, [pc, #72]	; (8005024 <HAL_TIM_PWM_Start+0x140>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d111      	bne.n	8005002 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2b06      	cmp	r3, #6
 8004fee:	d010      	beq.n	8005012 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f042 0201 	orr.w	r2, r2, #1
 8004ffe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005000:	e007      	b.n	8005012 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f042 0201 	orr.w	r2, r2, #1
 8005010:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	40012c00 	.word	0x40012c00
 8005020:	40000400 	.word	0x40000400
 8005024:	40000800 	.word	0x40000800

08005028 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005034:	2300      	movs	r3, #0
 8005036:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800503e:	2b01      	cmp	r3, #1
 8005040:	d101      	bne.n	8005046 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005042:	2302      	movs	r3, #2
 8005044:	e048      	b.n	80050d8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b0c      	cmp	r3, #12
 8005052:	d839      	bhi.n	80050c8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005054:	a201      	add	r2, pc, #4	; (adr r2, 800505c <HAL_TIM_OC_ConfigChannel+0x34>)
 8005056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505a:	bf00      	nop
 800505c:	08005091 	.word	0x08005091
 8005060:	080050c9 	.word	0x080050c9
 8005064:	080050c9 	.word	0x080050c9
 8005068:	080050c9 	.word	0x080050c9
 800506c:	0800509f 	.word	0x0800509f
 8005070:	080050c9 	.word	0x080050c9
 8005074:	080050c9 	.word	0x080050c9
 8005078:	080050c9 	.word	0x080050c9
 800507c:	080050ad 	.word	0x080050ad
 8005080:	080050c9 	.word	0x080050c9
 8005084:	080050c9 	.word	0x080050c9
 8005088:	080050c9 	.word	0x080050c9
 800508c:	080050bb 	.word	0x080050bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68b9      	ldr	r1, [r7, #8]
 8005096:	4618      	mov	r0, r3
 8005098:	f000 fa50 	bl	800553c <TIM_OC1_SetConfig>
      break;
 800509c:	e017      	b.n	80050ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68b9      	ldr	r1, [r7, #8]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 faaf 	bl	8005608 <TIM_OC2_SetConfig>
      break;
 80050aa:	e010      	b.n	80050ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68b9      	ldr	r1, [r7, #8]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 fb12 	bl	80056dc <TIM_OC3_SetConfig>
      break;
 80050b8:	e009      	b.n	80050ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68b9      	ldr	r1, [r7, #8]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 fb75 	bl	80057b0 <TIM_OC4_SetConfig>
      break;
 80050c6:	e002      	b.n	80050ce <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	75fb      	strb	r3, [r7, #23]
      break;
 80050cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3718      	adds	r7, #24
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050ec:	2300      	movs	r3, #0
 80050ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050fa:	2302      	movs	r3, #2
 80050fc:	e0ae      	b.n	800525c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b0c      	cmp	r3, #12
 800510a:	f200 809f 	bhi.w	800524c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800510e:	a201      	add	r2, pc, #4	; (adr r2, 8005114 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005114:	08005149 	.word	0x08005149
 8005118:	0800524d 	.word	0x0800524d
 800511c:	0800524d 	.word	0x0800524d
 8005120:	0800524d 	.word	0x0800524d
 8005124:	08005189 	.word	0x08005189
 8005128:	0800524d 	.word	0x0800524d
 800512c:	0800524d 	.word	0x0800524d
 8005130:	0800524d 	.word	0x0800524d
 8005134:	080051cb 	.word	0x080051cb
 8005138:	0800524d 	.word	0x0800524d
 800513c:	0800524d 	.word	0x0800524d
 8005140:	0800524d 	.word	0x0800524d
 8005144:	0800520b 	.word	0x0800520b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68b9      	ldr	r1, [r7, #8]
 800514e:	4618      	mov	r0, r3
 8005150:	f000 f9f4 	bl	800553c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699a      	ldr	r2, [r3, #24]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0208 	orr.w	r2, r2, #8
 8005162:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699a      	ldr	r2, [r3, #24]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0204 	bic.w	r2, r2, #4
 8005172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6999      	ldr	r1, [r3, #24]
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	691a      	ldr	r2, [r3, #16]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	619a      	str	r2, [r3, #24]
      break;
 8005186:	e064      	b.n	8005252 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68b9      	ldr	r1, [r7, #8]
 800518e:	4618      	mov	r0, r3
 8005190:	f000 fa3a 	bl	8005608 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699a      	ldr	r2, [r3, #24]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699a      	ldr	r2, [r3, #24]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6999      	ldr	r1, [r3, #24]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	021a      	lsls	r2, r3, #8
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	619a      	str	r2, [r3, #24]
      break;
 80051c8:	e043      	b.n	8005252 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68b9      	ldr	r1, [r7, #8]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 fa83 	bl	80056dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69da      	ldr	r2, [r3, #28]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f042 0208 	orr.w	r2, r2, #8
 80051e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	69da      	ldr	r2, [r3, #28]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0204 	bic.w	r2, r2, #4
 80051f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	69d9      	ldr	r1, [r3, #28]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	691a      	ldr	r2, [r3, #16]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	61da      	str	r2, [r3, #28]
      break;
 8005208:	e023      	b.n	8005252 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68b9      	ldr	r1, [r7, #8]
 8005210:	4618      	mov	r0, r3
 8005212:	f000 facd 	bl	80057b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	69da      	ldr	r2, [r3, #28]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005224:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	69da      	ldr	r2, [r3, #28]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005234:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69d9      	ldr	r1, [r3, #28]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	021a      	lsls	r2, r3, #8
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	61da      	str	r2, [r3, #28]
      break;
 800524a:	e002      	b.n	8005252 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	75fb      	strb	r3, [r7, #23]
      break;
 8005250:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800525a:	7dfb      	ldrb	r3, [r7, #23]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005278:	2b01      	cmp	r3, #1
 800527a:	d101      	bne.n	8005280 <HAL_TIM_ConfigClockSource+0x1c>
 800527c:	2302      	movs	r3, #2
 800527e:	e0b4      	b.n	80053ea <HAL_TIM_ConfigClockSource+0x186>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800529e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052b8:	d03e      	beq.n	8005338 <HAL_TIM_ConfigClockSource+0xd4>
 80052ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052be:	f200 8087 	bhi.w	80053d0 <HAL_TIM_ConfigClockSource+0x16c>
 80052c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052c6:	f000 8086 	beq.w	80053d6 <HAL_TIM_ConfigClockSource+0x172>
 80052ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ce:	d87f      	bhi.n	80053d0 <HAL_TIM_ConfigClockSource+0x16c>
 80052d0:	2b70      	cmp	r3, #112	; 0x70
 80052d2:	d01a      	beq.n	800530a <HAL_TIM_ConfigClockSource+0xa6>
 80052d4:	2b70      	cmp	r3, #112	; 0x70
 80052d6:	d87b      	bhi.n	80053d0 <HAL_TIM_ConfigClockSource+0x16c>
 80052d8:	2b60      	cmp	r3, #96	; 0x60
 80052da:	d050      	beq.n	800537e <HAL_TIM_ConfigClockSource+0x11a>
 80052dc:	2b60      	cmp	r3, #96	; 0x60
 80052de:	d877      	bhi.n	80053d0 <HAL_TIM_ConfigClockSource+0x16c>
 80052e0:	2b50      	cmp	r3, #80	; 0x50
 80052e2:	d03c      	beq.n	800535e <HAL_TIM_ConfigClockSource+0xfa>
 80052e4:	2b50      	cmp	r3, #80	; 0x50
 80052e6:	d873      	bhi.n	80053d0 <HAL_TIM_ConfigClockSource+0x16c>
 80052e8:	2b40      	cmp	r3, #64	; 0x40
 80052ea:	d058      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x13a>
 80052ec:	2b40      	cmp	r3, #64	; 0x40
 80052ee:	d86f      	bhi.n	80053d0 <HAL_TIM_ConfigClockSource+0x16c>
 80052f0:	2b30      	cmp	r3, #48	; 0x30
 80052f2:	d064      	beq.n	80053be <HAL_TIM_ConfigClockSource+0x15a>
 80052f4:	2b30      	cmp	r3, #48	; 0x30
 80052f6:	d86b      	bhi.n	80053d0 <HAL_TIM_ConfigClockSource+0x16c>
 80052f8:	2b20      	cmp	r3, #32
 80052fa:	d060      	beq.n	80053be <HAL_TIM_ConfigClockSource+0x15a>
 80052fc:	2b20      	cmp	r3, #32
 80052fe:	d867      	bhi.n	80053d0 <HAL_TIM_ConfigClockSource+0x16c>
 8005300:	2b00      	cmp	r3, #0
 8005302:	d05c      	beq.n	80053be <HAL_TIM_ConfigClockSource+0x15a>
 8005304:	2b10      	cmp	r3, #16
 8005306:	d05a      	beq.n	80053be <HAL_TIM_ConfigClockSource+0x15a>
 8005308:	e062      	b.n	80053d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6818      	ldr	r0, [r3, #0]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	6899      	ldr	r1, [r3, #8]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f000 fb9f 	bl	8005a5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800532c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	609a      	str	r2, [r3, #8]
      break;
 8005336:	e04f      	b.n	80053d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6818      	ldr	r0, [r3, #0]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	6899      	ldr	r1, [r3, #8]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f000 fb88 	bl	8005a5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689a      	ldr	r2, [r3, #8]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800535a:	609a      	str	r2, [r3, #8]
      break;
 800535c:	e03c      	b.n	80053d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6818      	ldr	r0, [r3, #0]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	6859      	ldr	r1, [r3, #4]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	461a      	mov	r2, r3
 800536c:	f000 faff 	bl	800596e <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2150      	movs	r1, #80	; 0x50
 8005376:	4618      	mov	r0, r3
 8005378:	f000 fb56 	bl	8005a28 <TIM_ITRx_SetConfig>
      break;
 800537c:	e02c      	b.n	80053d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6818      	ldr	r0, [r3, #0]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	6859      	ldr	r1, [r3, #4]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	461a      	mov	r2, r3
 800538c:	f000 fb1d 	bl	80059ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2160      	movs	r1, #96	; 0x60
 8005396:	4618      	mov	r0, r3
 8005398:	f000 fb46 	bl	8005a28 <TIM_ITRx_SetConfig>
      break;
 800539c:	e01c      	b.n	80053d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6818      	ldr	r0, [r3, #0]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	6859      	ldr	r1, [r3, #4]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	461a      	mov	r2, r3
 80053ac:	f000 fadf 	bl	800596e <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2140      	movs	r1, #64	; 0x40
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 fb36 	bl	8005a28 <TIM_ITRx_SetConfig>
      break;
 80053bc:	e00c      	b.n	80053d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4619      	mov	r1, r3
 80053c8:	4610      	mov	r0, r2
 80053ca:	f000 fb2d 	bl	8005a28 <TIM_ITRx_SetConfig>
      break;
 80053ce:	e003      	b.n	80053d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	73fb      	strb	r3, [r7, #15]
      break;
 80053d4:	e000      	b.n	80053d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80053d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b082      	sub	sp, #8
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005402:	2b01      	cmp	r3, #1
 8005404:	d101      	bne.n	800540a <HAL_TIM_SlaveConfigSynchro+0x18>
 8005406:	2302      	movs	r3, #2
 8005408:	e031      	b.n	800546e <HAL_TIM_SlaveConfigSynchro+0x7c>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2202      	movs	r2, #2
 8005416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800541a:	6839      	ldr	r1, [r7, #0]
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 fa15 	bl	800584c <TIM_SlaveTimer_SetConfig>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d009      	beq.n	800543c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e018      	b.n	800546e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800544a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68da      	ldr	r2, [r3, #12]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800545a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
	...

08005478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a29      	ldr	r2, [pc, #164]	; (8005530 <TIM_Base_SetConfig+0xb8>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d00b      	beq.n	80054a8 <TIM_Base_SetConfig+0x30>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005496:	d007      	beq.n	80054a8 <TIM_Base_SetConfig+0x30>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a26      	ldr	r2, [pc, #152]	; (8005534 <TIM_Base_SetConfig+0xbc>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d003      	beq.n	80054a8 <TIM_Base_SetConfig+0x30>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a25      	ldr	r2, [pc, #148]	; (8005538 <TIM_Base_SetConfig+0xc0>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d108      	bne.n	80054ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a1c      	ldr	r2, [pc, #112]	; (8005530 <TIM_Base_SetConfig+0xb8>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00b      	beq.n	80054da <TIM_Base_SetConfig+0x62>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c8:	d007      	beq.n	80054da <TIM_Base_SetConfig+0x62>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a19      	ldr	r2, [pc, #100]	; (8005534 <TIM_Base_SetConfig+0xbc>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d003      	beq.n	80054da <TIM_Base_SetConfig+0x62>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a18      	ldr	r2, [pc, #96]	; (8005538 <TIM_Base_SetConfig+0xc0>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d108      	bne.n	80054ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a07      	ldr	r2, [pc, #28]	; (8005530 <TIM_Base_SetConfig+0xb8>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d103      	bne.n	8005520 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	691a      	ldr	r2, [r3, #16]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	615a      	str	r2, [r3, #20]
}
 8005526:	bf00      	nop
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	bc80      	pop	{r7}
 800552e:	4770      	bx	lr
 8005530:	40012c00 	.word	0x40012c00
 8005534:	40000400 	.word	0x40000400
 8005538:	40000800 	.word	0x40000800

0800553c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	f023 0201 	bic.w	r2, r3, #1
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 0303 	bic.w	r3, r3, #3
 8005572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f023 0302 	bic.w	r3, r3, #2
 8005584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	4313      	orrs	r3, r2
 800558e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a1c      	ldr	r2, [pc, #112]	; (8005604 <TIM_OC1_SetConfig+0xc8>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d10c      	bne.n	80055b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f023 0308 	bic.w	r3, r3, #8
 800559e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f023 0304 	bic.w	r3, r3, #4
 80055b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a13      	ldr	r2, [pc, #76]	; (8005604 <TIM_OC1_SetConfig+0xc8>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d111      	bne.n	80055de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	4313      	orrs	r3, r2
 80055dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	621a      	str	r2, [r3, #32]
}
 80055f8:	bf00      	nop
 80055fa:	371c      	adds	r7, #28
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bc80      	pop	{r7}
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	40012c00 	.word	0x40012c00

08005608 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	f023 0210 	bic.w	r2, r3, #16
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800563e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	021b      	lsls	r3, r3, #8
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	4313      	orrs	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f023 0320 	bic.w	r3, r3, #32
 8005652:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	011b      	lsls	r3, r3, #4
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4313      	orrs	r3, r2
 800565e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a1d      	ldr	r2, [pc, #116]	; (80056d8 <TIM_OC2_SetConfig+0xd0>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d10d      	bne.n	8005684 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800566e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	011b      	lsls	r3, r3, #4
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	4313      	orrs	r3, r2
 800567a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005682:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a14      	ldr	r2, [pc, #80]	; (80056d8 <TIM_OC2_SetConfig+0xd0>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d113      	bne.n	80056b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005692:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800569a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	621a      	str	r2, [r3, #32]
}
 80056ce:	bf00      	nop
 80056d0:	371c      	adds	r7, #28
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bc80      	pop	{r7}
 80056d6:	4770      	bx	lr
 80056d8:	40012c00 	.word	0x40012c00

080056dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056dc:	b480      	push	{r7}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 0303 	bic.w	r3, r3, #3
 8005712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	021b      	lsls	r3, r3, #8
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	4313      	orrs	r3, r2
 8005730:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a1d      	ldr	r2, [pc, #116]	; (80057ac <TIM_OC3_SetConfig+0xd0>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d10d      	bne.n	8005756 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005740:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	021b      	lsls	r3, r3, #8
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	4313      	orrs	r3, r2
 800574c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a14      	ldr	r2, [pc, #80]	; (80057ac <TIM_OC3_SetConfig+0xd0>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d113      	bne.n	8005786 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800576c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	011b      	lsls	r3, r3, #4
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	4313      	orrs	r3, r2
 8005778:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	011b      	lsls	r3, r3, #4
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	4313      	orrs	r3, r2
 8005784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	621a      	str	r2, [r3, #32]
}
 80057a0:	bf00      	nop
 80057a2:	371c      	adds	r7, #28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bc80      	pop	{r7}
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	40012c00 	.word	0x40012c00

080057b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b087      	sub	sp, #28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	021b      	lsls	r3, r3, #8
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	031b      	lsls	r3, r3, #12
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a0f      	ldr	r2, [pc, #60]	; (8005848 <TIM_OC4_SetConfig+0x98>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d109      	bne.n	8005824 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005816:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	019b      	lsls	r3, r3, #6
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	4313      	orrs	r3, r2
 8005822:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	621a      	str	r2, [r3, #32]
}
 800583e:	bf00      	nop
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	bc80      	pop	{r7}
 8005846:	4770      	bx	lr
 8005848:	40012c00 	.word	0x40012c00

0800584c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b086      	sub	sp, #24
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005868:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	4313      	orrs	r3, r2
 8005872:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	f023 0307 	bic.w	r3, r3, #7
 800587a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	4313      	orrs	r3, r2
 8005884:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	2b70      	cmp	r3, #112	; 0x70
 8005894:	d01a      	beq.n	80058cc <TIM_SlaveTimer_SetConfig+0x80>
 8005896:	2b70      	cmp	r3, #112	; 0x70
 8005898:	d860      	bhi.n	800595c <TIM_SlaveTimer_SetConfig+0x110>
 800589a:	2b60      	cmp	r3, #96	; 0x60
 800589c:	d054      	beq.n	8005948 <TIM_SlaveTimer_SetConfig+0xfc>
 800589e:	2b60      	cmp	r3, #96	; 0x60
 80058a0:	d85c      	bhi.n	800595c <TIM_SlaveTimer_SetConfig+0x110>
 80058a2:	2b50      	cmp	r3, #80	; 0x50
 80058a4:	d046      	beq.n	8005934 <TIM_SlaveTimer_SetConfig+0xe8>
 80058a6:	2b50      	cmp	r3, #80	; 0x50
 80058a8:	d858      	bhi.n	800595c <TIM_SlaveTimer_SetConfig+0x110>
 80058aa:	2b40      	cmp	r3, #64	; 0x40
 80058ac:	d019      	beq.n	80058e2 <TIM_SlaveTimer_SetConfig+0x96>
 80058ae:	2b40      	cmp	r3, #64	; 0x40
 80058b0:	d854      	bhi.n	800595c <TIM_SlaveTimer_SetConfig+0x110>
 80058b2:	2b30      	cmp	r3, #48	; 0x30
 80058b4:	d055      	beq.n	8005962 <TIM_SlaveTimer_SetConfig+0x116>
 80058b6:	2b30      	cmp	r3, #48	; 0x30
 80058b8:	d850      	bhi.n	800595c <TIM_SlaveTimer_SetConfig+0x110>
 80058ba:	2b20      	cmp	r3, #32
 80058bc:	d051      	beq.n	8005962 <TIM_SlaveTimer_SetConfig+0x116>
 80058be:	2b20      	cmp	r3, #32
 80058c0:	d84c      	bhi.n	800595c <TIM_SlaveTimer_SetConfig+0x110>
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d04d      	beq.n	8005962 <TIM_SlaveTimer_SetConfig+0x116>
 80058c6:	2b10      	cmp	r3, #16
 80058c8:	d04b      	beq.n	8005962 <TIM_SlaveTimer_SetConfig+0x116>
 80058ca:	e047      	b.n	800595c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6818      	ldr	r0, [r3, #0]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	68d9      	ldr	r1, [r3, #12]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	f000 f8be 	bl	8005a5c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80058e0:	e040      	b.n	8005964 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b05      	cmp	r3, #5
 80058e8:	d101      	bne.n	80058ee <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e03b      	b.n	8005966 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6a1a      	ldr	r2, [r3, #32]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 0201 	bic.w	r2, r2, #1
 8005904:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005914:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	011b      	lsls	r3, r3, #4
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	4313      	orrs	r3, r2
 8005920:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	621a      	str	r2, [r3, #32]
      break;
 8005932:	e017      	b.n	8005964 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6818      	ldr	r0, [r3, #0]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	6899      	ldr	r1, [r3, #8]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	461a      	mov	r2, r3
 8005942:	f000 f814 	bl	800596e <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005946:	e00d      	b.n	8005964 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6818      	ldr	r0, [r3, #0]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	6899      	ldr	r1, [r3, #8]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	461a      	mov	r2, r3
 8005956:	f000 f838 	bl	80059ca <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800595a:	e003      	b.n	8005964 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	75fb      	strb	r3, [r7, #23]
      break;
 8005960:	e000      	b.n	8005964 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005962:	bf00      	nop
  }

  return status;
 8005964:	7dfb      	ldrb	r3, [r7, #23]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3718      	adds	r7, #24
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800596e:	b480      	push	{r7}
 8005970:	b087      	sub	sp, #28
 8005972:	af00      	add	r7, sp, #0
 8005974:	60f8      	str	r0, [r7, #12]
 8005976:	60b9      	str	r1, [r7, #8]
 8005978:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6a1b      	ldr	r3, [r3, #32]
 8005984:	f023 0201 	bic.w	r2, r3, #1
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005998:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	011b      	lsls	r3, r3, #4
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f023 030a 	bic.w	r3, r3, #10
 80059aa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	621a      	str	r2, [r3, #32]
}
 80059c0:	bf00      	nop
 80059c2:	371c      	adds	r7, #28
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bc80      	pop	{r7}
 80059c8:	4770      	bx	lr

080059ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b087      	sub	sp, #28
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	60f8      	str	r0, [r7, #12]
 80059d2:	60b9      	str	r1, [r7, #8]
 80059d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	f023 0210 	bic.w	r2, r3, #16
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	031b      	lsls	r3, r3, #12
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	621a      	str	r2, [r3, #32]
}
 8005a1e:	bf00      	nop
 8005a20:	371c      	adds	r7, #28
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bc80      	pop	{r7}
 8005a26:	4770      	bx	lr

08005a28 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a3e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	f043 0307 	orr.w	r3, r3, #7
 8005a4a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	609a      	str	r2, [r3, #8]
}
 8005a52:	bf00      	nop
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bc80      	pop	{r7}
 8005a5a:	4770      	bx	lr

08005a5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b087      	sub	sp, #28
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
 8005a68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	021a      	lsls	r2, r3, #8
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	609a      	str	r2, [r3, #8]
}
 8005a90:	bf00      	nop
 8005a92:	371c      	adds	r7, #28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bc80      	pop	{r7}
 8005a98:	4770      	bx	lr

08005a9a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b087      	sub	sp, #28
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	60f8      	str	r0, [r7, #12]
 8005aa2:	60b9      	str	r1, [r7, #8]
 8005aa4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	f003 031f 	and.w	r3, r3, #31
 8005aac:	2201      	movs	r2, #1
 8005aae:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6a1a      	ldr	r2, [r3, #32]
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	43db      	mvns	r3, r3
 8005abc:	401a      	ands	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6a1a      	ldr	r2, [r3, #32]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	f003 031f 	and.w	r3, r3, #31
 8005acc:	6879      	ldr	r1, [r7, #4]
 8005ace:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	621a      	str	r2, [r3, #32]
}
 8005ad8:	bf00      	nop
 8005ada:	371c      	adds	r7, #28
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bc80      	pop	{r7}
 8005ae0:	4770      	bx	lr
	...

08005ae4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d101      	bne.n	8005afc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005af8:	2302      	movs	r3, #2
 8005afa:	e046      	b.n	8005b8a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2202      	movs	r2, #2
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a16      	ldr	r2, [pc, #88]	; (8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d00e      	beq.n	8005b5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b48:	d009      	beq.n	8005b5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a12      	ldr	r2, [pc, #72]	; (8005b98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d004      	beq.n	8005b5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a10      	ldr	r2, [pc, #64]	; (8005b9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d10c      	bne.n	8005b78 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bc80      	pop	{r7}
 8005b92:	4770      	bx	lr
 8005b94:	40012c00 	.word	0x40012c00
 8005b98:	40000400 	.word	0x40000400
 8005b9c:	40000800 	.word	0x40000800

08005ba0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d101      	bne.n	8005bbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005bb8:	2302      	movs	r3, #2
 8005bba:	e03d      	b.n	8005c38 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bc80      	pop	{r7}
 8005c40:	4770      	bx	lr

08005c42 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b082      	sub	sp, #8
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e042      	b.n	8005cda <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d106      	bne.n	8005c6e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f7fc fd17 	bl	800269c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2224      	movs	r2, #36	; 0x24
 8005c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68da      	ldr	r2, [r3, #12]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c84:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fcd4 	bl	8006634 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	691a      	ldr	r2, [r3, #16]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c9a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	695a      	ldr	r2, [r3, #20]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005caa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68da      	ldr	r2, [r3, #12]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b084      	sub	sp, #16
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	60f8      	str	r0, [r7, #12]
 8005cea:	60b9      	str	r1, [r7, #8]
 8005cec:	4613      	mov	r3, r2
 8005cee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	d112      	bne.n	8005d22 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <HAL_UART_Receive_IT+0x26>
 8005d02:	88fb      	ldrh	r3, [r7, #6]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e00b      	b.n	8005d24 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d12:	88fb      	ldrh	r3, [r7, #6]
 8005d14:	461a      	mov	r2, r3
 8005d16:	68b9      	ldr	r1, [r7, #8]
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 fab6 	bl	800628a <UART_Start_Receive_IT>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	e000      	b.n	8005d24 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005d22:	2302      	movs	r3, #2
  }
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b0ba      	sub	sp, #232	; 0xe8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d62:	f003 030f 	and.w	r3, r3, #15
 8005d66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005d6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10f      	bne.n	8005d92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d76:	f003 0320 	and.w	r3, r3, #32
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d009      	beq.n	8005d92 <HAL_UART_IRQHandler+0x66>
 8005d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d82:	f003 0320 	and.w	r3, r3, #32
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fb93 	bl	80064b6 <UART_Receive_IT>
      return;
 8005d90:	e25b      	b.n	800624a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f000 80de 	beq.w	8005f58 <HAL_UART_IRQHandler+0x22c>
 8005d9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d106      	bne.n	8005db6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 80d1 	beq.w	8005f58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00b      	beq.n	8005dda <HAL_UART_IRQHandler+0xae>
 8005dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d005      	beq.n	8005dda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd2:	f043 0201 	orr.w	r2, r3, #1
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dde:	f003 0304 	and.w	r3, r3, #4
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00b      	beq.n	8005dfe <HAL_UART_IRQHandler+0xd2>
 8005de6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d005      	beq.n	8005dfe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df6:	f043 0202 	orr.w	r2, r3, #2
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e02:	f003 0302 	and.w	r3, r3, #2
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00b      	beq.n	8005e22 <HAL_UART_IRQHandler+0xf6>
 8005e0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d005      	beq.n	8005e22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e1a:	f043 0204 	orr.w	r2, r3, #4
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e26:	f003 0308 	and.w	r3, r3, #8
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d011      	beq.n	8005e52 <HAL_UART_IRQHandler+0x126>
 8005e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d105      	bne.n	8005e46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d005      	beq.n	8005e52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4a:	f043 0208 	orr.w	r2, r3, #8
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	f000 81f2 	beq.w	8006240 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e60:	f003 0320 	and.w	r3, r3, #32
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d008      	beq.n	8005e7a <HAL_UART_IRQHandler+0x14e>
 8005e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e6c:	f003 0320 	and.w	r3, r3, #32
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d002      	beq.n	8005e7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 fb1e 	bl	80064b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	bf14      	ite	ne
 8005e88:	2301      	movne	r3, #1
 8005e8a:	2300      	moveq	r3, #0
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e96:	f003 0308 	and.w	r3, r3, #8
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d103      	bne.n	8005ea6 <HAL_UART_IRQHandler+0x17a>
 8005e9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d04f      	beq.n	8005f46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fa28 	bl	80062fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d041      	beq.n	8005f3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3314      	adds	r3, #20
 8005ec0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ec8:	e853 3f00 	ldrex	r3, [r3]
 8005ecc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ed0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ed4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3314      	adds	r3, #20
 8005ee2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ee6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005eea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ef2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ef6:	e841 2300 	strex	r3, r2, [r1]
 8005efa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005efe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1d9      	bne.n	8005eba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d013      	beq.n	8005f36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f12:	4a7e      	ldr	r2, [pc, #504]	; (800610c <HAL_UART_IRQHandler+0x3e0>)
 8005f14:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fd f84a 	bl	8002fb4 <HAL_DMA_Abort_IT>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d016      	beq.n	8005f54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005f30:	4610      	mov	r0, r2
 8005f32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f34:	e00e      	b.n	8005f54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f993 	bl	8006262 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f3c:	e00a      	b.n	8005f54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f98f 	bl	8006262 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f44:	e006      	b.n	8005f54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f98b 	bl	8006262 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005f52:	e175      	b.n	8006240 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f54:	bf00      	nop
    return;
 8005f56:	e173      	b.n	8006240 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	f040 814f 	bne.w	8006200 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f66:	f003 0310 	and.w	r3, r3, #16
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	f000 8148 	beq.w	8006200 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f74:	f003 0310 	and.w	r3, r3, #16
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 8141 	beq.w	8006200 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60bb      	str	r3, [r7, #8]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	60bb      	str	r3, [r7, #8]
 8005f92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 80b6 	beq.w	8006110 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005fb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f000 8145 	beq.w	8006244 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	f080 813e 	bcs.w	8006244 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	2b20      	cmp	r3, #32
 8005fd8:	f000 8088 	beq.w	80060ec <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	330c      	adds	r3, #12
 8005fe2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fea:	e853 3f00 	ldrex	r3, [r3]
 8005fee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ff2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ff6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ffa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	330c      	adds	r3, #12
 8006004:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006008:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800600c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006010:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006014:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006018:	e841 2300 	strex	r3, r2, [r1]
 800601c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006020:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1d9      	bne.n	8005fdc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3314      	adds	r3, #20
 800602e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006038:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800603a:	f023 0301 	bic.w	r3, r3, #1
 800603e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3314      	adds	r3, #20
 8006048:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800604c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006050:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006052:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006054:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006058:	e841 2300 	strex	r3, r2, [r1]
 800605c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800605e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e1      	bne.n	8006028 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3314      	adds	r3, #20
 800606a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800606e:	e853 3f00 	ldrex	r3, [r3]
 8006072:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800607a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3314      	adds	r3, #20
 8006084:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006088:	66fa      	str	r2, [r7, #108]	; 0x6c
 800608a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800608e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006090:	e841 2300 	strex	r3, r2, [r1]
 8006094:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006096:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1e3      	bne.n	8006064 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2220      	movs	r2, #32
 80060a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	330c      	adds	r3, #12
 80060b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060b4:	e853 3f00 	ldrex	r3, [r3]
 80060b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060bc:	f023 0310 	bic.w	r3, r3, #16
 80060c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	330c      	adds	r3, #12
 80060ca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80060ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80060d0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060d6:	e841 2300 	strex	r3, r2, [r1]
 80060da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1e3      	bne.n	80060aa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7fc ff29 	bl	8002f3e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	b29b      	uxth	r3, r3
 8006100:	4619      	mov	r1, r3
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f8b6 	bl	8006274 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006108:	e09c      	b.n	8006244 <HAL_UART_IRQHandler+0x518>
 800610a:	bf00      	nop
 800610c:	080063c1 	.word	0x080063c1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006118:	b29b      	uxth	r3, r3
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006124:	b29b      	uxth	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 808e 	beq.w	8006248 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800612c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 8089 	beq.w	8006248 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	330c      	adds	r3, #12
 800613c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006140:	e853 3f00 	ldrex	r3, [r3]
 8006144:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006148:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800614c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	330c      	adds	r3, #12
 8006156:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800615a:	647a      	str	r2, [r7, #68]	; 0x44
 800615c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006160:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006162:	e841 2300 	strex	r3, r2, [r1]
 8006166:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1e3      	bne.n	8006136 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	3314      	adds	r3, #20
 8006174:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	e853 3f00 	ldrex	r3, [r3]
 800617c:	623b      	str	r3, [r7, #32]
   return(result);
 800617e:	6a3b      	ldr	r3, [r7, #32]
 8006180:	f023 0301 	bic.w	r3, r3, #1
 8006184:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	3314      	adds	r3, #20
 800618e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006192:	633a      	str	r2, [r7, #48]	; 0x30
 8006194:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006196:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800619a:	e841 2300 	strex	r3, r2, [r1]
 800619e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1e3      	bne.n	800616e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	330c      	adds	r3, #12
 80061ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	e853 3f00 	ldrex	r3, [r3]
 80061c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f023 0310 	bic.w	r3, r3, #16
 80061ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	330c      	adds	r3, #12
 80061d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80061d8:	61fa      	str	r2, [r7, #28]
 80061da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061dc:	69b9      	ldr	r1, [r7, #24]
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	e841 2300 	strex	r3, r2, [r1]
 80061e4:	617b      	str	r3, [r7, #20]
   return(result);
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1e3      	bne.n	80061b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061f6:	4619      	mov	r1, r3
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f83b 	bl	8006274 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061fe:	e023      	b.n	8006248 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006208:	2b00      	cmp	r3, #0
 800620a:	d009      	beq.n	8006220 <HAL_UART_IRQHandler+0x4f4>
 800620c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006214:	2b00      	cmp	r3, #0
 8006216:	d003      	beq.n	8006220 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f8e5 	bl	80063e8 <UART_Transmit_IT>
    return;
 800621e:	e014      	b.n	800624a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00e      	beq.n	800624a <HAL_UART_IRQHandler+0x51e>
 800622c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006234:	2b00      	cmp	r3, #0
 8006236:	d008      	beq.n	800624a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f924 	bl	8006486 <UART_EndTransmit_IT>
    return;
 800623e:	e004      	b.n	800624a <HAL_UART_IRQHandler+0x51e>
    return;
 8006240:	bf00      	nop
 8006242:	e002      	b.n	800624a <HAL_UART_IRQHandler+0x51e>
      return;
 8006244:	bf00      	nop
 8006246:	e000      	b.n	800624a <HAL_UART_IRQHandler+0x51e>
      return;
 8006248:	bf00      	nop
  }
}
 800624a:	37e8      	adds	r7, #232	; 0xe8
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	bc80      	pop	{r7}
 8006260:	4770      	bx	lr

08006262 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006262:	b480      	push	{r7}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800626a:	bf00      	nop
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	bc80      	pop	{r7}
 8006272:	4770      	bx	lr

08006274 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	460b      	mov	r3, r1
 800627e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	bc80      	pop	{r7}
 8006288:	4770      	bx	lr

0800628a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800628a:	b480      	push	{r7}
 800628c:	b085      	sub	sp, #20
 800628e:	af00      	add	r7, sp, #0
 8006290:	60f8      	str	r0, [r7, #12]
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	4613      	mov	r3, r2
 8006296:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	88fa      	ldrh	r2, [r7, #6]
 80062a2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	88fa      	ldrh	r2, [r7, #6]
 80062a8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2222      	movs	r2, #34	; 0x22
 80062b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d007      	beq.n	80062d0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68da      	ldr	r2, [r3, #12]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062ce:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	695a      	ldr	r2, [r3, #20]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f042 0201 	orr.w	r2, r2, #1
 80062de:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68da      	ldr	r2, [r3, #12]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0220 	orr.w	r2, r2, #32
 80062ee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bc80      	pop	{r7}
 80062fa:	4770      	bx	lr

080062fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b095      	sub	sp, #84	; 0x54
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	330c      	adds	r3, #12
 800630a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800630e:	e853 3f00 	ldrex	r3, [r3]
 8006312:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006316:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800631a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	330c      	adds	r3, #12
 8006322:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006324:	643a      	str	r2, [r7, #64]	; 0x40
 8006326:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006328:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800632a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800632c:	e841 2300 	strex	r3, r2, [r1]
 8006330:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1e5      	bne.n	8006304 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3314      	adds	r3, #20
 800633e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	e853 3f00 	ldrex	r3, [r3]
 8006346:	61fb      	str	r3, [r7, #28]
   return(result);
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	f023 0301 	bic.w	r3, r3, #1
 800634e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3314      	adds	r3, #20
 8006356:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006358:	62fa      	str	r2, [r7, #44]	; 0x2c
 800635a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800635e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006360:	e841 2300 	strex	r3, r2, [r1]
 8006364:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1e5      	bne.n	8006338 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006370:	2b01      	cmp	r3, #1
 8006372:	d119      	bne.n	80063a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	330c      	adds	r3, #12
 800637a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	e853 3f00 	ldrex	r3, [r3]
 8006382:	60bb      	str	r3, [r7, #8]
   return(result);
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f023 0310 	bic.w	r3, r3, #16
 800638a:	647b      	str	r3, [r7, #68]	; 0x44
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	330c      	adds	r3, #12
 8006392:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006394:	61ba      	str	r2, [r7, #24]
 8006396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	6979      	ldr	r1, [r7, #20]
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	e841 2300 	strex	r3, r2, [r1]
 80063a0:	613b      	str	r3, [r7, #16]
   return(result);
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e5      	bne.n	8006374 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2220      	movs	r2, #32
 80063ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80063b6:	bf00      	nop
 80063b8:	3754      	adds	r7, #84	; 0x54
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bc80      	pop	{r7}
 80063be:	4770      	bx	lr

080063c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f7ff ff41 	bl	8006262 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063e0:	bf00      	nop
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b21      	cmp	r3, #33	; 0x21
 80063fa:	d13e      	bne.n	800647a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006404:	d114      	bne.n	8006430 <UART_Transmit_IT+0x48>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d110      	bne.n	8006430 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	881b      	ldrh	r3, [r3, #0]
 8006418:	461a      	mov	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006422:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a1b      	ldr	r3, [r3, #32]
 8006428:	1c9a      	adds	r2, r3, #2
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	621a      	str	r2, [r3, #32]
 800642e:	e008      	b.n	8006442 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a1b      	ldr	r3, [r3, #32]
 8006434:	1c59      	adds	r1, r3, #1
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	6211      	str	r1, [r2, #32]
 800643a:	781a      	ldrb	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006446:	b29b      	uxth	r3, r3
 8006448:	3b01      	subs	r3, #1
 800644a:	b29b      	uxth	r3, r3
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	4619      	mov	r1, r3
 8006450:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10f      	bne.n	8006476 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68da      	ldr	r2, [r3, #12]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006464:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68da      	ldr	r2, [r3, #12]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006474:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006476:	2300      	movs	r3, #0
 8006478:	e000      	b.n	800647c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800647a:	2302      	movs	r3, #2
  }
}
 800647c:	4618      	mov	r0, r3
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	bc80      	pop	{r7}
 8006484:	4770      	bx	lr

08006486 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b082      	sub	sp, #8
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68da      	ldr	r2, [r3, #12]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800649c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7ff fed2 	bl	8006250 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b08c      	sub	sp, #48	; 0x30
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b22      	cmp	r3, #34	; 0x22
 80064c8:	f040 80ae 	bne.w	8006628 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d4:	d117      	bne.n	8006506 <UART_Receive_IT+0x50>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d113      	bne.n	8006506 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80064de:	2300      	movs	r3, #0
 80064e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fe:	1c9a      	adds	r2, r3, #2
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	629a      	str	r2, [r3, #40]	; 0x28
 8006504:	e026      	b.n	8006554 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800650c:	2300      	movs	r3, #0
 800650e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006518:	d007      	beq.n	800652a <UART_Receive_IT+0x74>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10a      	bne.n	8006538 <UART_Receive_IT+0x82>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d106      	bne.n	8006538 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	b2da      	uxtb	r2, r3
 8006532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006534:	701a      	strb	r2, [r3, #0]
 8006536:	e008      	b.n	800654a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	b2db      	uxtb	r3, r3
 8006540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006544:	b2da      	uxtb	r2, r3
 8006546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006548:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654e:	1c5a      	adds	r2, r3, #1
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006558:	b29b      	uxth	r3, r3
 800655a:	3b01      	subs	r3, #1
 800655c:	b29b      	uxth	r3, r3
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	4619      	mov	r1, r3
 8006562:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006564:	2b00      	cmp	r3, #0
 8006566:	d15d      	bne.n	8006624 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68da      	ldr	r2, [r3, #12]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f022 0220 	bic.w	r2, r2, #32
 8006576:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68da      	ldr	r2, [r3, #12]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006586:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	695a      	ldr	r2, [r3, #20]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f022 0201 	bic.w	r2, r2, #1
 8006596:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2220      	movs	r2, #32
 800659c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d135      	bne.n	800661a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	330c      	adds	r3, #12
 80065ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	e853 3f00 	ldrex	r3, [r3]
 80065c2:	613b      	str	r3, [r7, #16]
   return(result);
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	f023 0310 	bic.w	r3, r3, #16
 80065ca:	627b      	str	r3, [r7, #36]	; 0x24
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	330c      	adds	r3, #12
 80065d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065d4:	623a      	str	r2, [r7, #32]
 80065d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d8:	69f9      	ldr	r1, [r7, #28]
 80065da:	6a3a      	ldr	r2, [r7, #32]
 80065dc:	e841 2300 	strex	r3, r2, [r1]
 80065e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1e5      	bne.n	80065b4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0310 	and.w	r3, r3, #16
 80065f2:	2b10      	cmp	r3, #16
 80065f4:	d10a      	bne.n	800660c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065f6:	2300      	movs	r3, #0
 80065f8:	60fb      	str	r3, [r7, #12]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	60fb      	str	r3, [r7, #12]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	60fb      	str	r3, [r7, #12]
 800660a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006610:	4619      	mov	r1, r3
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7ff fe2e 	bl	8006274 <HAL_UARTEx_RxEventCallback>
 8006618:	e002      	b.n	8006620 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7fa fd20 	bl	8001060 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	e002      	b.n	800662a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006624:	2300      	movs	r3, #0
 8006626:	e000      	b.n	800662a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006628:	2302      	movs	r3, #2
  }
}
 800662a:	4618      	mov	r0, r3
 800662c:	3730      	adds	r7, #48	; 0x30
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
	...

08006634 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68da      	ldr	r2, [r3, #12]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	430a      	orrs	r2, r1
 8006650:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	689a      	ldr	r2, [r3, #8]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	431a      	orrs	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	4313      	orrs	r3, r2
 8006662:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800666e:	f023 030c 	bic.w	r3, r3, #12
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	6812      	ldr	r2, [r2, #0]
 8006676:	68b9      	ldr	r1, [r7, #8]
 8006678:	430b      	orrs	r3, r1
 800667a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	699a      	ldr	r2, [r3, #24]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	430a      	orrs	r2, r1
 8006690:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a2c      	ldr	r2, [pc, #176]	; (8006748 <UART_SetConfig+0x114>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d103      	bne.n	80066a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800669c:	f7fe faf0 	bl	8004c80 <HAL_RCC_GetPCLK2Freq>
 80066a0:	60f8      	str	r0, [r7, #12]
 80066a2:	e002      	b.n	80066aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80066a4:	f7fe fad8 	bl	8004c58 <HAL_RCC_GetPCLK1Freq>
 80066a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	4613      	mov	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	009a      	lsls	r2, r3, #2
 80066b4:	441a      	add	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c0:	4a22      	ldr	r2, [pc, #136]	; (800674c <UART_SetConfig+0x118>)
 80066c2:	fba2 2303 	umull	r2, r3, r2, r3
 80066c6:	095b      	lsrs	r3, r3, #5
 80066c8:	0119      	lsls	r1, r3, #4
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	4613      	mov	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4413      	add	r3, r2
 80066d2:	009a      	lsls	r2, r3, #2
 80066d4:	441a      	add	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80066e0:	4b1a      	ldr	r3, [pc, #104]	; (800674c <UART_SetConfig+0x118>)
 80066e2:	fba3 0302 	umull	r0, r3, r3, r2
 80066e6:	095b      	lsrs	r3, r3, #5
 80066e8:	2064      	movs	r0, #100	; 0x64
 80066ea:	fb00 f303 	mul.w	r3, r0, r3
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	011b      	lsls	r3, r3, #4
 80066f2:	3332      	adds	r3, #50	; 0x32
 80066f4:	4a15      	ldr	r2, [pc, #84]	; (800674c <UART_SetConfig+0x118>)
 80066f6:	fba2 2303 	umull	r2, r3, r2, r3
 80066fa:	095b      	lsrs	r3, r3, #5
 80066fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006700:	4419      	add	r1, r3
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	4613      	mov	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4413      	add	r3, r2
 800670a:	009a      	lsls	r2, r3, #2
 800670c:	441a      	add	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	fbb2 f2f3 	udiv	r2, r2, r3
 8006718:	4b0c      	ldr	r3, [pc, #48]	; (800674c <UART_SetConfig+0x118>)
 800671a:	fba3 0302 	umull	r0, r3, r3, r2
 800671e:	095b      	lsrs	r3, r3, #5
 8006720:	2064      	movs	r0, #100	; 0x64
 8006722:	fb00 f303 	mul.w	r3, r0, r3
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	011b      	lsls	r3, r3, #4
 800672a:	3332      	adds	r3, #50	; 0x32
 800672c:	4a07      	ldr	r2, [pc, #28]	; (800674c <UART_SetConfig+0x118>)
 800672e:	fba2 2303 	umull	r2, r3, r2, r3
 8006732:	095b      	lsrs	r3, r3, #5
 8006734:	f003 020f 	and.w	r2, r3, #15
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	440a      	add	r2, r1
 800673e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006740:	bf00      	nop
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	40013800 	.word	0x40013800
 800674c:	51eb851f 	.word	0x51eb851f

08006750 <_ZdlPvj>:
 8006750:	f000 b811 	b.w	8006776 <_ZdlPv>

08006754 <_Znwj>:
 8006754:	2801      	cmp	r0, #1
 8006756:	bf38      	it	cc
 8006758:	2001      	movcc	r0, #1
 800675a:	b510      	push	{r4, lr}
 800675c:	4604      	mov	r4, r0
 800675e:	4620      	mov	r0, r4
 8006760:	f000 fb7e 	bl	8006e60 <malloc>
 8006764:	b930      	cbnz	r0, 8006774 <_Znwj+0x20>
 8006766:	f000 f809 	bl	800677c <_ZSt15get_new_handlerv>
 800676a:	b908      	cbnz	r0, 8006770 <_Znwj+0x1c>
 800676c:	f000 fb46 	bl	8006dfc <abort>
 8006770:	4780      	blx	r0
 8006772:	e7f4      	b.n	800675e <_Znwj+0xa>
 8006774:	bd10      	pop	{r4, pc}

08006776 <_ZdlPv>:
 8006776:	f000 bb7b 	b.w	8006e70 <free>
	...

0800677c <_ZSt15get_new_handlerv>:
 800677c:	4b02      	ldr	r3, [pc, #8]	; (8006788 <_ZSt15get_new_handlerv+0xc>)
 800677e:	6818      	ldr	r0, [r3, #0]
 8006780:	f3bf 8f5b 	dmb	ish
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	20000794 	.word	0x20000794
 800678c:	00000000 	.word	0x00000000

08006790 <atan>:
 8006790:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006794:	4bb6      	ldr	r3, [pc, #728]	; (8006a70 <atan+0x2e0>)
 8006796:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800679a:	429e      	cmp	r6, r3
 800679c:	4604      	mov	r4, r0
 800679e:	460d      	mov	r5, r1
 80067a0:	468b      	mov	fp, r1
 80067a2:	dd17      	ble.n	80067d4 <atan+0x44>
 80067a4:	4bb3      	ldr	r3, [pc, #716]	; (8006a74 <atan+0x2e4>)
 80067a6:	429e      	cmp	r6, r3
 80067a8:	dc01      	bgt.n	80067ae <atan+0x1e>
 80067aa:	d109      	bne.n	80067c0 <atan+0x30>
 80067ac:	b140      	cbz	r0, 80067c0 <atan+0x30>
 80067ae:	4622      	mov	r2, r4
 80067b0:	462b      	mov	r3, r5
 80067b2:	4620      	mov	r0, r4
 80067b4:	4629      	mov	r1, r5
 80067b6:	f7f9 fcd1 	bl	800015c <__adddf3>
 80067ba:	4604      	mov	r4, r0
 80067bc:	460d      	mov	r5, r1
 80067be:	e005      	b.n	80067cc <atan+0x3c>
 80067c0:	f1bb 0f00 	cmp.w	fp, #0
 80067c4:	4cac      	ldr	r4, [pc, #688]	; (8006a78 <atan+0x2e8>)
 80067c6:	f300 8121 	bgt.w	8006a0c <atan+0x27c>
 80067ca:	4dac      	ldr	r5, [pc, #688]	; (8006a7c <atan+0x2ec>)
 80067cc:	4620      	mov	r0, r4
 80067ce:	4629      	mov	r1, r5
 80067d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d4:	4baa      	ldr	r3, [pc, #680]	; (8006a80 <atan+0x2f0>)
 80067d6:	429e      	cmp	r6, r3
 80067d8:	dc11      	bgt.n	80067fe <atan+0x6e>
 80067da:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80067de:	429e      	cmp	r6, r3
 80067e0:	dc0a      	bgt.n	80067f8 <atan+0x68>
 80067e2:	a38b      	add	r3, pc, #556	; (adr r3, 8006a10 <atan+0x280>)
 80067e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e8:	f7f9 fcb8 	bl	800015c <__adddf3>
 80067ec:	2200      	movs	r2, #0
 80067ee:	4ba5      	ldr	r3, [pc, #660]	; (8006a84 <atan+0x2f4>)
 80067f0:	f7fa f8fa 	bl	80009e8 <__aeabi_dcmpgt>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	d1e9      	bne.n	80067cc <atan+0x3c>
 80067f8:	f04f 3aff 	mov.w	sl, #4294967295
 80067fc:	e027      	b.n	800684e <atan+0xbe>
 80067fe:	f000 f951 	bl	8006aa4 <fabs>
 8006802:	4ba1      	ldr	r3, [pc, #644]	; (8006a88 <atan+0x2f8>)
 8006804:	4604      	mov	r4, r0
 8006806:	429e      	cmp	r6, r3
 8006808:	460d      	mov	r5, r1
 800680a:	f300 80b8 	bgt.w	800697e <atan+0x1ee>
 800680e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006812:	429e      	cmp	r6, r3
 8006814:	f300 809c 	bgt.w	8006950 <atan+0x1c0>
 8006818:	4602      	mov	r2, r0
 800681a:	460b      	mov	r3, r1
 800681c:	f7f9 fc9e 	bl	800015c <__adddf3>
 8006820:	2200      	movs	r2, #0
 8006822:	4b98      	ldr	r3, [pc, #608]	; (8006a84 <atan+0x2f4>)
 8006824:	f7f9 fc98 	bl	8000158 <__aeabi_dsub>
 8006828:	2200      	movs	r2, #0
 800682a:	4606      	mov	r6, r0
 800682c:	460f      	mov	r7, r1
 800682e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006832:	4620      	mov	r0, r4
 8006834:	4629      	mov	r1, r5
 8006836:	f7f9 fc91 	bl	800015c <__adddf3>
 800683a:	4602      	mov	r2, r0
 800683c:	460b      	mov	r3, r1
 800683e:	4630      	mov	r0, r6
 8006840:	4639      	mov	r1, r7
 8006842:	f7f9 ff6b 	bl	800071c <__aeabi_ddiv>
 8006846:	f04f 0a00 	mov.w	sl, #0
 800684a:	4604      	mov	r4, r0
 800684c:	460d      	mov	r5, r1
 800684e:	4622      	mov	r2, r4
 8006850:	462b      	mov	r3, r5
 8006852:	4620      	mov	r0, r4
 8006854:	4629      	mov	r1, r5
 8006856:	f7f9 fe37 	bl	80004c8 <__aeabi_dmul>
 800685a:	4602      	mov	r2, r0
 800685c:	460b      	mov	r3, r1
 800685e:	4680      	mov	r8, r0
 8006860:	4689      	mov	r9, r1
 8006862:	f7f9 fe31 	bl	80004c8 <__aeabi_dmul>
 8006866:	a36c      	add	r3, pc, #432	; (adr r3, 8006a18 <atan+0x288>)
 8006868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686c:	4606      	mov	r6, r0
 800686e:	460f      	mov	r7, r1
 8006870:	f7f9 fe2a 	bl	80004c8 <__aeabi_dmul>
 8006874:	a36a      	add	r3, pc, #424	; (adr r3, 8006a20 <atan+0x290>)
 8006876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687a:	f7f9 fc6f 	bl	800015c <__adddf3>
 800687e:	4632      	mov	r2, r6
 8006880:	463b      	mov	r3, r7
 8006882:	f7f9 fe21 	bl	80004c8 <__aeabi_dmul>
 8006886:	a368      	add	r3, pc, #416	; (adr r3, 8006a28 <atan+0x298>)
 8006888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688c:	f7f9 fc66 	bl	800015c <__adddf3>
 8006890:	4632      	mov	r2, r6
 8006892:	463b      	mov	r3, r7
 8006894:	f7f9 fe18 	bl	80004c8 <__aeabi_dmul>
 8006898:	a365      	add	r3, pc, #404	; (adr r3, 8006a30 <atan+0x2a0>)
 800689a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689e:	f7f9 fc5d 	bl	800015c <__adddf3>
 80068a2:	4632      	mov	r2, r6
 80068a4:	463b      	mov	r3, r7
 80068a6:	f7f9 fe0f 	bl	80004c8 <__aeabi_dmul>
 80068aa:	a363      	add	r3, pc, #396	; (adr r3, 8006a38 <atan+0x2a8>)
 80068ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b0:	f7f9 fc54 	bl	800015c <__adddf3>
 80068b4:	4632      	mov	r2, r6
 80068b6:	463b      	mov	r3, r7
 80068b8:	f7f9 fe06 	bl	80004c8 <__aeabi_dmul>
 80068bc:	a360      	add	r3, pc, #384	; (adr r3, 8006a40 <atan+0x2b0>)
 80068be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c2:	f7f9 fc4b 	bl	800015c <__adddf3>
 80068c6:	4642      	mov	r2, r8
 80068c8:	464b      	mov	r3, r9
 80068ca:	f7f9 fdfd 	bl	80004c8 <__aeabi_dmul>
 80068ce:	a35e      	add	r3, pc, #376	; (adr r3, 8006a48 <atan+0x2b8>)
 80068d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d4:	4680      	mov	r8, r0
 80068d6:	4689      	mov	r9, r1
 80068d8:	4630      	mov	r0, r6
 80068da:	4639      	mov	r1, r7
 80068dc:	f7f9 fdf4 	bl	80004c8 <__aeabi_dmul>
 80068e0:	a35b      	add	r3, pc, #364	; (adr r3, 8006a50 <atan+0x2c0>)
 80068e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e6:	f7f9 fc37 	bl	8000158 <__aeabi_dsub>
 80068ea:	4632      	mov	r2, r6
 80068ec:	463b      	mov	r3, r7
 80068ee:	f7f9 fdeb 	bl	80004c8 <__aeabi_dmul>
 80068f2:	a359      	add	r3, pc, #356	; (adr r3, 8006a58 <atan+0x2c8>)
 80068f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f8:	f7f9 fc2e 	bl	8000158 <__aeabi_dsub>
 80068fc:	4632      	mov	r2, r6
 80068fe:	463b      	mov	r3, r7
 8006900:	f7f9 fde2 	bl	80004c8 <__aeabi_dmul>
 8006904:	a356      	add	r3, pc, #344	; (adr r3, 8006a60 <atan+0x2d0>)
 8006906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690a:	f7f9 fc25 	bl	8000158 <__aeabi_dsub>
 800690e:	4632      	mov	r2, r6
 8006910:	463b      	mov	r3, r7
 8006912:	f7f9 fdd9 	bl	80004c8 <__aeabi_dmul>
 8006916:	a354      	add	r3, pc, #336	; (adr r3, 8006a68 <atan+0x2d8>)
 8006918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691c:	f7f9 fc1c 	bl	8000158 <__aeabi_dsub>
 8006920:	4632      	mov	r2, r6
 8006922:	463b      	mov	r3, r7
 8006924:	f7f9 fdd0 	bl	80004c8 <__aeabi_dmul>
 8006928:	4602      	mov	r2, r0
 800692a:	460b      	mov	r3, r1
 800692c:	4640      	mov	r0, r8
 800692e:	4649      	mov	r1, r9
 8006930:	f7f9 fc14 	bl	800015c <__adddf3>
 8006934:	4622      	mov	r2, r4
 8006936:	462b      	mov	r3, r5
 8006938:	f7f9 fdc6 	bl	80004c8 <__aeabi_dmul>
 800693c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006940:	4602      	mov	r2, r0
 8006942:	460b      	mov	r3, r1
 8006944:	d144      	bne.n	80069d0 <atan+0x240>
 8006946:	4620      	mov	r0, r4
 8006948:	4629      	mov	r1, r5
 800694a:	f7f9 fc05 	bl	8000158 <__aeabi_dsub>
 800694e:	e734      	b.n	80067ba <atan+0x2a>
 8006950:	2200      	movs	r2, #0
 8006952:	4b4c      	ldr	r3, [pc, #304]	; (8006a84 <atan+0x2f4>)
 8006954:	f7f9 fc00 	bl	8000158 <__aeabi_dsub>
 8006958:	2200      	movs	r2, #0
 800695a:	4606      	mov	r6, r0
 800695c:	460f      	mov	r7, r1
 800695e:	4620      	mov	r0, r4
 8006960:	4629      	mov	r1, r5
 8006962:	4b48      	ldr	r3, [pc, #288]	; (8006a84 <atan+0x2f4>)
 8006964:	f7f9 fbfa 	bl	800015c <__adddf3>
 8006968:	4602      	mov	r2, r0
 800696a:	460b      	mov	r3, r1
 800696c:	4630      	mov	r0, r6
 800696e:	4639      	mov	r1, r7
 8006970:	f7f9 fed4 	bl	800071c <__aeabi_ddiv>
 8006974:	f04f 0a01 	mov.w	sl, #1
 8006978:	4604      	mov	r4, r0
 800697a:	460d      	mov	r5, r1
 800697c:	e767      	b.n	800684e <atan+0xbe>
 800697e:	4b43      	ldr	r3, [pc, #268]	; (8006a8c <atan+0x2fc>)
 8006980:	429e      	cmp	r6, r3
 8006982:	da1a      	bge.n	80069ba <atan+0x22a>
 8006984:	2200      	movs	r2, #0
 8006986:	4b42      	ldr	r3, [pc, #264]	; (8006a90 <atan+0x300>)
 8006988:	f7f9 fbe6 	bl	8000158 <__aeabi_dsub>
 800698c:	2200      	movs	r2, #0
 800698e:	4606      	mov	r6, r0
 8006990:	460f      	mov	r7, r1
 8006992:	4620      	mov	r0, r4
 8006994:	4629      	mov	r1, r5
 8006996:	4b3e      	ldr	r3, [pc, #248]	; (8006a90 <atan+0x300>)
 8006998:	f7f9 fd96 	bl	80004c8 <__aeabi_dmul>
 800699c:	2200      	movs	r2, #0
 800699e:	4b39      	ldr	r3, [pc, #228]	; (8006a84 <atan+0x2f4>)
 80069a0:	f7f9 fbdc 	bl	800015c <__adddf3>
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	4630      	mov	r0, r6
 80069aa:	4639      	mov	r1, r7
 80069ac:	f7f9 feb6 	bl	800071c <__aeabi_ddiv>
 80069b0:	f04f 0a02 	mov.w	sl, #2
 80069b4:	4604      	mov	r4, r0
 80069b6:	460d      	mov	r5, r1
 80069b8:	e749      	b.n	800684e <atan+0xbe>
 80069ba:	4602      	mov	r2, r0
 80069bc:	460b      	mov	r3, r1
 80069be:	2000      	movs	r0, #0
 80069c0:	4934      	ldr	r1, [pc, #208]	; (8006a94 <atan+0x304>)
 80069c2:	f7f9 feab 	bl	800071c <__aeabi_ddiv>
 80069c6:	f04f 0a03 	mov.w	sl, #3
 80069ca:	4604      	mov	r4, r0
 80069cc:	460d      	mov	r5, r1
 80069ce:	e73e      	b.n	800684e <atan+0xbe>
 80069d0:	4b31      	ldr	r3, [pc, #196]	; (8006a98 <atan+0x308>)
 80069d2:	4e32      	ldr	r6, [pc, #200]	; (8006a9c <atan+0x30c>)
 80069d4:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80069d8:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80069dc:	e9da 2300 	ldrd	r2, r3, [sl]
 80069e0:	f7f9 fbba 	bl	8000158 <__aeabi_dsub>
 80069e4:	4622      	mov	r2, r4
 80069e6:	462b      	mov	r3, r5
 80069e8:	f7f9 fbb6 	bl	8000158 <__aeabi_dsub>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	e9d6 0100 	ldrd	r0, r1, [r6]
 80069f4:	f7f9 fbb0 	bl	8000158 <__aeabi_dsub>
 80069f8:	f1bb 0f00 	cmp.w	fp, #0
 80069fc:	4604      	mov	r4, r0
 80069fe:	460d      	mov	r5, r1
 8006a00:	f6bf aee4 	bge.w	80067cc <atan+0x3c>
 8006a04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a08:	461d      	mov	r5, r3
 8006a0a:	e6df      	b.n	80067cc <atan+0x3c>
 8006a0c:	4d24      	ldr	r5, [pc, #144]	; (8006aa0 <atan+0x310>)
 8006a0e:	e6dd      	b.n	80067cc <atan+0x3c>
 8006a10:	8800759c 	.word	0x8800759c
 8006a14:	7e37e43c 	.word	0x7e37e43c
 8006a18:	e322da11 	.word	0xe322da11
 8006a1c:	3f90ad3a 	.word	0x3f90ad3a
 8006a20:	24760deb 	.word	0x24760deb
 8006a24:	3fa97b4b 	.word	0x3fa97b4b
 8006a28:	a0d03d51 	.word	0xa0d03d51
 8006a2c:	3fb10d66 	.word	0x3fb10d66
 8006a30:	c54c206e 	.word	0xc54c206e
 8006a34:	3fb745cd 	.word	0x3fb745cd
 8006a38:	920083ff 	.word	0x920083ff
 8006a3c:	3fc24924 	.word	0x3fc24924
 8006a40:	5555550d 	.word	0x5555550d
 8006a44:	3fd55555 	.word	0x3fd55555
 8006a48:	2c6a6c2f 	.word	0x2c6a6c2f
 8006a4c:	bfa2b444 	.word	0xbfa2b444
 8006a50:	52defd9a 	.word	0x52defd9a
 8006a54:	3fadde2d 	.word	0x3fadde2d
 8006a58:	af749a6d 	.word	0xaf749a6d
 8006a5c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006a60:	fe231671 	.word	0xfe231671
 8006a64:	3fbc71c6 	.word	0x3fbc71c6
 8006a68:	9998ebc4 	.word	0x9998ebc4
 8006a6c:	3fc99999 	.word	0x3fc99999
 8006a70:	440fffff 	.word	0x440fffff
 8006a74:	7ff00000 	.word	0x7ff00000
 8006a78:	54442d18 	.word	0x54442d18
 8006a7c:	bff921fb 	.word	0xbff921fb
 8006a80:	3fdbffff 	.word	0x3fdbffff
 8006a84:	3ff00000 	.word	0x3ff00000
 8006a88:	3ff2ffff 	.word	0x3ff2ffff
 8006a8c:	40038000 	.word	0x40038000
 8006a90:	3ff80000 	.word	0x3ff80000
 8006a94:	bff00000 	.word	0xbff00000
 8006a98:	08007ff0 	.word	0x08007ff0
 8006a9c:	08007fd0 	.word	0x08007fd0
 8006aa0:	3ff921fb 	.word	0x3ff921fb

08006aa4 <fabs>:
 8006aa4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006aa8:	4770      	bx	lr

08006aaa <atan2>:
 8006aaa:	f000 b825 	b.w	8006af8 <__ieee754_atan2>

08006aae <sqrt>:
 8006aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab0:	4606      	mov	r6, r0
 8006ab2:	460f      	mov	r7, r1
 8006ab4:	f000 f8f2 	bl	8006c9c <__ieee754_sqrt>
 8006ab8:	4632      	mov	r2, r6
 8006aba:	4604      	mov	r4, r0
 8006abc:	460d      	mov	r5, r1
 8006abe:	463b      	mov	r3, r7
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	4639      	mov	r1, r7
 8006ac4:	f7f9 ff9a 	bl	80009fc <__aeabi_dcmpun>
 8006ac8:	b990      	cbnz	r0, 8006af0 <sqrt+0x42>
 8006aca:	2200      	movs	r2, #0
 8006acc:	2300      	movs	r3, #0
 8006ace:	4630      	mov	r0, r6
 8006ad0:	4639      	mov	r1, r7
 8006ad2:	f7f9 ff6b 	bl	80009ac <__aeabi_dcmplt>
 8006ad6:	b158      	cbz	r0, 8006af0 <sqrt+0x42>
 8006ad8:	f000 f998 	bl	8006e0c <__errno>
 8006adc:	2321      	movs	r3, #33	; 0x21
 8006ade:	2200      	movs	r2, #0
 8006ae0:	6003      	str	r3, [r0, #0]
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	f7f9 fe18 	bl	800071c <__aeabi_ddiv>
 8006aec:	4604      	mov	r4, r0
 8006aee:	460d      	mov	r5, r1
 8006af0:	4620      	mov	r0, r4
 8006af2:	4629      	mov	r1, r5
 8006af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006af8 <__ieee754_atan2>:
 8006af8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006afc:	4692      	mov	sl, r2
 8006afe:	4699      	mov	r9, r3
 8006b00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006b04:	461f      	mov	r7, r3
 8006b06:	f1ca 0300 	rsb	r3, sl, #0
 8006b0a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8006c90 <__ieee754_atan2+0x198>
 8006b0e:	ea43 030a 	orr.w	r3, r3, sl
 8006b12:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006b16:	4573      	cmp	r3, lr
 8006b18:	4604      	mov	r4, r0
 8006b1a:	460d      	mov	r5, r1
 8006b1c:	d808      	bhi.n	8006b30 <__ieee754_atan2+0x38>
 8006b1e:	4246      	negs	r6, r0
 8006b20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006b24:	4306      	orrs	r6, r0
 8006b26:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8006b2a:	4576      	cmp	r6, lr
 8006b2c:	468c      	mov	ip, r1
 8006b2e:	d908      	bls.n	8006b42 <__ieee754_atan2+0x4a>
 8006b30:	4652      	mov	r2, sl
 8006b32:	464b      	mov	r3, r9
 8006b34:	4620      	mov	r0, r4
 8006b36:	4629      	mov	r1, r5
 8006b38:	f7f9 fb10 	bl	800015c <__adddf3>
 8006b3c:	4604      	mov	r4, r0
 8006b3e:	460d      	mov	r5, r1
 8006b40:	e019      	b.n	8006b76 <__ieee754_atan2+0x7e>
 8006b42:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8006b46:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8006b4a:	ea56 060a 	orrs.w	r6, r6, sl
 8006b4e:	d103      	bne.n	8006b58 <__ieee754_atan2+0x60>
 8006b50:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b54:	f7ff be1c 	b.w	8006790 <atan>
 8006b58:	17be      	asrs	r6, r7, #30
 8006b5a:	f006 0602 	and.w	r6, r6, #2
 8006b5e:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8006b62:	ea53 0100 	orrs.w	r1, r3, r0
 8006b66:	d10a      	bne.n	8006b7e <__ieee754_atan2+0x86>
 8006b68:	2e02      	cmp	r6, #2
 8006b6a:	d067      	beq.n	8006c3c <__ieee754_atan2+0x144>
 8006b6c:	2e03      	cmp	r6, #3
 8006b6e:	d102      	bne.n	8006b76 <__ieee754_atan2+0x7e>
 8006b70:	a53b      	add	r5, pc, #236	; (adr r5, 8006c60 <__ieee754_atan2+0x168>)
 8006b72:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006b76:	4620      	mov	r0, r4
 8006b78:	4629      	mov	r1, r5
 8006b7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b7e:	ea52 010a 	orrs.w	r1, r2, sl
 8006b82:	d106      	bne.n	8006b92 <__ieee754_atan2+0x9a>
 8006b84:	f1bc 0f00 	cmp.w	ip, #0
 8006b88:	da63      	bge.n	8006c52 <__ieee754_atan2+0x15a>
 8006b8a:	a537      	add	r5, pc, #220	; (adr r5, 8006c68 <__ieee754_atan2+0x170>)
 8006b8c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006b90:	e7f1      	b.n	8006b76 <__ieee754_atan2+0x7e>
 8006b92:	4572      	cmp	r2, lr
 8006b94:	d10f      	bne.n	8006bb6 <__ieee754_atan2+0xbe>
 8006b96:	4293      	cmp	r3, r2
 8006b98:	f106 36ff 	add.w	r6, r6, #4294967295
 8006b9c:	d107      	bne.n	8006bae <__ieee754_atan2+0xb6>
 8006b9e:	2e02      	cmp	r6, #2
 8006ba0:	d850      	bhi.n	8006c44 <__ieee754_atan2+0x14c>
 8006ba2:	4b3c      	ldr	r3, [pc, #240]	; (8006c94 <__ieee754_atan2+0x19c>)
 8006ba4:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006ba8:	e9d6 4500 	ldrd	r4, r5, [r6]
 8006bac:	e7e3      	b.n	8006b76 <__ieee754_atan2+0x7e>
 8006bae:	2e02      	cmp	r6, #2
 8006bb0:	d84c      	bhi.n	8006c4c <__ieee754_atan2+0x154>
 8006bb2:	4b39      	ldr	r3, [pc, #228]	; (8006c98 <__ieee754_atan2+0x1a0>)
 8006bb4:	e7f6      	b.n	8006ba4 <__ieee754_atan2+0xac>
 8006bb6:	4573      	cmp	r3, lr
 8006bb8:	d0e4      	beq.n	8006b84 <__ieee754_atan2+0x8c>
 8006bba:	1a9b      	subs	r3, r3, r2
 8006bbc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8006bc0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006bc4:	da20      	bge.n	8006c08 <__ieee754_atan2+0x110>
 8006bc6:	2f00      	cmp	r7, #0
 8006bc8:	da01      	bge.n	8006bce <__ieee754_atan2+0xd6>
 8006bca:	323c      	adds	r2, #60	; 0x3c
 8006bcc:	db20      	blt.n	8006c10 <__ieee754_atan2+0x118>
 8006bce:	4652      	mov	r2, sl
 8006bd0:	464b      	mov	r3, r9
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	4629      	mov	r1, r5
 8006bd6:	f7f9 fda1 	bl	800071c <__aeabi_ddiv>
 8006bda:	f7ff ff63 	bl	8006aa4 <fabs>
 8006bde:	f7ff fdd7 	bl	8006790 <atan>
 8006be2:	4604      	mov	r4, r0
 8006be4:	460d      	mov	r5, r1
 8006be6:	2e01      	cmp	r6, #1
 8006be8:	d015      	beq.n	8006c16 <__ieee754_atan2+0x11e>
 8006bea:	2e02      	cmp	r6, #2
 8006bec:	d017      	beq.n	8006c1e <__ieee754_atan2+0x126>
 8006bee:	2e00      	cmp	r6, #0
 8006bf0:	d0c1      	beq.n	8006b76 <__ieee754_atan2+0x7e>
 8006bf2:	a31f      	add	r3, pc, #124	; (adr r3, 8006c70 <__ieee754_atan2+0x178>)
 8006bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	4629      	mov	r1, r5
 8006bfc:	f7f9 faac 	bl	8000158 <__aeabi_dsub>
 8006c00:	a31d      	add	r3, pc, #116	; (adr r3, 8006c78 <__ieee754_atan2+0x180>)
 8006c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c06:	e016      	b.n	8006c36 <__ieee754_atan2+0x13e>
 8006c08:	a51d      	add	r5, pc, #116	; (adr r5, 8006c80 <__ieee754_atan2+0x188>)
 8006c0a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006c0e:	e7ea      	b.n	8006be6 <__ieee754_atan2+0xee>
 8006c10:	2400      	movs	r4, #0
 8006c12:	2500      	movs	r5, #0
 8006c14:	e7e7      	b.n	8006be6 <__ieee754_atan2+0xee>
 8006c16:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006c1a:	461d      	mov	r5, r3
 8006c1c:	e7ab      	b.n	8006b76 <__ieee754_atan2+0x7e>
 8006c1e:	a314      	add	r3, pc, #80	; (adr r3, 8006c70 <__ieee754_atan2+0x178>)
 8006c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c24:	4620      	mov	r0, r4
 8006c26:	4629      	mov	r1, r5
 8006c28:	f7f9 fa96 	bl	8000158 <__aeabi_dsub>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	460b      	mov	r3, r1
 8006c30:	a111      	add	r1, pc, #68	; (adr r1, 8006c78 <__ieee754_atan2+0x180>)
 8006c32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c36:	f7f9 fa8f 	bl	8000158 <__aeabi_dsub>
 8006c3a:	e77f      	b.n	8006b3c <__ieee754_atan2+0x44>
 8006c3c:	a50e      	add	r5, pc, #56	; (adr r5, 8006c78 <__ieee754_atan2+0x180>)
 8006c3e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006c42:	e798      	b.n	8006b76 <__ieee754_atan2+0x7e>
 8006c44:	a510      	add	r5, pc, #64	; (adr r5, 8006c88 <__ieee754_atan2+0x190>)
 8006c46:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006c4a:	e794      	b.n	8006b76 <__ieee754_atan2+0x7e>
 8006c4c:	2400      	movs	r4, #0
 8006c4e:	2500      	movs	r5, #0
 8006c50:	e791      	b.n	8006b76 <__ieee754_atan2+0x7e>
 8006c52:	a50b      	add	r5, pc, #44	; (adr r5, 8006c80 <__ieee754_atan2+0x188>)
 8006c54:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006c58:	e78d      	b.n	8006b76 <__ieee754_atan2+0x7e>
 8006c5a:	bf00      	nop
 8006c5c:	f3af 8000 	nop.w
 8006c60:	54442d18 	.word	0x54442d18
 8006c64:	c00921fb 	.word	0xc00921fb
 8006c68:	54442d18 	.word	0x54442d18
 8006c6c:	bff921fb 	.word	0xbff921fb
 8006c70:	33145c07 	.word	0x33145c07
 8006c74:	3ca1a626 	.word	0x3ca1a626
 8006c78:	54442d18 	.word	0x54442d18
 8006c7c:	400921fb 	.word	0x400921fb
 8006c80:	54442d18 	.word	0x54442d18
 8006c84:	3ff921fb 	.word	0x3ff921fb
 8006c88:	54442d18 	.word	0x54442d18
 8006c8c:	3fe921fb 	.word	0x3fe921fb
 8006c90:	7ff00000 	.word	0x7ff00000
 8006c94:	08008010 	.word	0x08008010
 8006c98:	08008028 	.word	0x08008028

08006c9c <__ieee754_sqrt>:
 8006c9c:	f8df c158 	ldr.w	ip, [pc, #344]	; 8006df8 <__ieee754_sqrt+0x15c>
 8006ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca4:	ea3c 0c01 	bics.w	ip, ip, r1
 8006ca8:	4606      	mov	r6, r0
 8006caa:	460d      	mov	r5, r1
 8006cac:	460c      	mov	r4, r1
 8006cae:	460a      	mov	r2, r1
 8006cb0:	4607      	mov	r7, r0
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	d10f      	bne.n	8006cd6 <__ieee754_sqrt+0x3a>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	f7f9 fc05 	bl	80004c8 <__aeabi_dmul>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	4629      	mov	r1, r5
 8006cc6:	f7f9 fa49 	bl	800015c <__adddf3>
 8006cca:	4606      	mov	r6, r0
 8006ccc:	460d      	mov	r5, r1
 8006cce:	4630      	mov	r0, r6
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cd6:	2900      	cmp	r1, #0
 8006cd8:	dc0e      	bgt.n	8006cf8 <__ieee754_sqrt+0x5c>
 8006cda:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006cde:	ea5c 0707 	orrs.w	r7, ip, r7
 8006ce2:	d0f4      	beq.n	8006cce <__ieee754_sqrt+0x32>
 8006ce4:	b141      	cbz	r1, 8006cf8 <__ieee754_sqrt+0x5c>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	460b      	mov	r3, r1
 8006cea:	f7f9 fa35 	bl	8000158 <__aeabi_dsub>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	f7f9 fd13 	bl	800071c <__aeabi_ddiv>
 8006cf6:	e7e8      	b.n	8006cca <__ieee754_sqrt+0x2e>
 8006cf8:	1521      	asrs	r1, r4, #20
 8006cfa:	d075      	beq.n	8006de8 <__ieee754_sqrt+0x14c>
 8006cfc:	07cc      	lsls	r4, r1, #31
 8006cfe:	f04f 0400 	mov.w	r4, #0
 8006d02:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006d06:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8006d0a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006d0e:	bf5e      	ittt	pl
 8006d10:	0fd9      	lsrpl	r1, r3, #31
 8006d12:	005b      	lslpl	r3, r3, #1
 8006d14:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8006d18:	0fd9      	lsrs	r1, r3, #31
 8006d1a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8006d1e:	2516      	movs	r5, #22
 8006d20:	4620      	mov	r0, r4
 8006d22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d26:	107f      	asrs	r7, r7, #1
 8006d28:	005b      	lsls	r3, r3, #1
 8006d2a:	1846      	adds	r6, r0, r1
 8006d2c:	4296      	cmp	r6, r2
 8006d2e:	bfde      	ittt	le
 8006d30:	1b92      	suble	r2, r2, r6
 8006d32:	1870      	addle	r0, r6, r1
 8006d34:	1864      	addle	r4, r4, r1
 8006d36:	0052      	lsls	r2, r2, #1
 8006d38:	3d01      	subs	r5, #1
 8006d3a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006d3e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006d42:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006d46:	d1f0      	bne.n	8006d2a <__ieee754_sqrt+0x8e>
 8006d48:	4629      	mov	r1, r5
 8006d4a:	f04f 0e20 	mov.w	lr, #32
 8006d4e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006d52:	4282      	cmp	r2, r0
 8006d54:	eb06 0c05 	add.w	ip, r6, r5
 8006d58:	dc02      	bgt.n	8006d60 <__ieee754_sqrt+0xc4>
 8006d5a:	d113      	bne.n	8006d84 <__ieee754_sqrt+0xe8>
 8006d5c:	459c      	cmp	ip, r3
 8006d5e:	d811      	bhi.n	8006d84 <__ieee754_sqrt+0xe8>
 8006d60:	f1bc 0f00 	cmp.w	ip, #0
 8006d64:	eb0c 0506 	add.w	r5, ip, r6
 8006d68:	da43      	bge.n	8006df2 <__ieee754_sqrt+0x156>
 8006d6a:	2d00      	cmp	r5, #0
 8006d6c:	db41      	blt.n	8006df2 <__ieee754_sqrt+0x156>
 8006d6e:	f100 0801 	add.w	r8, r0, #1
 8006d72:	1a12      	subs	r2, r2, r0
 8006d74:	4640      	mov	r0, r8
 8006d76:	459c      	cmp	ip, r3
 8006d78:	bf88      	it	hi
 8006d7a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006d7e:	eba3 030c 	sub.w	r3, r3, ip
 8006d82:	4431      	add	r1, r6
 8006d84:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006d88:	f1be 0e01 	subs.w	lr, lr, #1
 8006d8c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8006d90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006d94:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006d98:	d1db      	bne.n	8006d52 <__ieee754_sqrt+0xb6>
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	d006      	beq.n	8006dac <__ieee754_sqrt+0x110>
 8006d9e:	1c48      	adds	r0, r1, #1
 8006da0:	bf0b      	itete	eq
 8006da2:	4671      	moveq	r1, lr
 8006da4:	3101      	addne	r1, #1
 8006da6:	3401      	addeq	r4, #1
 8006da8:	f021 0101 	bicne.w	r1, r1, #1
 8006dac:	1063      	asrs	r3, r4, #1
 8006dae:	0849      	lsrs	r1, r1, #1
 8006db0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006db4:	07e2      	lsls	r2, r4, #31
 8006db6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006dba:	bf48      	it	mi
 8006dbc:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8006dc0:	460e      	mov	r6, r1
 8006dc2:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006dc6:	e782      	b.n	8006cce <__ieee754_sqrt+0x32>
 8006dc8:	0ada      	lsrs	r2, r3, #11
 8006dca:	3815      	subs	r0, #21
 8006dcc:	055b      	lsls	r3, r3, #21
 8006dce:	2a00      	cmp	r2, #0
 8006dd0:	d0fa      	beq.n	8006dc8 <__ieee754_sqrt+0x12c>
 8006dd2:	02d5      	lsls	r5, r2, #11
 8006dd4:	d50a      	bpl.n	8006dec <__ieee754_sqrt+0x150>
 8006dd6:	f1c1 0420 	rsb	r4, r1, #32
 8006dda:	fa23 f404 	lsr.w	r4, r3, r4
 8006dde:	1e4d      	subs	r5, r1, #1
 8006de0:	408b      	lsls	r3, r1
 8006de2:	4322      	orrs	r2, r4
 8006de4:	1b41      	subs	r1, r0, r5
 8006de6:	e789      	b.n	8006cfc <__ieee754_sqrt+0x60>
 8006de8:	4608      	mov	r0, r1
 8006dea:	e7f0      	b.n	8006dce <__ieee754_sqrt+0x132>
 8006dec:	0052      	lsls	r2, r2, #1
 8006dee:	3101      	adds	r1, #1
 8006df0:	e7ef      	b.n	8006dd2 <__ieee754_sqrt+0x136>
 8006df2:	4680      	mov	r8, r0
 8006df4:	e7bd      	b.n	8006d72 <__ieee754_sqrt+0xd6>
 8006df6:	bf00      	nop
 8006df8:	7ff00000 	.word	0x7ff00000

08006dfc <abort>:
 8006dfc:	2006      	movs	r0, #6
 8006dfe:	b508      	push	{r3, lr}
 8006e00:	f000 f982 	bl	8007108 <raise>
 8006e04:	2001      	movs	r0, #1
 8006e06:	f7fb f8e2 	bl	8001fce <_exit>
	...

08006e0c <__errno>:
 8006e0c:	4b01      	ldr	r3, [pc, #4]	; (8006e14 <__errno+0x8>)
 8006e0e:	6818      	ldr	r0, [r3, #0]
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	200000a4 	.word	0x200000a4

08006e18 <__libc_init_array>:
 8006e18:	b570      	push	{r4, r5, r6, lr}
 8006e1a:	2600      	movs	r6, #0
 8006e1c:	4d0c      	ldr	r5, [pc, #48]	; (8006e50 <__libc_init_array+0x38>)
 8006e1e:	4c0d      	ldr	r4, [pc, #52]	; (8006e54 <__libc_init_array+0x3c>)
 8006e20:	1b64      	subs	r4, r4, r5
 8006e22:	10a4      	asrs	r4, r4, #2
 8006e24:	42a6      	cmp	r6, r4
 8006e26:	d109      	bne.n	8006e3c <__libc_init_array+0x24>
 8006e28:	f000 fcf0 	bl	800780c <_init>
 8006e2c:	2600      	movs	r6, #0
 8006e2e:	4d0a      	ldr	r5, [pc, #40]	; (8006e58 <__libc_init_array+0x40>)
 8006e30:	4c0a      	ldr	r4, [pc, #40]	; (8006e5c <__libc_init_array+0x44>)
 8006e32:	1b64      	subs	r4, r4, r5
 8006e34:	10a4      	asrs	r4, r4, #2
 8006e36:	42a6      	cmp	r6, r4
 8006e38:	d105      	bne.n	8006e46 <__libc_init_array+0x2e>
 8006e3a:	bd70      	pop	{r4, r5, r6, pc}
 8006e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e40:	4798      	blx	r3
 8006e42:	3601      	adds	r6, #1
 8006e44:	e7ee      	b.n	8006e24 <__libc_init_array+0xc>
 8006e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e4a:	4798      	blx	r3
 8006e4c:	3601      	adds	r6, #1
 8006e4e:	e7f2      	b.n	8006e36 <__libc_init_array+0x1e>
 8006e50:	08008074 	.word	0x08008074
 8006e54:	08008074 	.word	0x08008074
 8006e58:	08008074 	.word	0x08008074
 8006e5c:	0800807c 	.word	0x0800807c

08006e60 <malloc>:
 8006e60:	4b02      	ldr	r3, [pc, #8]	; (8006e6c <malloc+0xc>)
 8006e62:	4601      	mov	r1, r0
 8006e64:	6818      	ldr	r0, [r3, #0]
 8006e66:	f000 b8a3 	b.w	8006fb0 <_malloc_r>
 8006e6a:	bf00      	nop
 8006e6c:	200000a4 	.word	0x200000a4

08006e70 <free>:
 8006e70:	4b02      	ldr	r3, [pc, #8]	; (8006e7c <free+0xc>)
 8006e72:	4601      	mov	r1, r0
 8006e74:	6818      	ldr	r0, [r3, #0]
 8006e76:	f000 b833 	b.w	8006ee0 <_free_r>
 8006e7a:	bf00      	nop
 8006e7c:	200000a4 	.word	0x200000a4

08006e80 <memcpy>:
 8006e80:	440a      	add	r2, r1
 8006e82:	4291      	cmp	r1, r2
 8006e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e88:	d100      	bne.n	8006e8c <memcpy+0xc>
 8006e8a:	4770      	bx	lr
 8006e8c:	b510      	push	{r4, lr}
 8006e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e92:	4291      	cmp	r1, r2
 8006e94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e98:	d1f9      	bne.n	8006e8e <memcpy+0xe>
 8006e9a:	bd10      	pop	{r4, pc}

08006e9c <memmove>:
 8006e9c:	4288      	cmp	r0, r1
 8006e9e:	b510      	push	{r4, lr}
 8006ea0:	eb01 0402 	add.w	r4, r1, r2
 8006ea4:	d902      	bls.n	8006eac <memmove+0x10>
 8006ea6:	4284      	cmp	r4, r0
 8006ea8:	4623      	mov	r3, r4
 8006eaa:	d807      	bhi.n	8006ebc <memmove+0x20>
 8006eac:	1e43      	subs	r3, r0, #1
 8006eae:	42a1      	cmp	r1, r4
 8006eb0:	d008      	beq.n	8006ec4 <memmove+0x28>
 8006eb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006eb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006eba:	e7f8      	b.n	8006eae <memmove+0x12>
 8006ebc:	4601      	mov	r1, r0
 8006ebe:	4402      	add	r2, r0
 8006ec0:	428a      	cmp	r2, r1
 8006ec2:	d100      	bne.n	8006ec6 <memmove+0x2a>
 8006ec4:	bd10      	pop	{r4, pc}
 8006ec6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006eca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ece:	e7f7      	b.n	8006ec0 <memmove+0x24>

08006ed0 <memset>:
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	4402      	add	r2, r0
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d100      	bne.n	8006eda <memset+0xa>
 8006ed8:	4770      	bx	lr
 8006eda:	f803 1b01 	strb.w	r1, [r3], #1
 8006ede:	e7f9      	b.n	8006ed4 <memset+0x4>

08006ee0 <_free_r>:
 8006ee0:	b538      	push	{r3, r4, r5, lr}
 8006ee2:	4605      	mov	r5, r0
 8006ee4:	2900      	cmp	r1, #0
 8006ee6:	d040      	beq.n	8006f6a <_free_r+0x8a>
 8006ee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eec:	1f0c      	subs	r4, r1, #4
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	bfb8      	it	lt
 8006ef2:	18e4      	addlt	r4, r4, r3
 8006ef4:	f000 f944 	bl	8007180 <__malloc_lock>
 8006ef8:	4a1c      	ldr	r2, [pc, #112]	; (8006f6c <_free_r+0x8c>)
 8006efa:	6813      	ldr	r3, [r2, #0]
 8006efc:	b933      	cbnz	r3, 8006f0c <_free_r+0x2c>
 8006efe:	6063      	str	r3, [r4, #4]
 8006f00:	6014      	str	r4, [r2, #0]
 8006f02:	4628      	mov	r0, r5
 8006f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f08:	f000 b940 	b.w	800718c <__malloc_unlock>
 8006f0c:	42a3      	cmp	r3, r4
 8006f0e:	d908      	bls.n	8006f22 <_free_r+0x42>
 8006f10:	6820      	ldr	r0, [r4, #0]
 8006f12:	1821      	adds	r1, r4, r0
 8006f14:	428b      	cmp	r3, r1
 8006f16:	bf01      	itttt	eq
 8006f18:	6819      	ldreq	r1, [r3, #0]
 8006f1a:	685b      	ldreq	r3, [r3, #4]
 8006f1c:	1809      	addeq	r1, r1, r0
 8006f1e:	6021      	streq	r1, [r4, #0]
 8006f20:	e7ed      	b.n	8006efe <_free_r+0x1e>
 8006f22:	461a      	mov	r2, r3
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	b10b      	cbz	r3, 8006f2c <_free_r+0x4c>
 8006f28:	42a3      	cmp	r3, r4
 8006f2a:	d9fa      	bls.n	8006f22 <_free_r+0x42>
 8006f2c:	6811      	ldr	r1, [r2, #0]
 8006f2e:	1850      	adds	r0, r2, r1
 8006f30:	42a0      	cmp	r0, r4
 8006f32:	d10b      	bne.n	8006f4c <_free_r+0x6c>
 8006f34:	6820      	ldr	r0, [r4, #0]
 8006f36:	4401      	add	r1, r0
 8006f38:	1850      	adds	r0, r2, r1
 8006f3a:	4283      	cmp	r3, r0
 8006f3c:	6011      	str	r1, [r2, #0]
 8006f3e:	d1e0      	bne.n	8006f02 <_free_r+0x22>
 8006f40:	6818      	ldr	r0, [r3, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	4401      	add	r1, r0
 8006f46:	6011      	str	r1, [r2, #0]
 8006f48:	6053      	str	r3, [r2, #4]
 8006f4a:	e7da      	b.n	8006f02 <_free_r+0x22>
 8006f4c:	d902      	bls.n	8006f54 <_free_r+0x74>
 8006f4e:	230c      	movs	r3, #12
 8006f50:	602b      	str	r3, [r5, #0]
 8006f52:	e7d6      	b.n	8006f02 <_free_r+0x22>
 8006f54:	6820      	ldr	r0, [r4, #0]
 8006f56:	1821      	adds	r1, r4, r0
 8006f58:	428b      	cmp	r3, r1
 8006f5a:	bf01      	itttt	eq
 8006f5c:	6819      	ldreq	r1, [r3, #0]
 8006f5e:	685b      	ldreq	r3, [r3, #4]
 8006f60:	1809      	addeq	r1, r1, r0
 8006f62:	6021      	streq	r1, [r4, #0]
 8006f64:	6063      	str	r3, [r4, #4]
 8006f66:	6054      	str	r4, [r2, #4]
 8006f68:	e7cb      	b.n	8006f02 <_free_r+0x22>
 8006f6a:	bd38      	pop	{r3, r4, r5, pc}
 8006f6c:	20000798 	.word	0x20000798

08006f70 <sbrk_aligned>:
 8006f70:	b570      	push	{r4, r5, r6, lr}
 8006f72:	4e0e      	ldr	r6, [pc, #56]	; (8006fac <sbrk_aligned+0x3c>)
 8006f74:	460c      	mov	r4, r1
 8006f76:	6831      	ldr	r1, [r6, #0]
 8006f78:	4605      	mov	r5, r0
 8006f7a:	b911      	cbnz	r1, 8006f82 <sbrk_aligned+0x12>
 8006f7c:	f000 f88c 	bl	8007098 <_sbrk_r>
 8006f80:	6030      	str	r0, [r6, #0]
 8006f82:	4621      	mov	r1, r4
 8006f84:	4628      	mov	r0, r5
 8006f86:	f000 f887 	bl	8007098 <_sbrk_r>
 8006f8a:	1c43      	adds	r3, r0, #1
 8006f8c:	d00a      	beq.n	8006fa4 <sbrk_aligned+0x34>
 8006f8e:	1cc4      	adds	r4, r0, #3
 8006f90:	f024 0403 	bic.w	r4, r4, #3
 8006f94:	42a0      	cmp	r0, r4
 8006f96:	d007      	beq.n	8006fa8 <sbrk_aligned+0x38>
 8006f98:	1a21      	subs	r1, r4, r0
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	f000 f87c 	bl	8007098 <_sbrk_r>
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	d101      	bne.n	8006fa8 <sbrk_aligned+0x38>
 8006fa4:	f04f 34ff 	mov.w	r4, #4294967295
 8006fa8:	4620      	mov	r0, r4
 8006faa:	bd70      	pop	{r4, r5, r6, pc}
 8006fac:	2000079c 	.word	0x2000079c

08006fb0 <_malloc_r>:
 8006fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb4:	1ccd      	adds	r5, r1, #3
 8006fb6:	f025 0503 	bic.w	r5, r5, #3
 8006fba:	3508      	adds	r5, #8
 8006fbc:	2d0c      	cmp	r5, #12
 8006fbe:	bf38      	it	cc
 8006fc0:	250c      	movcc	r5, #12
 8006fc2:	2d00      	cmp	r5, #0
 8006fc4:	4607      	mov	r7, r0
 8006fc6:	db01      	blt.n	8006fcc <_malloc_r+0x1c>
 8006fc8:	42a9      	cmp	r1, r5
 8006fca:	d905      	bls.n	8006fd8 <_malloc_r+0x28>
 8006fcc:	230c      	movs	r3, #12
 8006fce:	2600      	movs	r6, #0
 8006fd0:	603b      	str	r3, [r7, #0]
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fd8:	4e2e      	ldr	r6, [pc, #184]	; (8007094 <_malloc_r+0xe4>)
 8006fda:	f000 f8d1 	bl	8007180 <__malloc_lock>
 8006fde:	6833      	ldr	r3, [r6, #0]
 8006fe0:	461c      	mov	r4, r3
 8006fe2:	bb34      	cbnz	r4, 8007032 <_malloc_r+0x82>
 8006fe4:	4629      	mov	r1, r5
 8006fe6:	4638      	mov	r0, r7
 8006fe8:	f7ff ffc2 	bl	8006f70 <sbrk_aligned>
 8006fec:	1c43      	adds	r3, r0, #1
 8006fee:	4604      	mov	r4, r0
 8006ff0:	d14d      	bne.n	800708e <_malloc_r+0xde>
 8006ff2:	6834      	ldr	r4, [r6, #0]
 8006ff4:	4626      	mov	r6, r4
 8006ff6:	2e00      	cmp	r6, #0
 8006ff8:	d140      	bne.n	800707c <_malloc_r+0xcc>
 8006ffa:	6823      	ldr	r3, [r4, #0]
 8006ffc:	4631      	mov	r1, r6
 8006ffe:	4638      	mov	r0, r7
 8007000:	eb04 0803 	add.w	r8, r4, r3
 8007004:	f000 f848 	bl	8007098 <_sbrk_r>
 8007008:	4580      	cmp	r8, r0
 800700a:	d13a      	bne.n	8007082 <_malloc_r+0xd2>
 800700c:	6821      	ldr	r1, [r4, #0]
 800700e:	3503      	adds	r5, #3
 8007010:	1a6d      	subs	r5, r5, r1
 8007012:	f025 0503 	bic.w	r5, r5, #3
 8007016:	3508      	adds	r5, #8
 8007018:	2d0c      	cmp	r5, #12
 800701a:	bf38      	it	cc
 800701c:	250c      	movcc	r5, #12
 800701e:	4638      	mov	r0, r7
 8007020:	4629      	mov	r1, r5
 8007022:	f7ff ffa5 	bl	8006f70 <sbrk_aligned>
 8007026:	3001      	adds	r0, #1
 8007028:	d02b      	beq.n	8007082 <_malloc_r+0xd2>
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	442b      	add	r3, r5
 800702e:	6023      	str	r3, [r4, #0]
 8007030:	e00e      	b.n	8007050 <_malloc_r+0xa0>
 8007032:	6822      	ldr	r2, [r4, #0]
 8007034:	1b52      	subs	r2, r2, r5
 8007036:	d41e      	bmi.n	8007076 <_malloc_r+0xc6>
 8007038:	2a0b      	cmp	r2, #11
 800703a:	d916      	bls.n	800706a <_malloc_r+0xba>
 800703c:	1961      	adds	r1, r4, r5
 800703e:	42a3      	cmp	r3, r4
 8007040:	6025      	str	r5, [r4, #0]
 8007042:	bf18      	it	ne
 8007044:	6059      	strne	r1, [r3, #4]
 8007046:	6863      	ldr	r3, [r4, #4]
 8007048:	bf08      	it	eq
 800704a:	6031      	streq	r1, [r6, #0]
 800704c:	5162      	str	r2, [r4, r5]
 800704e:	604b      	str	r3, [r1, #4]
 8007050:	4638      	mov	r0, r7
 8007052:	f104 060b 	add.w	r6, r4, #11
 8007056:	f000 f899 	bl	800718c <__malloc_unlock>
 800705a:	f026 0607 	bic.w	r6, r6, #7
 800705e:	1d23      	adds	r3, r4, #4
 8007060:	1af2      	subs	r2, r6, r3
 8007062:	d0b6      	beq.n	8006fd2 <_malloc_r+0x22>
 8007064:	1b9b      	subs	r3, r3, r6
 8007066:	50a3      	str	r3, [r4, r2]
 8007068:	e7b3      	b.n	8006fd2 <_malloc_r+0x22>
 800706a:	6862      	ldr	r2, [r4, #4]
 800706c:	42a3      	cmp	r3, r4
 800706e:	bf0c      	ite	eq
 8007070:	6032      	streq	r2, [r6, #0]
 8007072:	605a      	strne	r2, [r3, #4]
 8007074:	e7ec      	b.n	8007050 <_malloc_r+0xa0>
 8007076:	4623      	mov	r3, r4
 8007078:	6864      	ldr	r4, [r4, #4]
 800707a:	e7b2      	b.n	8006fe2 <_malloc_r+0x32>
 800707c:	4634      	mov	r4, r6
 800707e:	6876      	ldr	r6, [r6, #4]
 8007080:	e7b9      	b.n	8006ff6 <_malloc_r+0x46>
 8007082:	230c      	movs	r3, #12
 8007084:	4638      	mov	r0, r7
 8007086:	603b      	str	r3, [r7, #0]
 8007088:	f000 f880 	bl	800718c <__malloc_unlock>
 800708c:	e7a1      	b.n	8006fd2 <_malloc_r+0x22>
 800708e:	6025      	str	r5, [r4, #0]
 8007090:	e7de      	b.n	8007050 <_malloc_r+0xa0>
 8007092:	bf00      	nop
 8007094:	20000798 	.word	0x20000798

08007098 <_sbrk_r>:
 8007098:	b538      	push	{r3, r4, r5, lr}
 800709a:	2300      	movs	r3, #0
 800709c:	4d05      	ldr	r5, [pc, #20]	; (80070b4 <_sbrk_r+0x1c>)
 800709e:	4604      	mov	r4, r0
 80070a0:	4608      	mov	r0, r1
 80070a2:	602b      	str	r3, [r5, #0]
 80070a4:	f7fa ff9e 	bl	8001fe4 <_sbrk>
 80070a8:	1c43      	adds	r3, r0, #1
 80070aa:	d102      	bne.n	80070b2 <_sbrk_r+0x1a>
 80070ac:	682b      	ldr	r3, [r5, #0]
 80070ae:	b103      	cbz	r3, 80070b2 <_sbrk_r+0x1a>
 80070b0:	6023      	str	r3, [r4, #0]
 80070b2:	bd38      	pop	{r3, r4, r5, pc}
 80070b4:	200007a0 	.word	0x200007a0

080070b8 <_raise_r>:
 80070b8:	291f      	cmp	r1, #31
 80070ba:	b538      	push	{r3, r4, r5, lr}
 80070bc:	4604      	mov	r4, r0
 80070be:	460d      	mov	r5, r1
 80070c0:	d904      	bls.n	80070cc <_raise_r+0x14>
 80070c2:	2316      	movs	r3, #22
 80070c4:	6003      	str	r3, [r0, #0]
 80070c6:	f04f 30ff 	mov.w	r0, #4294967295
 80070ca:	bd38      	pop	{r3, r4, r5, pc}
 80070cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80070ce:	b112      	cbz	r2, 80070d6 <_raise_r+0x1e>
 80070d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80070d4:	b94b      	cbnz	r3, 80070ea <_raise_r+0x32>
 80070d6:	4620      	mov	r0, r4
 80070d8:	f000 f830 	bl	800713c <_getpid_r>
 80070dc:	462a      	mov	r2, r5
 80070de:	4601      	mov	r1, r0
 80070e0:	4620      	mov	r0, r4
 80070e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070e6:	f000 b817 	b.w	8007118 <_kill_r>
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d00a      	beq.n	8007104 <_raise_r+0x4c>
 80070ee:	1c59      	adds	r1, r3, #1
 80070f0:	d103      	bne.n	80070fa <_raise_r+0x42>
 80070f2:	2316      	movs	r3, #22
 80070f4:	6003      	str	r3, [r0, #0]
 80070f6:	2001      	movs	r0, #1
 80070f8:	e7e7      	b.n	80070ca <_raise_r+0x12>
 80070fa:	2400      	movs	r4, #0
 80070fc:	4628      	mov	r0, r5
 80070fe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007102:	4798      	blx	r3
 8007104:	2000      	movs	r0, #0
 8007106:	e7e0      	b.n	80070ca <_raise_r+0x12>

08007108 <raise>:
 8007108:	4b02      	ldr	r3, [pc, #8]	; (8007114 <raise+0xc>)
 800710a:	4601      	mov	r1, r0
 800710c:	6818      	ldr	r0, [r3, #0]
 800710e:	f7ff bfd3 	b.w	80070b8 <_raise_r>
 8007112:	bf00      	nop
 8007114:	200000a4 	.word	0x200000a4

08007118 <_kill_r>:
 8007118:	b538      	push	{r3, r4, r5, lr}
 800711a:	2300      	movs	r3, #0
 800711c:	4d06      	ldr	r5, [pc, #24]	; (8007138 <_kill_r+0x20>)
 800711e:	4604      	mov	r4, r0
 8007120:	4608      	mov	r0, r1
 8007122:	4611      	mov	r1, r2
 8007124:	602b      	str	r3, [r5, #0]
 8007126:	f7fa ff42 	bl	8001fae <_kill>
 800712a:	1c43      	adds	r3, r0, #1
 800712c:	d102      	bne.n	8007134 <_kill_r+0x1c>
 800712e:	682b      	ldr	r3, [r5, #0]
 8007130:	b103      	cbz	r3, 8007134 <_kill_r+0x1c>
 8007132:	6023      	str	r3, [r4, #0]
 8007134:	bd38      	pop	{r3, r4, r5, pc}
 8007136:	bf00      	nop
 8007138:	200007a0 	.word	0x200007a0

0800713c <_getpid_r>:
 800713c:	f7fa bf30 	b.w	8001fa0 <_getpid>

08007140 <siprintf>:
 8007140:	b40e      	push	{r1, r2, r3}
 8007142:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007146:	b500      	push	{lr}
 8007148:	b09c      	sub	sp, #112	; 0x70
 800714a:	ab1d      	add	r3, sp, #116	; 0x74
 800714c:	9002      	str	r0, [sp, #8]
 800714e:	9006      	str	r0, [sp, #24]
 8007150:	9107      	str	r1, [sp, #28]
 8007152:	9104      	str	r1, [sp, #16]
 8007154:	4808      	ldr	r0, [pc, #32]	; (8007178 <siprintf+0x38>)
 8007156:	4909      	ldr	r1, [pc, #36]	; (800717c <siprintf+0x3c>)
 8007158:	f853 2b04 	ldr.w	r2, [r3], #4
 800715c:	9105      	str	r1, [sp, #20]
 800715e:	6800      	ldr	r0, [r0, #0]
 8007160:	a902      	add	r1, sp, #8
 8007162:	9301      	str	r3, [sp, #4]
 8007164:	f000 f874 	bl	8007250 <_svfiprintf_r>
 8007168:	2200      	movs	r2, #0
 800716a:	9b02      	ldr	r3, [sp, #8]
 800716c:	701a      	strb	r2, [r3, #0]
 800716e:	b01c      	add	sp, #112	; 0x70
 8007170:	f85d eb04 	ldr.w	lr, [sp], #4
 8007174:	b003      	add	sp, #12
 8007176:	4770      	bx	lr
 8007178:	200000a4 	.word	0x200000a4
 800717c:	ffff0208 	.word	0xffff0208

08007180 <__malloc_lock>:
 8007180:	4801      	ldr	r0, [pc, #4]	; (8007188 <__malloc_lock+0x8>)
 8007182:	f000 bafb 	b.w	800777c <__retarget_lock_acquire_recursive>
 8007186:	bf00      	nop
 8007188:	200007a4 	.word	0x200007a4

0800718c <__malloc_unlock>:
 800718c:	4801      	ldr	r0, [pc, #4]	; (8007194 <__malloc_unlock+0x8>)
 800718e:	f000 baf6 	b.w	800777e <__retarget_lock_release_recursive>
 8007192:	bf00      	nop
 8007194:	200007a4 	.word	0x200007a4

08007198 <__ssputs_r>:
 8007198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800719c:	688e      	ldr	r6, [r1, #8]
 800719e:	4682      	mov	sl, r0
 80071a0:	429e      	cmp	r6, r3
 80071a2:	460c      	mov	r4, r1
 80071a4:	4690      	mov	r8, r2
 80071a6:	461f      	mov	r7, r3
 80071a8:	d838      	bhi.n	800721c <__ssputs_r+0x84>
 80071aa:	898a      	ldrh	r2, [r1, #12]
 80071ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80071b0:	d032      	beq.n	8007218 <__ssputs_r+0x80>
 80071b2:	6825      	ldr	r5, [r4, #0]
 80071b4:	6909      	ldr	r1, [r1, #16]
 80071b6:	3301      	adds	r3, #1
 80071b8:	eba5 0901 	sub.w	r9, r5, r1
 80071bc:	6965      	ldr	r5, [r4, #20]
 80071be:	444b      	add	r3, r9
 80071c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071c8:	106d      	asrs	r5, r5, #1
 80071ca:	429d      	cmp	r5, r3
 80071cc:	bf38      	it	cc
 80071ce:	461d      	movcc	r5, r3
 80071d0:	0553      	lsls	r3, r2, #21
 80071d2:	d531      	bpl.n	8007238 <__ssputs_r+0xa0>
 80071d4:	4629      	mov	r1, r5
 80071d6:	f7ff feeb 	bl	8006fb0 <_malloc_r>
 80071da:	4606      	mov	r6, r0
 80071dc:	b950      	cbnz	r0, 80071f4 <__ssputs_r+0x5c>
 80071de:	230c      	movs	r3, #12
 80071e0:	f04f 30ff 	mov.w	r0, #4294967295
 80071e4:	f8ca 3000 	str.w	r3, [sl]
 80071e8:	89a3      	ldrh	r3, [r4, #12]
 80071ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071ee:	81a3      	strh	r3, [r4, #12]
 80071f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071f4:	464a      	mov	r2, r9
 80071f6:	6921      	ldr	r1, [r4, #16]
 80071f8:	f7ff fe42 	bl	8006e80 <memcpy>
 80071fc:	89a3      	ldrh	r3, [r4, #12]
 80071fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007206:	81a3      	strh	r3, [r4, #12]
 8007208:	6126      	str	r6, [r4, #16]
 800720a:	444e      	add	r6, r9
 800720c:	6026      	str	r6, [r4, #0]
 800720e:	463e      	mov	r6, r7
 8007210:	6165      	str	r5, [r4, #20]
 8007212:	eba5 0509 	sub.w	r5, r5, r9
 8007216:	60a5      	str	r5, [r4, #8]
 8007218:	42be      	cmp	r6, r7
 800721a:	d900      	bls.n	800721e <__ssputs_r+0x86>
 800721c:	463e      	mov	r6, r7
 800721e:	4632      	mov	r2, r6
 8007220:	4641      	mov	r1, r8
 8007222:	6820      	ldr	r0, [r4, #0]
 8007224:	f7ff fe3a 	bl	8006e9c <memmove>
 8007228:	68a3      	ldr	r3, [r4, #8]
 800722a:	2000      	movs	r0, #0
 800722c:	1b9b      	subs	r3, r3, r6
 800722e:	60a3      	str	r3, [r4, #8]
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	4433      	add	r3, r6
 8007234:	6023      	str	r3, [r4, #0]
 8007236:	e7db      	b.n	80071f0 <__ssputs_r+0x58>
 8007238:	462a      	mov	r2, r5
 800723a:	f000 faaf 	bl	800779c <_realloc_r>
 800723e:	4606      	mov	r6, r0
 8007240:	2800      	cmp	r0, #0
 8007242:	d1e1      	bne.n	8007208 <__ssputs_r+0x70>
 8007244:	4650      	mov	r0, sl
 8007246:	6921      	ldr	r1, [r4, #16]
 8007248:	f7ff fe4a 	bl	8006ee0 <_free_r>
 800724c:	e7c7      	b.n	80071de <__ssputs_r+0x46>
	...

08007250 <_svfiprintf_r>:
 8007250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007254:	4698      	mov	r8, r3
 8007256:	898b      	ldrh	r3, [r1, #12]
 8007258:	4607      	mov	r7, r0
 800725a:	061b      	lsls	r3, r3, #24
 800725c:	460d      	mov	r5, r1
 800725e:	4614      	mov	r4, r2
 8007260:	b09d      	sub	sp, #116	; 0x74
 8007262:	d50e      	bpl.n	8007282 <_svfiprintf_r+0x32>
 8007264:	690b      	ldr	r3, [r1, #16]
 8007266:	b963      	cbnz	r3, 8007282 <_svfiprintf_r+0x32>
 8007268:	2140      	movs	r1, #64	; 0x40
 800726a:	f7ff fea1 	bl	8006fb0 <_malloc_r>
 800726e:	6028      	str	r0, [r5, #0]
 8007270:	6128      	str	r0, [r5, #16]
 8007272:	b920      	cbnz	r0, 800727e <_svfiprintf_r+0x2e>
 8007274:	230c      	movs	r3, #12
 8007276:	603b      	str	r3, [r7, #0]
 8007278:	f04f 30ff 	mov.w	r0, #4294967295
 800727c:	e0d1      	b.n	8007422 <_svfiprintf_r+0x1d2>
 800727e:	2340      	movs	r3, #64	; 0x40
 8007280:	616b      	str	r3, [r5, #20]
 8007282:	2300      	movs	r3, #0
 8007284:	9309      	str	r3, [sp, #36]	; 0x24
 8007286:	2320      	movs	r3, #32
 8007288:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800728c:	2330      	movs	r3, #48	; 0x30
 800728e:	f04f 0901 	mov.w	r9, #1
 8007292:	f8cd 800c 	str.w	r8, [sp, #12]
 8007296:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800743c <_svfiprintf_r+0x1ec>
 800729a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800729e:	4623      	mov	r3, r4
 80072a0:	469a      	mov	sl, r3
 80072a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072a6:	b10a      	cbz	r2, 80072ac <_svfiprintf_r+0x5c>
 80072a8:	2a25      	cmp	r2, #37	; 0x25
 80072aa:	d1f9      	bne.n	80072a0 <_svfiprintf_r+0x50>
 80072ac:	ebba 0b04 	subs.w	fp, sl, r4
 80072b0:	d00b      	beq.n	80072ca <_svfiprintf_r+0x7a>
 80072b2:	465b      	mov	r3, fp
 80072b4:	4622      	mov	r2, r4
 80072b6:	4629      	mov	r1, r5
 80072b8:	4638      	mov	r0, r7
 80072ba:	f7ff ff6d 	bl	8007198 <__ssputs_r>
 80072be:	3001      	adds	r0, #1
 80072c0:	f000 80aa 	beq.w	8007418 <_svfiprintf_r+0x1c8>
 80072c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072c6:	445a      	add	r2, fp
 80072c8:	9209      	str	r2, [sp, #36]	; 0x24
 80072ca:	f89a 3000 	ldrb.w	r3, [sl]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f000 80a2 	beq.w	8007418 <_svfiprintf_r+0x1c8>
 80072d4:	2300      	movs	r3, #0
 80072d6:	f04f 32ff 	mov.w	r2, #4294967295
 80072da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072de:	f10a 0a01 	add.w	sl, sl, #1
 80072e2:	9304      	str	r3, [sp, #16]
 80072e4:	9307      	str	r3, [sp, #28]
 80072e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072ea:	931a      	str	r3, [sp, #104]	; 0x68
 80072ec:	4654      	mov	r4, sl
 80072ee:	2205      	movs	r2, #5
 80072f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072f4:	4851      	ldr	r0, [pc, #324]	; (800743c <_svfiprintf_r+0x1ec>)
 80072f6:	f000 fa43 	bl	8007780 <memchr>
 80072fa:	9a04      	ldr	r2, [sp, #16]
 80072fc:	b9d8      	cbnz	r0, 8007336 <_svfiprintf_r+0xe6>
 80072fe:	06d0      	lsls	r0, r2, #27
 8007300:	bf44      	itt	mi
 8007302:	2320      	movmi	r3, #32
 8007304:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007308:	0711      	lsls	r1, r2, #28
 800730a:	bf44      	itt	mi
 800730c:	232b      	movmi	r3, #43	; 0x2b
 800730e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007312:	f89a 3000 	ldrb.w	r3, [sl]
 8007316:	2b2a      	cmp	r3, #42	; 0x2a
 8007318:	d015      	beq.n	8007346 <_svfiprintf_r+0xf6>
 800731a:	4654      	mov	r4, sl
 800731c:	2000      	movs	r0, #0
 800731e:	f04f 0c0a 	mov.w	ip, #10
 8007322:	9a07      	ldr	r2, [sp, #28]
 8007324:	4621      	mov	r1, r4
 8007326:	f811 3b01 	ldrb.w	r3, [r1], #1
 800732a:	3b30      	subs	r3, #48	; 0x30
 800732c:	2b09      	cmp	r3, #9
 800732e:	d94e      	bls.n	80073ce <_svfiprintf_r+0x17e>
 8007330:	b1b0      	cbz	r0, 8007360 <_svfiprintf_r+0x110>
 8007332:	9207      	str	r2, [sp, #28]
 8007334:	e014      	b.n	8007360 <_svfiprintf_r+0x110>
 8007336:	eba0 0308 	sub.w	r3, r0, r8
 800733a:	fa09 f303 	lsl.w	r3, r9, r3
 800733e:	4313      	orrs	r3, r2
 8007340:	46a2      	mov	sl, r4
 8007342:	9304      	str	r3, [sp, #16]
 8007344:	e7d2      	b.n	80072ec <_svfiprintf_r+0x9c>
 8007346:	9b03      	ldr	r3, [sp, #12]
 8007348:	1d19      	adds	r1, r3, #4
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	9103      	str	r1, [sp, #12]
 800734e:	2b00      	cmp	r3, #0
 8007350:	bfbb      	ittet	lt
 8007352:	425b      	neglt	r3, r3
 8007354:	f042 0202 	orrlt.w	r2, r2, #2
 8007358:	9307      	strge	r3, [sp, #28]
 800735a:	9307      	strlt	r3, [sp, #28]
 800735c:	bfb8      	it	lt
 800735e:	9204      	strlt	r2, [sp, #16]
 8007360:	7823      	ldrb	r3, [r4, #0]
 8007362:	2b2e      	cmp	r3, #46	; 0x2e
 8007364:	d10c      	bne.n	8007380 <_svfiprintf_r+0x130>
 8007366:	7863      	ldrb	r3, [r4, #1]
 8007368:	2b2a      	cmp	r3, #42	; 0x2a
 800736a:	d135      	bne.n	80073d8 <_svfiprintf_r+0x188>
 800736c:	9b03      	ldr	r3, [sp, #12]
 800736e:	3402      	adds	r4, #2
 8007370:	1d1a      	adds	r2, r3, #4
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	9203      	str	r2, [sp, #12]
 8007376:	2b00      	cmp	r3, #0
 8007378:	bfb8      	it	lt
 800737a:	f04f 33ff 	movlt.w	r3, #4294967295
 800737e:	9305      	str	r3, [sp, #20]
 8007380:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007440 <_svfiprintf_r+0x1f0>
 8007384:	2203      	movs	r2, #3
 8007386:	4650      	mov	r0, sl
 8007388:	7821      	ldrb	r1, [r4, #0]
 800738a:	f000 f9f9 	bl	8007780 <memchr>
 800738e:	b140      	cbz	r0, 80073a2 <_svfiprintf_r+0x152>
 8007390:	2340      	movs	r3, #64	; 0x40
 8007392:	eba0 000a 	sub.w	r0, r0, sl
 8007396:	fa03 f000 	lsl.w	r0, r3, r0
 800739a:	9b04      	ldr	r3, [sp, #16]
 800739c:	3401      	adds	r4, #1
 800739e:	4303      	orrs	r3, r0
 80073a0:	9304      	str	r3, [sp, #16]
 80073a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073a6:	2206      	movs	r2, #6
 80073a8:	4826      	ldr	r0, [pc, #152]	; (8007444 <_svfiprintf_r+0x1f4>)
 80073aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073ae:	f000 f9e7 	bl	8007780 <memchr>
 80073b2:	2800      	cmp	r0, #0
 80073b4:	d038      	beq.n	8007428 <_svfiprintf_r+0x1d8>
 80073b6:	4b24      	ldr	r3, [pc, #144]	; (8007448 <_svfiprintf_r+0x1f8>)
 80073b8:	bb1b      	cbnz	r3, 8007402 <_svfiprintf_r+0x1b2>
 80073ba:	9b03      	ldr	r3, [sp, #12]
 80073bc:	3307      	adds	r3, #7
 80073be:	f023 0307 	bic.w	r3, r3, #7
 80073c2:	3308      	adds	r3, #8
 80073c4:	9303      	str	r3, [sp, #12]
 80073c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073c8:	4433      	add	r3, r6
 80073ca:	9309      	str	r3, [sp, #36]	; 0x24
 80073cc:	e767      	b.n	800729e <_svfiprintf_r+0x4e>
 80073ce:	460c      	mov	r4, r1
 80073d0:	2001      	movs	r0, #1
 80073d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80073d6:	e7a5      	b.n	8007324 <_svfiprintf_r+0xd4>
 80073d8:	2300      	movs	r3, #0
 80073da:	f04f 0c0a 	mov.w	ip, #10
 80073de:	4619      	mov	r1, r3
 80073e0:	3401      	adds	r4, #1
 80073e2:	9305      	str	r3, [sp, #20]
 80073e4:	4620      	mov	r0, r4
 80073e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073ea:	3a30      	subs	r2, #48	; 0x30
 80073ec:	2a09      	cmp	r2, #9
 80073ee:	d903      	bls.n	80073f8 <_svfiprintf_r+0x1a8>
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d0c5      	beq.n	8007380 <_svfiprintf_r+0x130>
 80073f4:	9105      	str	r1, [sp, #20]
 80073f6:	e7c3      	b.n	8007380 <_svfiprintf_r+0x130>
 80073f8:	4604      	mov	r4, r0
 80073fa:	2301      	movs	r3, #1
 80073fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007400:	e7f0      	b.n	80073e4 <_svfiprintf_r+0x194>
 8007402:	ab03      	add	r3, sp, #12
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	462a      	mov	r2, r5
 8007408:	4638      	mov	r0, r7
 800740a:	4b10      	ldr	r3, [pc, #64]	; (800744c <_svfiprintf_r+0x1fc>)
 800740c:	a904      	add	r1, sp, #16
 800740e:	f3af 8000 	nop.w
 8007412:	1c42      	adds	r2, r0, #1
 8007414:	4606      	mov	r6, r0
 8007416:	d1d6      	bne.n	80073c6 <_svfiprintf_r+0x176>
 8007418:	89ab      	ldrh	r3, [r5, #12]
 800741a:	065b      	lsls	r3, r3, #25
 800741c:	f53f af2c 	bmi.w	8007278 <_svfiprintf_r+0x28>
 8007420:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007422:	b01d      	add	sp, #116	; 0x74
 8007424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007428:	ab03      	add	r3, sp, #12
 800742a:	9300      	str	r3, [sp, #0]
 800742c:	462a      	mov	r2, r5
 800742e:	4638      	mov	r0, r7
 8007430:	4b06      	ldr	r3, [pc, #24]	; (800744c <_svfiprintf_r+0x1fc>)
 8007432:	a904      	add	r1, sp, #16
 8007434:	f000 f87c 	bl	8007530 <_printf_i>
 8007438:	e7eb      	b.n	8007412 <_svfiprintf_r+0x1c2>
 800743a:	bf00      	nop
 800743c:	08008040 	.word	0x08008040
 8007440:	08008046 	.word	0x08008046
 8007444:	0800804a 	.word	0x0800804a
 8007448:	00000000 	.word	0x00000000
 800744c:	08007199 	.word	0x08007199

08007450 <_printf_common>:
 8007450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007454:	4616      	mov	r6, r2
 8007456:	4699      	mov	r9, r3
 8007458:	688a      	ldr	r2, [r1, #8]
 800745a:	690b      	ldr	r3, [r1, #16]
 800745c:	4607      	mov	r7, r0
 800745e:	4293      	cmp	r3, r2
 8007460:	bfb8      	it	lt
 8007462:	4613      	movlt	r3, r2
 8007464:	6033      	str	r3, [r6, #0]
 8007466:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800746a:	460c      	mov	r4, r1
 800746c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007470:	b10a      	cbz	r2, 8007476 <_printf_common+0x26>
 8007472:	3301      	adds	r3, #1
 8007474:	6033      	str	r3, [r6, #0]
 8007476:	6823      	ldr	r3, [r4, #0]
 8007478:	0699      	lsls	r1, r3, #26
 800747a:	bf42      	ittt	mi
 800747c:	6833      	ldrmi	r3, [r6, #0]
 800747e:	3302      	addmi	r3, #2
 8007480:	6033      	strmi	r3, [r6, #0]
 8007482:	6825      	ldr	r5, [r4, #0]
 8007484:	f015 0506 	ands.w	r5, r5, #6
 8007488:	d106      	bne.n	8007498 <_printf_common+0x48>
 800748a:	f104 0a19 	add.w	sl, r4, #25
 800748e:	68e3      	ldr	r3, [r4, #12]
 8007490:	6832      	ldr	r2, [r6, #0]
 8007492:	1a9b      	subs	r3, r3, r2
 8007494:	42ab      	cmp	r3, r5
 8007496:	dc28      	bgt.n	80074ea <_printf_common+0x9a>
 8007498:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800749c:	1e13      	subs	r3, r2, #0
 800749e:	6822      	ldr	r2, [r4, #0]
 80074a0:	bf18      	it	ne
 80074a2:	2301      	movne	r3, #1
 80074a4:	0692      	lsls	r2, r2, #26
 80074a6:	d42d      	bmi.n	8007504 <_printf_common+0xb4>
 80074a8:	4649      	mov	r1, r9
 80074aa:	4638      	mov	r0, r7
 80074ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074b0:	47c0      	blx	r8
 80074b2:	3001      	adds	r0, #1
 80074b4:	d020      	beq.n	80074f8 <_printf_common+0xa8>
 80074b6:	6823      	ldr	r3, [r4, #0]
 80074b8:	68e5      	ldr	r5, [r4, #12]
 80074ba:	f003 0306 	and.w	r3, r3, #6
 80074be:	2b04      	cmp	r3, #4
 80074c0:	bf18      	it	ne
 80074c2:	2500      	movne	r5, #0
 80074c4:	6832      	ldr	r2, [r6, #0]
 80074c6:	f04f 0600 	mov.w	r6, #0
 80074ca:	68a3      	ldr	r3, [r4, #8]
 80074cc:	bf08      	it	eq
 80074ce:	1aad      	subeq	r5, r5, r2
 80074d0:	6922      	ldr	r2, [r4, #16]
 80074d2:	bf08      	it	eq
 80074d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074d8:	4293      	cmp	r3, r2
 80074da:	bfc4      	itt	gt
 80074dc:	1a9b      	subgt	r3, r3, r2
 80074de:	18ed      	addgt	r5, r5, r3
 80074e0:	341a      	adds	r4, #26
 80074e2:	42b5      	cmp	r5, r6
 80074e4:	d11a      	bne.n	800751c <_printf_common+0xcc>
 80074e6:	2000      	movs	r0, #0
 80074e8:	e008      	b.n	80074fc <_printf_common+0xac>
 80074ea:	2301      	movs	r3, #1
 80074ec:	4652      	mov	r2, sl
 80074ee:	4649      	mov	r1, r9
 80074f0:	4638      	mov	r0, r7
 80074f2:	47c0      	blx	r8
 80074f4:	3001      	adds	r0, #1
 80074f6:	d103      	bne.n	8007500 <_printf_common+0xb0>
 80074f8:	f04f 30ff 	mov.w	r0, #4294967295
 80074fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007500:	3501      	adds	r5, #1
 8007502:	e7c4      	b.n	800748e <_printf_common+0x3e>
 8007504:	2030      	movs	r0, #48	; 0x30
 8007506:	18e1      	adds	r1, r4, r3
 8007508:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800750c:	1c5a      	adds	r2, r3, #1
 800750e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007512:	4422      	add	r2, r4
 8007514:	3302      	adds	r3, #2
 8007516:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800751a:	e7c5      	b.n	80074a8 <_printf_common+0x58>
 800751c:	2301      	movs	r3, #1
 800751e:	4622      	mov	r2, r4
 8007520:	4649      	mov	r1, r9
 8007522:	4638      	mov	r0, r7
 8007524:	47c0      	blx	r8
 8007526:	3001      	adds	r0, #1
 8007528:	d0e6      	beq.n	80074f8 <_printf_common+0xa8>
 800752a:	3601      	adds	r6, #1
 800752c:	e7d9      	b.n	80074e2 <_printf_common+0x92>
	...

08007530 <_printf_i>:
 8007530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007534:	7e0f      	ldrb	r7, [r1, #24]
 8007536:	4691      	mov	r9, r2
 8007538:	2f78      	cmp	r7, #120	; 0x78
 800753a:	4680      	mov	r8, r0
 800753c:	460c      	mov	r4, r1
 800753e:	469a      	mov	sl, r3
 8007540:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007542:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007546:	d807      	bhi.n	8007558 <_printf_i+0x28>
 8007548:	2f62      	cmp	r7, #98	; 0x62
 800754a:	d80a      	bhi.n	8007562 <_printf_i+0x32>
 800754c:	2f00      	cmp	r7, #0
 800754e:	f000 80d9 	beq.w	8007704 <_printf_i+0x1d4>
 8007552:	2f58      	cmp	r7, #88	; 0x58
 8007554:	f000 80a4 	beq.w	80076a0 <_printf_i+0x170>
 8007558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800755c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007560:	e03a      	b.n	80075d8 <_printf_i+0xa8>
 8007562:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007566:	2b15      	cmp	r3, #21
 8007568:	d8f6      	bhi.n	8007558 <_printf_i+0x28>
 800756a:	a101      	add	r1, pc, #4	; (adr r1, 8007570 <_printf_i+0x40>)
 800756c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007570:	080075c9 	.word	0x080075c9
 8007574:	080075dd 	.word	0x080075dd
 8007578:	08007559 	.word	0x08007559
 800757c:	08007559 	.word	0x08007559
 8007580:	08007559 	.word	0x08007559
 8007584:	08007559 	.word	0x08007559
 8007588:	080075dd 	.word	0x080075dd
 800758c:	08007559 	.word	0x08007559
 8007590:	08007559 	.word	0x08007559
 8007594:	08007559 	.word	0x08007559
 8007598:	08007559 	.word	0x08007559
 800759c:	080076eb 	.word	0x080076eb
 80075a0:	0800760d 	.word	0x0800760d
 80075a4:	080076cd 	.word	0x080076cd
 80075a8:	08007559 	.word	0x08007559
 80075ac:	08007559 	.word	0x08007559
 80075b0:	0800770d 	.word	0x0800770d
 80075b4:	08007559 	.word	0x08007559
 80075b8:	0800760d 	.word	0x0800760d
 80075bc:	08007559 	.word	0x08007559
 80075c0:	08007559 	.word	0x08007559
 80075c4:	080076d5 	.word	0x080076d5
 80075c8:	682b      	ldr	r3, [r5, #0]
 80075ca:	1d1a      	adds	r2, r3, #4
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	602a      	str	r2, [r5, #0]
 80075d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075d8:	2301      	movs	r3, #1
 80075da:	e0a4      	b.n	8007726 <_printf_i+0x1f6>
 80075dc:	6820      	ldr	r0, [r4, #0]
 80075de:	6829      	ldr	r1, [r5, #0]
 80075e0:	0606      	lsls	r6, r0, #24
 80075e2:	f101 0304 	add.w	r3, r1, #4
 80075e6:	d50a      	bpl.n	80075fe <_printf_i+0xce>
 80075e8:	680e      	ldr	r6, [r1, #0]
 80075ea:	602b      	str	r3, [r5, #0]
 80075ec:	2e00      	cmp	r6, #0
 80075ee:	da03      	bge.n	80075f8 <_printf_i+0xc8>
 80075f0:	232d      	movs	r3, #45	; 0x2d
 80075f2:	4276      	negs	r6, r6
 80075f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075f8:	230a      	movs	r3, #10
 80075fa:	485e      	ldr	r0, [pc, #376]	; (8007774 <_printf_i+0x244>)
 80075fc:	e019      	b.n	8007632 <_printf_i+0x102>
 80075fe:	680e      	ldr	r6, [r1, #0]
 8007600:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007604:	602b      	str	r3, [r5, #0]
 8007606:	bf18      	it	ne
 8007608:	b236      	sxthne	r6, r6
 800760a:	e7ef      	b.n	80075ec <_printf_i+0xbc>
 800760c:	682b      	ldr	r3, [r5, #0]
 800760e:	6820      	ldr	r0, [r4, #0]
 8007610:	1d19      	adds	r1, r3, #4
 8007612:	6029      	str	r1, [r5, #0]
 8007614:	0601      	lsls	r1, r0, #24
 8007616:	d501      	bpl.n	800761c <_printf_i+0xec>
 8007618:	681e      	ldr	r6, [r3, #0]
 800761a:	e002      	b.n	8007622 <_printf_i+0xf2>
 800761c:	0646      	lsls	r6, r0, #25
 800761e:	d5fb      	bpl.n	8007618 <_printf_i+0xe8>
 8007620:	881e      	ldrh	r6, [r3, #0]
 8007622:	2f6f      	cmp	r7, #111	; 0x6f
 8007624:	bf0c      	ite	eq
 8007626:	2308      	moveq	r3, #8
 8007628:	230a      	movne	r3, #10
 800762a:	4852      	ldr	r0, [pc, #328]	; (8007774 <_printf_i+0x244>)
 800762c:	2100      	movs	r1, #0
 800762e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007632:	6865      	ldr	r5, [r4, #4]
 8007634:	2d00      	cmp	r5, #0
 8007636:	bfa8      	it	ge
 8007638:	6821      	ldrge	r1, [r4, #0]
 800763a:	60a5      	str	r5, [r4, #8]
 800763c:	bfa4      	itt	ge
 800763e:	f021 0104 	bicge.w	r1, r1, #4
 8007642:	6021      	strge	r1, [r4, #0]
 8007644:	b90e      	cbnz	r6, 800764a <_printf_i+0x11a>
 8007646:	2d00      	cmp	r5, #0
 8007648:	d04d      	beq.n	80076e6 <_printf_i+0x1b6>
 800764a:	4615      	mov	r5, r2
 800764c:	fbb6 f1f3 	udiv	r1, r6, r3
 8007650:	fb03 6711 	mls	r7, r3, r1, r6
 8007654:	5dc7      	ldrb	r7, [r0, r7]
 8007656:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800765a:	4637      	mov	r7, r6
 800765c:	42bb      	cmp	r3, r7
 800765e:	460e      	mov	r6, r1
 8007660:	d9f4      	bls.n	800764c <_printf_i+0x11c>
 8007662:	2b08      	cmp	r3, #8
 8007664:	d10b      	bne.n	800767e <_printf_i+0x14e>
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	07de      	lsls	r6, r3, #31
 800766a:	d508      	bpl.n	800767e <_printf_i+0x14e>
 800766c:	6923      	ldr	r3, [r4, #16]
 800766e:	6861      	ldr	r1, [r4, #4]
 8007670:	4299      	cmp	r1, r3
 8007672:	bfde      	ittt	le
 8007674:	2330      	movle	r3, #48	; 0x30
 8007676:	f805 3c01 	strble.w	r3, [r5, #-1]
 800767a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800767e:	1b52      	subs	r2, r2, r5
 8007680:	6122      	str	r2, [r4, #16]
 8007682:	464b      	mov	r3, r9
 8007684:	4621      	mov	r1, r4
 8007686:	4640      	mov	r0, r8
 8007688:	f8cd a000 	str.w	sl, [sp]
 800768c:	aa03      	add	r2, sp, #12
 800768e:	f7ff fedf 	bl	8007450 <_printf_common>
 8007692:	3001      	adds	r0, #1
 8007694:	d14c      	bne.n	8007730 <_printf_i+0x200>
 8007696:	f04f 30ff 	mov.w	r0, #4294967295
 800769a:	b004      	add	sp, #16
 800769c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076a0:	4834      	ldr	r0, [pc, #208]	; (8007774 <_printf_i+0x244>)
 80076a2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80076a6:	6829      	ldr	r1, [r5, #0]
 80076a8:	6823      	ldr	r3, [r4, #0]
 80076aa:	f851 6b04 	ldr.w	r6, [r1], #4
 80076ae:	6029      	str	r1, [r5, #0]
 80076b0:	061d      	lsls	r5, r3, #24
 80076b2:	d514      	bpl.n	80076de <_printf_i+0x1ae>
 80076b4:	07df      	lsls	r7, r3, #31
 80076b6:	bf44      	itt	mi
 80076b8:	f043 0320 	orrmi.w	r3, r3, #32
 80076bc:	6023      	strmi	r3, [r4, #0]
 80076be:	b91e      	cbnz	r6, 80076c8 <_printf_i+0x198>
 80076c0:	6823      	ldr	r3, [r4, #0]
 80076c2:	f023 0320 	bic.w	r3, r3, #32
 80076c6:	6023      	str	r3, [r4, #0]
 80076c8:	2310      	movs	r3, #16
 80076ca:	e7af      	b.n	800762c <_printf_i+0xfc>
 80076cc:	6823      	ldr	r3, [r4, #0]
 80076ce:	f043 0320 	orr.w	r3, r3, #32
 80076d2:	6023      	str	r3, [r4, #0]
 80076d4:	2378      	movs	r3, #120	; 0x78
 80076d6:	4828      	ldr	r0, [pc, #160]	; (8007778 <_printf_i+0x248>)
 80076d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80076dc:	e7e3      	b.n	80076a6 <_printf_i+0x176>
 80076de:	0659      	lsls	r1, r3, #25
 80076e0:	bf48      	it	mi
 80076e2:	b2b6      	uxthmi	r6, r6
 80076e4:	e7e6      	b.n	80076b4 <_printf_i+0x184>
 80076e6:	4615      	mov	r5, r2
 80076e8:	e7bb      	b.n	8007662 <_printf_i+0x132>
 80076ea:	682b      	ldr	r3, [r5, #0]
 80076ec:	6826      	ldr	r6, [r4, #0]
 80076ee:	1d18      	adds	r0, r3, #4
 80076f0:	6961      	ldr	r1, [r4, #20]
 80076f2:	6028      	str	r0, [r5, #0]
 80076f4:	0635      	lsls	r5, r6, #24
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	d501      	bpl.n	80076fe <_printf_i+0x1ce>
 80076fa:	6019      	str	r1, [r3, #0]
 80076fc:	e002      	b.n	8007704 <_printf_i+0x1d4>
 80076fe:	0670      	lsls	r0, r6, #25
 8007700:	d5fb      	bpl.n	80076fa <_printf_i+0x1ca>
 8007702:	8019      	strh	r1, [r3, #0]
 8007704:	2300      	movs	r3, #0
 8007706:	4615      	mov	r5, r2
 8007708:	6123      	str	r3, [r4, #16]
 800770a:	e7ba      	b.n	8007682 <_printf_i+0x152>
 800770c:	682b      	ldr	r3, [r5, #0]
 800770e:	2100      	movs	r1, #0
 8007710:	1d1a      	adds	r2, r3, #4
 8007712:	602a      	str	r2, [r5, #0]
 8007714:	681d      	ldr	r5, [r3, #0]
 8007716:	6862      	ldr	r2, [r4, #4]
 8007718:	4628      	mov	r0, r5
 800771a:	f000 f831 	bl	8007780 <memchr>
 800771e:	b108      	cbz	r0, 8007724 <_printf_i+0x1f4>
 8007720:	1b40      	subs	r0, r0, r5
 8007722:	6060      	str	r0, [r4, #4]
 8007724:	6863      	ldr	r3, [r4, #4]
 8007726:	6123      	str	r3, [r4, #16]
 8007728:	2300      	movs	r3, #0
 800772a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800772e:	e7a8      	b.n	8007682 <_printf_i+0x152>
 8007730:	462a      	mov	r2, r5
 8007732:	4649      	mov	r1, r9
 8007734:	4640      	mov	r0, r8
 8007736:	6923      	ldr	r3, [r4, #16]
 8007738:	47d0      	blx	sl
 800773a:	3001      	adds	r0, #1
 800773c:	d0ab      	beq.n	8007696 <_printf_i+0x166>
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	079b      	lsls	r3, r3, #30
 8007742:	d413      	bmi.n	800776c <_printf_i+0x23c>
 8007744:	68e0      	ldr	r0, [r4, #12]
 8007746:	9b03      	ldr	r3, [sp, #12]
 8007748:	4298      	cmp	r0, r3
 800774a:	bfb8      	it	lt
 800774c:	4618      	movlt	r0, r3
 800774e:	e7a4      	b.n	800769a <_printf_i+0x16a>
 8007750:	2301      	movs	r3, #1
 8007752:	4632      	mov	r2, r6
 8007754:	4649      	mov	r1, r9
 8007756:	4640      	mov	r0, r8
 8007758:	47d0      	blx	sl
 800775a:	3001      	adds	r0, #1
 800775c:	d09b      	beq.n	8007696 <_printf_i+0x166>
 800775e:	3501      	adds	r5, #1
 8007760:	68e3      	ldr	r3, [r4, #12]
 8007762:	9903      	ldr	r1, [sp, #12]
 8007764:	1a5b      	subs	r3, r3, r1
 8007766:	42ab      	cmp	r3, r5
 8007768:	dcf2      	bgt.n	8007750 <_printf_i+0x220>
 800776a:	e7eb      	b.n	8007744 <_printf_i+0x214>
 800776c:	2500      	movs	r5, #0
 800776e:	f104 0619 	add.w	r6, r4, #25
 8007772:	e7f5      	b.n	8007760 <_printf_i+0x230>
 8007774:	08008051 	.word	0x08008051
 8007778:	08008062 	.word	0x08008062

0800777c <__retarget_lock_acquire_recursive>:
 800777c:	4770      	bx	lr

0800777e <__retarget_lock_release_recursive>:
 800777e:	4770      	bx	lr

08007780 <memchr>:
 8007780:	4603      	mov	r3, r0
 8007782:	b510      	push	{r4, lr}
 8007784:	b2c9      	uxtb	r1, r1
 8007786:	4402      	add	r2, r0
 8007788:	4293      	cmp	r3, r2
 800778a:	4618      	mov	r0, r3
 800778c:	d101      	bne.n	8007792 <memchr+0x12>
 800778e:	2000      	movs	r0, #0
 8007790:	e003      	b.n	800779a <memchr+0x1a>
 8007792:	7804      	ldrb	r4, [r0, #0]
 8007794:	3301      	adds	r3, #1
 8007796:	428c      	cmp	r4, r1
 8007798:	d1f6      	bne.n	8007788 <memchr+0x8>
 800779a:	bd10      	pop	{r4, pc}

0800779c <_realloc_r>:
 800779c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077a0:	4680      	mov	r8, r0
 80077a2:	4614      	mov	r4, r2
 80077a4:	460e      	mov	r6, r1
 80077a6:	b921      	cbnz	r1, 80077b2 <_realloc_r+0x16>
 80077a8:	4611      	mov	r1, r2
 80077aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077ae:	f7ff bbff 	b.w	8006fb0 <_malloc_r>
 80077b2:	b92a      	cbnz	r2, 80077c0 <_realloc_r+0x24>
 80077b4:	f7ff fb94 	bl	8006ee0 <_free_r>
 80077b8:	4625      	mov	r5, r4
 80077ba:	4628      	mov	r0, r5
 80077bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077c0:	f000 f81b 	bl	80077fa <_malloc_usable_size_r>
 80077c4:	4284      	cmp	r4, r0
 80077c6:	4607      	mov	r7, r0
 80077c8:	d802      	bhi.n	80077d0 <_realloc_r+0x34>
 80077ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80077ce:	d812      	bhi.n	80077f6 <_realloc_r+0x5a>
 80077d0:	4621      	mov	r1, r4
 80077d2:	4640      	mov	r0, r8
 80077d4:	f7ff fbec 	bl	8006fb0 <_malloc_r>
 80077d8:	4605      	mov	r5, r0
 80077da:	2800      	cmp	r0, #0
 80077dc:	d0ed      	beq.n	80077ba <_realloc_r+0x1e>
 80077de:	42bc      	cmp	r4, r7
 80077e0:	4622      	mov	r2, r4
 80077e2:	4631      	mov	r1, r6
 80077e4:	bf28      	it	cs
 80077e6:	463a      	movcs	r2, r7
 80077e8:	f7ff fb4a 	bl	8006e80 <memcpy>
 80077ec:	4631      	mov	r1, r6
 80077ee:	4640      	mov	r0, r8
 80077f0:	f7ff fb76 	bl	8006ee0 <_free_r>
 80077f4:	e7e1      	b.n	80077ba <_realloc_r+0x1e>
 80077f6:	4635      	mov	r5, r6
 80077f8:	e7df      	b.n	80077ba <_realloc_r+0x1e>

080077fa <_malloc_usable_size_r>:
 80077fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077fe:	1f18      	subs	r0, r3, #4
 8007800:	2b00      	cmp	r3, #0
 8007802:	bfbc      	itt	lt
 8007804:	580b      	ldrlt	r3, [r1, r0]
 8007806:	18c0      	addlt	r0, r0, r3
 8007808:	4770      	bx	lr
	...

0800780c <_init>:
 800780c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780e:	bf00      	nop
 8007810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007812:	bc08      	pop	{r3}
 8007814:	469e      	mov	lr, r3
 8007816:	4770      	bx	lr

08007818 <_fini>:
 8007818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800781a:	bf00      	nop
 800781c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800781e:	bc08      	pop	{r3}
 8007820:	469e      	mov	lr, r3
 8007822:	4770      	bx	lr
